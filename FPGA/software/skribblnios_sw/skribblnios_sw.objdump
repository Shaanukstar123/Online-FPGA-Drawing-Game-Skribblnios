
skribblnios_sw.elf:     file format elf32-littlenios2
skribblnios_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000248

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00010818 memsz 0x00010818 flags r-x
    LOAD off    0x00011838 vaddr 0x04010838 paddr 0x04012354 align 2**12
         filesz 0x00001b1c memsz 0x00001b1c flags rw-
    LOAD off    0x00013e70 vaddr 0x04013e70 paddr 0x04013e70 align 2**12
         filesz 0x00000000 memsz 0x00000178 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010000  04000248  04000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005f0  04010248  04010248  00011248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b1c  04010838  04012354  00011838  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000178  04013e70  04013e70  00013e70  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04013fe8  04013fe8  00013354  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013354  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f30  00000000  00000000  00013378  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025164  00000000  00000000  000142a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009480  00000000  00000000  0003940c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bd60  00000000  00000000  0004288c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002230  00000000  00000000  0004e5ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003b19  00000000  00000000  0005081c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017c6d  00000000  00000000  00054335  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0006bfa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d0  00000000  00000000  0006bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00070c42  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00070c45  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00070c48  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00070c49  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00070c4a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00070c53  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00070c5c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00070c65  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000049  00000000  00000000  00070c6f  2**0
                  CONTENTS, READONLY
 26 .jdi          00004dde  00000000  00000000  00070cb8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007b230  00000000  00000000  00075a96  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000248 l    d  .text	00000000 .text
04010248 l    d  .rodata	00000000 .rodata
04010838 l    d  .rwdata	00000000 .rwdata
04013e70 l    d  .bss	00000000 .bss
04013fe8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../skribblnios_sw_bsp//obj/HAL/src/crt0.o
040002c0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 skribblmain.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04000efc l     F .text	00000008 __fp_unlock
04000f10 l     F .text	0000019c __sinit.part.1
040010ac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04010838 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
040102f2 l     O .rodata	00000010 zeroes.4404
040049f4 l     F .text	000000bc __sbprintf
04010302 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
04010413 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
04004cb8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04011084 l     O .rwdata	00000020 lc_ctype_charset
04011064 l     O .rwdata	00000020 lc_message_charset
040110a4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
040105b0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
04007b34 l     F .text	000000fc __sprint_r.part.0
040106e4 l     O .rodata	00000010 blanks.4348
040106d4 l     O .rodata	00000010 zeroes.4349
040090c0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400d680 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400d78c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400d7b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400d8a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400d984 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400da70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0400dc44 l     F .text	0000003c alt_get_errno
0400dc80 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0400de98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04012344 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400e13c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400e270 l     F .text	00000034 alt_dev_reg
04011284 l     O .rwdata	00001060 jtag_uart
040122e4 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400e560 l     F .text	00000210 altera_avalon_jtag_uart_irq
0400e770 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400f440 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400f850 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04013ebc g     O .bss	00000004 alt_instruction_exception_handler
040078e8 g     F .text	00000074 _mprec_log10
040079d4 g     F .text	0000008c __any_on
04009960 g     F .text	00000054 _isatty_r
040105bc g     O .rodata	00000028 __mprec_tinytens
0400db80 g     F .text	0000007c alt_main
04002464 g     F .text	00000090 strcpy
04013ee8 g     O .bss	00000100 alt_irq
0400661c g     F .text	00000060 _lseek_r
04013e70 g     O .bss	00000004 z_read
04012354 g       *ABS*	00000000 __flash_rwdata_start
0400c1ac g     F .text	00000088 .hidden __eqdf2
04013fe8 g       *ABS*	00000000 __alt_heap_start
040021bc g     F .text	0000003c printf
0400a1cc g     F .text	0000009c _wcrtomb_r
04002324 g     F .text	0000005c __sseek
0400124c g     F .text	00000010 __sinit
0400a074 g     F .text	00000140 __swbuf_r
04006540 g     F .text	0000007c _setlocale_r
040010b4 g     F .text	00000068 __sfmoreglue
0400dc20 g     F .text	00000024 __malloc_unlock
04013eac g     O .bss	00000004 altera_avalon_timer_ts_freq
040099b4 g     F .text	0000015c memmove
04001234 g     F .text	00000018 _cleanup
04006a64 g     F .text	000000a8 _Balloc
0400c234 g     F .text	000000dc .hidden __gtdf2
0400fd64 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000001c __reset
0400f064 g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
04000020 g       *ABS*	00000000 __flash_exceptions_start
04009448 g     F .text	0000005c _fstat_r
04013e8c g     O .bss	00000004 errno
040022a0 g     F .text	00000008 __seofread
04013ea0 g     O .bss	00000004 alt_argv
0401a310 g       *ABS*	00000000 _gp
04011104 g     O .rwdata	00000180 alt_fd_list
0400f5e0 g     F .text	00000090 alt_find_dev
0400691c g     F .text	00000148 memcpy
04000f04 g     F .text	0000000c _cleanup_r
0400d498 g     F .text	000000dc .hidden __floatsidf
0400f914 g     F .text	0000007c alt_io_redirect
0400c310 g     F .text	000000f4 .hidden __ltdf2
04010248 g       *ABS*	00000000 __DTOR_END__
0400fe18 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04007ac0 g     F .text	00000074 __fpclassifyd
04007844 g     F .text	000000a4 __ratio
040090a4 g     F .text	0000001c __vfiprintf_internal
0400e968 g     F .text	00000248 altera_avalon_jtag_uart_read
0400218c g     F .text	00000030 _printf_r
0400af5c g     F .text	00000064 .hidden __udivsi3
0400d8e0 g     F .text	000000a4 isatty
0401060c g     O .rodata	000000c8 __mprec_tens
040065bc g     F .text	0000000c __locale_charset
0400fd88 g     F .text	00000090 alt_icache_flush
04013e88 g     O .bss	00000004 __malloc_top_pad
04012324 g     O .rwdata	00000004 __mb_cur_max
040065ec g     F .text	0000000c _localeconv_r
04013e74 g     O .bss	00000004 y_read
040094a4 g     F .text	000004bc __sfvwrite_r
04006e70 g     F .text	0000003c __i2b
040021f8 g     F .text	00000054 _sbrk_r
04007a60 g     F .text	00000060 _read_r
0401233c g     O .rwdata	00000004 alt_max_fd
04000b50 g     F .text	000000f0 _fclose_r
04000ecc g     F .text	00000030 fflush
04013e84 g     O .bss	00000004 __malloc_max_sbrked_mem
0400f990 g     F .text	00000204 alt_irq_register
0400b018 g     F .text	000008ac .hidden __adddf3
040075ec g     F .text	0000010c __b2d
0400a92c g     F .text	00000538 .hidden __umoddi3
0400daac g     F .text	000000d4 lseek
04012310 g     O .rwdata	00000004 _global_impure_ptr
04009b10 g     F .text	00000564 _realloc_r
04013fe8 g       *ABS*	00000000 __bss_end
0400fc5c g     F .text	00000108 alt_tick
0400a3b4 g     F .text	00000578 .hidden __udivdi3
040093a4 g     F .text	00000024 _fputwc_r
040105e4 g     O .rodata	00000028 __mprec_bigtens
04006c54 g     F .text	00000104 __s2b
0400d574 g     F .text	000000a8 .hidden __floatunsidf
0400732c g     F .text	00000060 __mcmp
0400126c g     F .text	00000018 __fp_lock_all
0400fb94 g     F .text	000000c8 alt_alarm_stop
040027c4 g     F .text	0000001c strtol
04013eb0 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d8 alt_irq_handler
040110dc g     O .rwdata	00000028 alt_dev_null
0400f420 g     F .text	00000020 alt_dcache_flush_all
04006d58 g     F .text	00000068 __hi0bits
0400d418 g     F .text	00000080 .hidden __fixdfsi
04012354 g       *ABS*	00000000 __ram_rwdata_end
04012334 g     O .rwdata	00000008 alt_dev_list
0400e178 g     F .text	000000f8 write
04013e78 g     O .bss	00000004 x_read
0400eef8 g     F .text	00000020 alt_timestamp_freq
04010838 g       *ABS*	00000000 __ram_rodata_end
040004ac g     F .text	00000330 writeScore
0400d7f4 g     F .text	000000b0 fstat
0400c310 g     F .text	000000f4 .hidden __ledf2
040070a4 g     F .text	00000140 __pow5mult
04007c48 g     F .text	0000145c ___vfiprintf_internal_r
04013e98 g     O .bss	00000004 __nlocale_changed
0400afc0 g     F .text	00000058 .hidden __umodsi3
04013fe8 g       *ABS*	00000000 end
04000b44 g     F .text	0000000c _atoi_r
0400e4ac g     F .text	000000b4 altera_avalon_jtag_uart_init
040001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
04010248 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0400d61c g     F .text	00000064 .hidden __clzsi2
0400ebb0 g     F .text	00000250 altera_avalon_jtag_uart_write
0400125c g     F .text	00000004 __sfp_lock_acquire
04006838 g     F .text	000000e4 memchr
040027e0 g     F .text	000021f8 ___vfprintf_internal_r
040013c0 g     F .text	00000310 _free_r
0400089c g     F .text	00000154 roundLoop
040065c8 g     F .text	00000010 __locale_mb_cur_max
04010094 g     F .text	00000180 __call_exitprocs
04013e94 g     O .bss	00000004 __mlocale_changed
04012318 g     O .rwdata	00000004 __malloc_sbrk_base
04000248 g     F .text	0000007c _start
04013eb4 g     O .bss	00000004 _alt_tick_rate
040071e4 g     F .text	00000148 __lshift
04013eb8 g     O .bss	00000004 _alt_nticks
0400ded4 g     F .text	000000fc read
0400e2dc g     F .text	0000006c alt_sys_init
0400ef54 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
0400ff7c g     F .text	00000118 __register_exitproc
04006eac g     F .text	000001f8 __multiply
0400e810 g     F .text	00000068 altera_avalon_jtag_uart_close
04010838 g       *ABS*	00000000 __ram_rwdata_start
04010248 g       *ABS*	00000000 __ram_rodata_start
04013ec0 g     O .bss	00000028 __malloc_current_mallinfo
040076f8 g     F .text	0000014c __d2b
0400e348 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400f778 g     F .text	000000a4 alt_get_fd
0400f130 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
04004c64 g     F .text	00000054 _close_r
0400ff00 g     F .text	0000007c memcmp
0400e408 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04013fe8 g       *ABS*	00000000 __alt_stack_base
0400e458 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04004b10 g     F .text	00000154 __swsetup_r
0400b8c4 g     F .text	000008e8 .hidden __divdf3
0400111c g     F .text	00000118 __sfp
0400795c g     F .text	00000078 __copybits
04010c5c g     O .rwdata	00000408 __malloc_av_
04001268 g     F .text	00000004 __sinit_lock_release
0400c404 g     F .text	00000718 .hidden __muldf3
0400224c g     F .text	00000054 __sread
0400f670 g     F .text	00000108 alt_find_file
0400f47c g     F .text	000000a4 alt_dev_llist_insert
0400dbfc g     F .text	00000024 __malloc_lock
0400e034 g     F .text	00000108 sbrk
04000e70 g     F .text	0000005c _fflush_r
0400917c g     F .text	000000c4 _calloc_r
04013e70 g       *ABS*	00000000 __bss_start
04002064 g     F .text	00000128 memset
040009f0 g     F .text	00000148 main
04013ea4 g     O .bss	00000004 alt_envp
04013e80 g     O .bss	00000004 __malloc_max_total_mem
0400e3a8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400a1b4 g     F .text	00000018 __swbuf
04002380 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04000c40 g     F .text	00000014 fclose
0400258c g     F .text	00000238 _strtol_r
0400ee00 g     F .text	00000078 alt_timestamp_start
04004eb8 g     F .text	00001688 _dtoa_r
04001858 g     F .text	0000080c _malloc_r
0400a328 g     F .text	00000030 __ascii_wctomb
04012340 g     O .rwdata	00000004 alt_errno
040016d0 g     F .text	000000c4 _fwalk
0400ae64 g     F .text	00000084 .hidden __divsi3
0400129c g     F .text	00000124 _malloc_trim_r
04010248 g       *ABS*	00000000 __CTOR_END__
04002388 g     F .text	000000dc strcmp
04010248 g       *ABS*	00000000 __flash_rodata_start
04000810 g     F .text	0000008c waitForData
04010248 g       *ABS*	00000000 __DTOR_LIST__
0400c1ac g     F .text	00000088 .hidden __nedf2
0400e2a4 g     F .text	00000038 alt_irq_init
0400dfd0 g     F .text	00000064 alt_release_fd
040106f4 g     O .rodata	00000100 .hidden __clz_tab
040002c4 g     F .text	000001e8 convertDisplay
04013e90 g     O .bss	00000004 _PathLocale
0400feb4 g     F .text	00000014 atexit
04004ab0 g     F .text	00000060 _write_r
040065f8 g     F .text	00000018 setlocale
04012314 g     O .rwdata	00000004 _impure_ptr
04013e9c g     O .bss	00000004 alt_argc
04000c54 g     F .text	0000021c __sflush_r
04013ea8 g     O .bss	00000004 altera_avalon_timer_ts_base
0400f580 g     F .text	00000060 _do_dtors
040065e4 g     F .text	00000008 __locale_cjk_lang
04000020 g       .exceptions	00000000 alt_irq_entry
04007588 g     F .text	00000064 __ulp
04001284 g     F .text	00000018 __fp_unlock_all
0401232c g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400ef18 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
04006610 g     F .text	0000000c localeconv
0400ee78 g     F .text	00000080 alt_timestamp
040007dc g     F .text	00000034 ledWrite
04012354 g       *ABS*	00000000 _edata
04013fe8 g       *ABS*	00000000 _end
04009240 g     F .text	00000164 __fputwc
04000248 g       *ABS*	00000000 __ram_exceptions_end
0400e878 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040022a8 g     F .text	0000007c __swrite
0401231c g     O .rwdata	00000004 __malloc_trim_threshold
040065d8 g     F .text	0000000c __locale_msgcharset
0400fec8 g     F .text	00000038 exit
04001794 g     F .text	000000c4 _fwalk_reent
0400738c g     F .text	000001fc __mdiff
0400aee8 g     F .text	00000074 .hidden __modsi3
04012320 g     O .rwdata	00000004 __ctype_ptr__
0400f1fc g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04001260 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04000b38 g     F .text	0000000c atoi
04010312 g     O .rodata	00000101 _ctype_
04010214 g     F .text	00000034 _exit
0400f2c8 g     F .text	00000158 alt_alarm_start
0400ef98 g     F .text	00000068 alt_up_accelerometer_spi_read
0400f000 g     F .text	00000064 alt_up_accelerometer_spi_write
0400667c g     F .text	000001bc __smakebuf_r
040024f4 g     F .text	00000098 strlen
0400dd44 g     F .text	00000154 open
0400c234 g     F .text	000000dc .hidden __gedf2
04012328 g     O .rwdata	00000004 __wctomb
04007c30 g     F .text	00000018 __sprint_r
0400f81c g     F .text	00000034 alt_icache_flush_all
04012348 g     O .rwdata	00000004 alt_priority_mask
040049d8 g     F .text	0000001c __vfprintf_internal
0400a358 g     F .text	0000005c _wctomb_r
0400cb1c g     F .text	000008fc .hidden __subdf3
04013e7c g     O .bss	00000004 acc_dev
04006dc0 g     F .text	000000b0 __lo0bits
0401234c g     O .rwdata	00000008 alt_alarm_list
0400f520 g     F .text	00000060 _do_ctors
0400a268 g     F .text	000000c0 wcrtomb
0400d6bc g     F .text	000000d0 close
0400d9ec g     F .text	00000084 alt_load
040093c8 g     F .text	00000080 fputwc
04001264 g     F .text	00000004 __sinit_lock_acquire
04006b34 g     F .text	00000120 __multadd
04006b0c g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409214 	ori	at,at,584
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d40 	call	40001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001526 	beq	r2,zero,4000190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 400013c:	00810074 	movhi	r2,1025
 4000140:	108fba04 	addi	r2,r2,16104
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810074 	movhi	r2,1025
 4000158:	108fba04 	addi	r2,r2,16104
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	e17ffd17 	ldw	r5,-12(fp)
 4000174:	1009883a 	mov	r4,r2
 4000178:	183ee83a 	callr	r3
#endif
        break;
 400017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000180:	0005313a 	rdctl	r2,ipending
 4000184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000188:	e0bfff17 	ldw	r2,-4(fp)
 400018c:	00000706 	br	40001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 4000190:	e0bffc17 	ldw	r2,-16(fp)
 4000194:	1085883a 	add	r2,r2,r2
 4000198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 400019c:	e0bffd17 	ldw	r2,-12(fp)
 40001a0:	10800044 	addi	r2,r2,1
 40001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a8:	003fe006 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001b0:	e0bffb17 	ldw	r2,-20(fp)
 40001b4:	103fda1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b8:	0001883a 	nop
}
 40001bc:	0001883a 	nop
 40001c0:	e037883a 	mov	sp,fp
 40001c4:	dfc00117 	ldw	ra,4(sp)
 40001c8:	df000017 	ldw	fp,0(sp)
 40001cc:	dec00204 	addi	sp,sp,8
 40001d0:	f800283a 	ret

040001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d4:	defffb04 	addi	sp,sp,-20
 40001d8:	dfc00415 	stw	ra,16(sp)
 40001dc:	df000315 	stw	fp,12(sp)
 40001e0:	df000304 	addi	fp,sp,12
 40001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e8:	000531fa 	rdctl	r2,exception
 40001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001f0:	e0bffd17 	ldw	r2,-12(fp)
 40001f4:	10801f0c 	andi	r2,r2,124
 40001f8:	1004d0ba 	srli	r2,r2,2
 40001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 4000200:	0005333a 	rdctl	r2,badaddr
 4000204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000208:	d0a6eb17 	ldw	r2,-25684(gp)
 400020c:	10000726 	beq	r2,zero,400022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 4000210:	d0a6eb17 	ldw	r2,-25684(gp)
 4000214:	e0fffd17 	ldw	r3,-12(fp)
 4000218:	e1bffe17 	ldw	r6,-8(fp)
 400021c:	e17fff17 	ldw	r5,-4(fp)
 4000220:	1809883a 	mov	r4,r3
 4000224:	103ee83a 	callr	r2
 4000228:	00000206 	br	4000234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 400022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000230:	0005883a 	mov	r2,zero
}
 4000234:	e037883a 	mov	sp,fp
 4000238:	dfc00117 	ldw	ra,4(sp)
 400023c:	df000017 	ldw	fp,0(sp)
 4000240:	dec00204 	addi	sp,sp,8
 4000244:	f800283a 	ret

Disassembly of section .text:

04000248 <_start>:
     * writing zero to SSTATUS register and executing an ERET instruction
     * to set STATUS.CRS to 0.
     */
    
    /* Get the current register set number (STATUS.CRS). */
    rdctl r2, status
 4000248:	0005303a 	rdctl	r2,status
    andi r2, r2, NIOS2_STATUS_CRS_MSK
 400024c:	10bf000c 	andi	r2,r2,64512
    
    /* Skip switching register set if STATUS.CRS is 0.  */
    beq r2, zero, 0f
 4000250:	10000426 	beq	r2,zero,4000264 <_start+0x1c>

    /* Set SSTATUS to 0 to get to set SSTATUS.PRS to 0. */
    .set nobreak
    movui sstatus, 0
 4000254:	07800014 	movui	sstatus,0
    .set break

    /* Switch to register set 0 and jump to label. */
    movhi ea, %hi(0f)
 4000258:	07410034 	movhi	ea,1024
    ori ea, ea, %lo(0f)
 400025c:	ef409914 	ori	ea,ea,612
    eret
 4000260:	ef80083a 	eret

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000264:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000268:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400026c:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000270:	d6a8c414 	ori	gp,gp,41744
    /* 
     * Setup registers in shadow register sets
     * from 1 to NIOS2_NUM_OF_SHADOW_REG_SETS.
     */

    movui r2, 0     /* Contains value written into STATUS */
 4000274:	00800014 	movui	r2,0
    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS  /* counter */
 4000278:	00c00814 	movui	r3,32
    movhi r4, 1     /* Constant to increment STATUS.PRS */
 400027c:	01000074 	movhi	r4,1
    
.Linitialize_shadow_registers:
    /* Increment STATUS.PRS */
    add r2, r2, r4
 4000280:	1105883a 	add	r2,r2,r4
    wrctl status, r2
 4000284:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
 4000288:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
 400028c:	d034a03a 	wrprs	gp,gp
    wrprs r30, r0    /* ba */
    wrprs r31, r0    /* ra */
#endif /* NIOS2_ECC_PRESENT */

    /* Decrement shadow register set counter */
    addi r3, r3, -1
 4000290:	18ffffc4 	addi	r3,r3,-1

    /* Done if index is 0. */
    bne r3, zero, .Linitialize_shadow_registers
 4000294:	183ffa1e 	bne	r3,zero,4000280 <__alt_data_end+0xfc000280>
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000298:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 400029c:	108f9c14 	ori	r2,r2,15984

    movhi r3, %hi(__bss_end)
 40002a0:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 40002a4:	18cffa14 	ori	r3,r3,16360

    beq r2, r3, 1f
 40002a8:	10c00326 	beq	r2,r3,40002b8 <_start+0x70>

0:
    stw zero, (r2)
 40002ac:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40002b0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40002b4:	10fffd36 	bltu	r2,r3,40002ac <__alt_data_end+0xfc0002ac>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40002b8:	400d9ec0 	call	400d9ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40002bc:	400db800 	call	400db80 <alt_main>

040002c0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40002c0:	003fff06 	br	40002c0 <__alt_data_end+0xfc0002c0>

040002c4 <convertDisplay>:
alt_32 y_read;
alt_32 z_read;
alt_up_accelerometer_spi_dev * acc_dev;

//Convert letters - will be upside down
alt_u8 convertDisplay(char digit) {
 40002c4:	defffe04 	addi	sp,sp,-8
 40002c8:	df000115 	stw	fp,4(sp)
 40002cc:	df000104 	addi	fp,sp,4
 40002d0:	2005883a 	mov	r2,r4
 40002d4:	e0bfff05 	stb	r2,-4(fp)
	switch(digit) {
 40002d8:	e0bfff07 	ldb	r2,-4(fp)
 40002dc:	10bff4c4 	addi	r2,r2,-45
 40002e0:	10c01228 	cmpgeui	r3,r2,72
 40002e4:	18006c1e 	bne	r3,zero,4000498 <convertDisplay+0x1d4>
 40002e8:	100690ba 	slli	r3,r2,2
 40002ec:	00810034 	movhi	r2,1024
 40002f0:	1080c004 	addi	r2,r2,768
 40002f4:	1885883a 	add	r2,r3,r2
 40002f8:	10800017 	ldw	r2,0(r2)
 40002fc:	1000683a 	jmp	r2
 4000300:	04000470 	cmpltui	r16,zero,17
 4000304:	04000498 	cmpnei	r16,zero,18
 4000308:	04000498 	cmpnei	r16,zero,18
 400030c:	04000420 	cmpeqi	r16,zero,16
 4000310:	04000428 	cmpgeui	r16,zero,16
 4000314:	04000430 	cmpltui	r16,zero,16
 4000318:	04000438 	rdprs	r16,zero,16
 400031c:	04000440 	call	400044 <__alt_mem_sdram-0x3bfffbc>
 4000320:	04000448 	cmpgei	r16,zero,17
 4000324:	04000450 	cmplti	r16,zero,17
 4000328:	04000458 	cmpnei	r16,zero,17
 400032c:	04000460 	cmpeqi	r16,zero,17
 4000330:	04000468 	cmpgeui	r16,zero,17
 4000334:	04000498 	cmpnei	r16,zero,18
 4000338:	04000498 	cmpnei	r16,zero,18
 400033c:	04000498 	cmpnei	r16,zero,18
 4000340:	04000498 	cmpnei	r16,zero,18
 4000344:	04000498 	cmpnei	r16,zero,18
 4000348:	04000498 	cmpnei	r16,zero,18
 400034c:	04000498 	cmpnei	r16,zero,18
 4000350:	04000498 	cmpnei	r16,zero,18
 4000354:	04000498 	cmpnei	r16,zero,18
 4000358:	04000498 	cmpnei	r16,zero,18
 400035c:	04000498 	cmpnei	r16,zero,18
 4000360:	04000498 	cmpnei	r16,zero,18
 4000364:	04000498 	cmpnei	r16,zero,18
 4000368:	04000498 	cmpnei	r16,zero,18
 400036c:	04000498 	cmpnei	r16,zero,18
 4000370:	04000498 	cmpnei	r16,zero,18
 4000374:	04000498 	cmpnei	r16,zero,18
 4000378:	04000498 	cmpnei	r16,zero,18
 400037c:	04000498 	cmpnei	r16,zero,18
 4000380:	04000498 	cmpnei	r16,zero,18
 4000384:	04000498 	cmpnei	r16,zero,18
 4000388:	04000498 	cmpnei	r16,zero,18
 400038c:	04000498 	cmpnei	r16,zero,18
 4000390:	04000498 	cmpnei	r16,zero,18
 4000394:	04000498 	cmpnei	r16,zero,18
 4000398:	04000498 	cmpnei	r16,zero,18
 400039c:	04000498 	cmpnei	r16,zero,18
 40003a0:	04000498 	cmpnei	r16,zero,18
 40003a4:	04000498 	cmpnei	r16,zero,18
 40003a8:	04000498 	cmpnei	r16,zero,18
 40003ac:	04000498 	cmpnei	r16,zero,18
 40003b0:	04000498 	cmpnei	r16,zero,18
 40003b4:	04000498 	cmpnei	r16,zero,18
 40003b8:	04000498 	cmpnei	r16,zero,18
 40003bc:	04000498 	cmpnei	r16,zero,18
 40003c0:	04000498 	cmpnei	r16,zero,18
 40003c4:	04000498 	cmpnei	r16,zero,18
 40003c8:	04000498 	cmpnei	r16,zero,18
 40003cc:	04000498 	cmpnei	r16,zero,18
 40003d0:	04000488 	cmpgei	r16,zero,18
 40003d4:	04000498 	cmpnei	r16,zero,18
 40003d8:	04000498 	cmpnei	r16,zero,18
 40003dc:	04000498 	cmpnei	r16,zero,18
 40003e0:	04000498 	cmpnei	r16,zero,18
 40003e4:	04000498 	cmpnei	r16,zero,18
 40003e8:	04000498 	cmpnei	r16,zero,18
 40003ec:	04000498 	cmpnei	r16,zero,18
 40003f0:	04000498 	cmpnei	r16,zero,18
 40003f4:	04000498 	cmpnei	r16,zero,18
 40003f8:	04000498 	cmpnei	r16,zero,18
 40003fc:	04000498 	cmpnei	r16,zero,18
 4000400:	04000498 	cmpnei	r16,zero,18
 4000404:	04000498 	cmpnei	r16,zero,18
 4000408:	04000498 	cmpnei	r16,zero,18
 400040c:	04000498 	cmpnei	r16,zero,18
 4000410:	04000498 	cmpnei	r16,zero,18
 4000414:	04000490 	cmplti	r16,zero,18
 4000418:	04000478 	rdprs	r16,zero,17
 400041c:	04000480 	call	400048 <__alt_mem_sdram-0x3bfffb8>
	case '0':
		return 0b11000000;
 4000420:	00bff004 	movi	r2,-64
 4000424:	00001d06 	br	400049c <convertDisplay+0x1d8>
	case '1':
		return 0b11001111;
 4000428:	00bff3c4 	movi	r2,-49
 400042c:	00001b06 	br	400049c <convertDisplay+0x1d8>
	case '2':
		return 0b10100100;
 4000430:	00bfe904 	movi	r2,-92
 4000434:	00001906 	br	400049c <convertDisplay+0x1d8>
	case '3':
		return 0b10000110;
 4000438:	00bfe184 	movi	r2,-122
 400043c:	00001706 	br	400049c <convertDisplay+0x1d8>
	case '4':
		return 0b10001011;
 4000440:	00bfe2c4 	movi	r2,-117
 4000444:	00001506 	br	400049c <convertDisplay+0x1d8>
	case '5':
		return 0b10010010;
 4000448:	00bfe484 	movi	r2,-110
 400044c:	00001306 	br	400049c <convertDisplay+0x1d8>
	case '6':
		return 0b10010000;
 4000450:	00bfe404 	movi	r2,-112
 4000454:	00001106 	br	400049c <convertDisplay+0x1d8>
	case '7':
		return 0b11000111;
 4000458:	00bff1c4 	movi	r2,-57
 400045c:	00000f06 	br	400049c <convertDisplay+0x1d8>
	case '8':
		return 0b10000000;
 4000460:	00bfe004 	movi	r2,-128
 4000464:	00000d06 	br	400049c <convertDisplay+0x1d8>
	case '9':
		return 0b10000010;
 4000468:	00bfe084 	movi	r2,-126
 400046c:	00000b06 	br	400049c <convertDisplay+0x1d8>
	case '-':
		return 0b10111111;
 4000470:	00bfefc4 	movi	r2,-65
 4000474:	00000906 	br	400049c <convertDisplay+0x1d8>
	case 's':
		return 0b10010010;
 4000478:	00bfe484 	movi	r2,-110
 400047c:	00000706 	br	400049c <convertDisplay+0x1d8>
	case 't':
		return 0b10111000;
 4000480:	00bfee04 	movi	r2,-72
 4000484:	00000506 	br	400049c <convertDisplay+0x1d8>
	case 'a':
		return 0b10000001;
 4000488:	00bfe044 	movi	r2,-127
 400048c:	00000306 	br	400049c <convertDisplay+0x1d8>
	case 'r':
		return 0b10111101; //0b11110001 Capital
 4000490:	00bfef44 	movi	r2,-67
 4000494:	00000106 	br	400049c <convertDisplay+0x1d8>
	default:
		return 0b11111111;
 4000498:	00bfffc4 	movi	r2,-1
	}
}
 400049c:	e037883a 	mov	sp,fp
 40004a0:	df000017 	ldw	fp,0(sp)
 40004a4:	dec00104 	addi	sp,sp,4
 40004a8:	f800283a 	ret

040004ac <writeScore>:
//Write to hex
void writeScore(char* scoreStr) {
 40004ac:	defffd04 	addi	sp,sp,-12
 40004b0:	dfc00215 	stw	ra,8(sp)
 40004b4:	df000115 	stw	fp,4(sp)
 40004b8:	df000104 	addi	fp,sp,4
 40004bc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, convertDisplay(scoreStr[0]));
 40004c0:	e0bfff17 	ldw	r2,-4(fp)
 40004c4:	10800003 	ldbu	r2,0(r2)
 40004c8:	10803fcc 	andi	r2,r2,255
 40004cc:	1080201c 	xori	r2,r2,128
 40004d0:	10bfe004 	addi	r2,r2,-128
 40004d4:	1009883a 	mov	r4,r2
 40004d8:	40002c40 	call	40002c4 <convertDisplay>
 40004dc:	10c03fcc 	andi	r3,r2,255
 40004e0:	00820034 	movhi	r2,2048
 40004e4:	10842404 	addi	r2,r2,4240
 40004e8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, convertDisplay(scoreStr[1]));
 40004ec:	e0bfff17 	ldw	r2,-4(fp)
 40004f0:	10800044 	addi	r2,r2,1
 40004f4:	10800003 	ldbu	r2,0(r2)
 40004f8:	10803fcc 	andi	r2,r2,255
 40004fc:	1080201c 	xori	r2,r2,128
 4000500:	10bfe004 	addi	r2,r2,-128
 4000504:	1009883a 	mov	r4,r2
 4000508:	40002c40 	call	40002c4 <convertDisplay>
 400050c:	10c03fcc 	andi	r3,r2,255
 4000510:	00820034 	movhi	r2,2048
 4000514:	10842004 	addi	r2,r2,4224
 4000518:	10c00035 	stwio	r3,0(r2)
	switch (strlen(scoreStr)){
 400051c:	e13fff17 	ldw	r4,-4(fp)
 4000520:	40024f40 	call	40024f4 <strlen>
 4000524:	10c00120 	cmpeqi	r3,r2,4
 4000528:	1800281e 	bne	r3,zero,40005cc <writeScore+0x120>
 400052c:	10c00168 	cmpgeui	r3,r2,5
 4000530:	1800031e 	bne	r3,zero,4000540 <writeScore+0x94>
 4000534:	108000e0 	cmpeqi	r2,r2,3
 4000538:	1000061e 	bne	r2,zero,4000554 <writeScore+0xa8>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, convertDisplay(scoreStr[2]));
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, convertDisplay(scoreStr[3]));
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, convertDisplay(scoreStr[4]));
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, convertDisplay(scoreStr[5]));
	}
	return;
 400053c:	0000a206 	br	40007c8 <writeScore+0x31c>
}
//Write to hex
void writeScore(char* scoreStr) {
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, convertDisplay(scoreStr[0]));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, convertDisplay(scoreStr[1]));
	switch (strlen(scoreStr)){
 4000540:	10c00160 	cmpeqi	r3,r2,5
 4000544:	1800451e 	bne	r3,zero,400065c <writeScore+0x1b0>
 4000548:	108001a0 	cmpeqi	r2,r2,6
 400054c:	10006d1e 	bne	r2,zero,4000704 <writeScore+0x258>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, convertDisplay(scoreStr[2]));
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, convertDisplay(scoreStr[3]));
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, convertDisplay(scoreStr[4]));
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, convertDisplay(scoreStr[5]));
	}
	return;
 4000550:	00009d06 	br	40007c8 <writeScore+0x31c>
void writeScore(char* scoreStr) {
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, convertDisplay(scoreStr[0]));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, convertDisplay(scoreStr[1]));
	switch (strlen(scoreStr)){
	case 3:
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, convertDisplay('.'));
 4000554:	01000b84 	movi	r4,46
 4000558:	40002c40 	call	40002c4 <convertDisplay>
 400055c:	10c03fcc 	andi	r3,r2,255
 4000560:	00820034 	movhi	r2,2048
 4000564:	10841c04 	addi	r2,r2,4208
 4000568:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, convertDisplay('.'));
 400056c:	01000b84 	movi	r4,46
 4000570:	40002c40 	call	40002c4 <convertDisplay>
 4000574:	10c03fcc 	andi	r3,r2,255
 4000578:	00820034 	movhi	r2,2048
 400057c:	10841804 	addi	r2,r2,4192
 4000580:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, convertDisplay('.'));
 4000584:	01000b84 	movi	r4,46
 4000588:	40002c40 	call	40002c4 <convertDisplay>
 400058c:	10c03fcc 	andi	r3,r2,255
 4000590:	00820034 	movhi	r2,2048
 4000594:	10841404 	addi	r2,r2,4176
 4000598:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, convertDisplay(scoreStr[2]));
 400059c:	e0bfff17 	ldw	r2,-4(fp)
 40005a0:	10800084 	addi	r2,r2,2
 40005a4:	10800003 	ldbu	r2,0(r2)
 40005a8:	10803fcc 	andi	r2,r2,255
 40005ac:	1080201c 	xori	r2,r2,128
 40005b0:	10bfe004 	addi	r2,r2,-128
 40005b4:	1009883a 	mov	r4,r2
 40005b8:	40002c40 	call	40002c4 <convertDisplay>
 40005bc:	10c03fcc 	andi	r3,r2,255
 40005c0:	00820034 	movhi	r2,2048
 40005c4:	10841004 	addi	r2,r2,4160
 40005c8:	10c00035 	stwio	r3,0(r2)
	case 4:
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, convertDisplay('.'));
 40005cc:	01000b84 	movi	r4,46
 40005d0:	40002c40 	call	40002c4 <convertDisplay>
 40005d4:	10c03fcc 	andi	r3,r2,255
 40005d8:	00820034 	movhi	r2,2048
 40005dc:	10841c04 	addi	r2,r2,4208
 40005e0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, convertDisplay('.'));
 40005e4:	01000b84 	movi	r4,46
 40005e8:	40002c40 	call	40002c4 <convertDisplay>
 40005ec:	10c03fcc 	andi	r3,r2,255
 40005f0:	00820034 	movhi	r2,2048
 40005f4:	10841804 	addi	r2,r2,4192
 40005f8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, convertDisplay(scoreStr[2]));
 40005fc:	e0bfff17 	ldw	r2,-4(fp)
 4000600:	10800084 	addi	r2,r2,2
 4000604:	10800003 	ldbu	r2,0(r2)
 4000608:	10803fcc 	andi	r2,r2,255
 400060c:	1080201c 	xori	r2,r2,128
 4000610:	10bfe004 	addi	r2,r2,-128
 4000614:	1009883a 	mov	r4,r2
 4000618:	40002c40 	call	40002c4 <convertDisplay>
 400061c:	10c03fcc 	andi	r3,r2,255
 4000620:	00820034 	movhi	r2,2048
 4000624:	10841404 	addi	r2,r2,4176
 4000628:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, convertDisplay(scoreStr[3]));
 400062c:	e0bfff17 	ldw	r2,-4(fp)
 4000630:	108000c4 	addi	r2,r2,3
 4000634:	10800003 	ldbu	r2,0(r2)
 4000638:	10803fcc 	andi	r2,r2,255
 400063c:	1080201c 	xori	r2,r2,128
 4000640:	10bfe004 	addi	r2,r2,-128
 4000644:	1009883a 	mov	r4,r2
 4000648:	40002c40 	call	40002c4 <convertDisplay>
 400064c:	10c03fcc 	andi	r3,r2,255
 4000650:	00820034 	movhi	r2,2048
 4000654:	10841004 	addi	r2,r2,4160
 4000658:	10c00035 	stwio	r3,0(r2)
	case 5:
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, convertDisplay('.'));
 400065c:	01000b84 	movi	r4,46
 4000660:	40002c40 	call	40002c4 <convertDisplay>
 4000664:	10c03fcc 	andi	r3,r2,255
 4000668:	00820034 	movhi	r2,2048
 400066c:	10841c04 	addi	r2,r2,4208
 4000670:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, convertDisplay(scoreStr[2]));
 4000674:	e0bfff17 	ldw	r2,-4(fp)
 4000678:	10800084 	addi	r2,r2,2
 400067c:	10800003 	ldbu	r2,0(r2)
 4000680:	10803fcc 	andi	r2,r2,255
 4000684:	1080201c 	xori	r2,r2,128
 4000688:	10bfe004 	addi	r2,r2,-128
 400068c:	1009883a 	mov	r4,r2
 4000690:	40002c40 	call	40002c4 <convertDisplay>
 4000694:	10c03fcc 	andi	r3,r2,255
 4000698:	00820034 	movhi	r2,2048
 400069c:	10841804 	addi	r2,r2,4192
 40006a0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, convertDisplay(scoreStr[3]));
 40006a4:	e0bfff17 	ldw	r2,-4(fp)
 40006a8:	108000c4 	addi	r2,r2,3
 40006ac:	10800003 	ldbu	r2,0(r2)
 40006b0:	10803fcc 	andi	r2,r2,255
 40006b4:	1080201c 	xori	r2,r2,128
 40006b8:	10bfe004 	addi	r2,r2,-128
 40006bc:	1009883a 	mov	r4,r2
 40006c0:	40002c40 	call	40002c4 <convertDisplay>
 40006c4:	10c03fcc 	andi	r3,r2,255
 40006c8:	00820034 	movhi	r2,2048
 40006cc:	10841404 	addi	r2,r2,4176
 40006d0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, convertDisplay(scoreStr[4]));
 40006d4:	e0bfff17 	ldw	r2,-4(fp)
 40006d8:	10800104 	addi	r2,r2,4
 40006dc:	10800003 	ldbu	r2,0(r2)
 40006e0:	10803fcc 	andi	r2,r2,255
 40006e4:	1080201c 	xori	r2,r2,128
 40006e8:	10bfe004 	addi	r2,r2,-128
 40006ec:	1009883a 	mov	r4,r2
 40006f0:	40002c40 	call	40002c4 <convertDisplay>
 40006f4:	10c03fcc 	andi	r3,r2,255
 40006f8:	00820034 	movhi	r2,2048
 40006fc:	10841004 	addi	r2,r2,4160
 4000700:	10c00035 	stwio	r3,0(r2)
	case 6:
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, convertDisplay(scoreStr[2]));
 4000704:	e0bfff17 	ldw	r2,-4(fp)
 4000708:	10800084 	addi	r2,r2,2
 400070c:	10800003 	ldbu	r2,0(r2)
 4000710:	10803fcc 	andi	r2,r2,255
 4000714:	1080201c 	xori	r2,r2,128
 4000718:	10bfe004 	addi	r2,r2,-128
 400071c:	1009883a 	mov	r4,r2
 4000720:	40002c40 	call	40002c4 <convertDisplay>
 4000724:	10c03fcc 	andi	r3,r2,255
 4000728:	00820034 	movhi	r2,2048
 400072c:	10841c04 	addi	r2,r2,4208
 4000730:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, convertDisplay(scoreStr[3]));
 4000734:	e0bfff17 	ldw	r2,-4(fp)
 4000738:	108000c4 	addi	r2,r2,3
 400073c:	10800003 	ldbu	r2,0(r2)
 4000740:	10803fcc 	andi	r2,r2,255
 4000744:	1080201c 	xori	r2,r2,128
 4000748:	10bfe004 	addi	r2,r2,-128
 400074c:	1009883a 	mov	r4,r2
 4000750:	40002c40 	call	40002c4 <convertDisplay>
 4000754:	10c03fcc 	andi	r3,r2,255
 4000758:	00820034 	movhi	r2,2048
 400075c:	10841804 	addi	r2,r2,4192
 4000760:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, convertDisplay(scoreStr[4]));
 4000764:	e0bfff17 	ldw	r2,-4(fp)
 4000768:	10800104 	addi	r2,r2,4
 400076c:	10800003 	ldbu	r2,0(r2)
 4000770:	10803fcc 	andi	r2,r2,255
 4000774:	1080201c 	xori	r2,r2,128
 4000778:	10bfe004 	addi	r2,r2,-128
 400077c:	1009883a 	mov	r4,r2
 4000780:	40002c40 	call	40002c4 <convertDisplay>
 4000784:	10c03fcc 	andi	r3,r2,255
 4000788:	00820034 	movhi	r2,2048
 400078c:	10841404 	addi	r2,r2,4176
 4000790:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, convertDisplay(scoreStr[5]));
 4000794:	e0bfff17 	ldw	r2,-4(fp)
 4000798:	10800144 	addi	r2,r2,5
 400079c:	10800003 	ldbu	r2,0(r2)
 40007a0:	10803fcc 	andi	r2,r2,255
 40007a4:	1080201c 	xori	r2,r2,128
 40007a8:	10bfe004 	addi	r2,r2,-128
 40007ac:	1009883a 	mov	r4,r2
 40007b0:	40002c40 	call	40002c4 <convertDisplay>
 40007b4:	10c03fcc 	andi	r3,r2,255
 40007b8:	00820034 	movhi	r2,2048
 40007bc:	10841004 	addi	r2,r2,4160
 40007c0:	10c00035 	stwio	r3,0(r2)
	}
	return;
 40007c4:	0001883a 	nop
}
 40007c8:	e037883a 	mov	sp,fp
 40007cc:	dfc00117 	ldw	ra,4(sp)
 40007d0:	df000017 	ldw	fp,0(sp)
 40007d4:	dec00204 	addi	sp,sp,8
 40007d8:	f800283a 	ret

040007dc <ledWrite>:



//Write to leds
void ledWrite(unsigned int led_pattern) {
 40007dc:	defffe04 	addi	sp,sp,-8
 40007e0:	df000115 	stw	fp,4(sp)
 40007e4:	df000104 	addi	fp,sp,4
 40007e8:	e13fff15 	stw	r4,-4(fp)
    IOWR(LED_BASE, 0, led_pattern);
 40007ec:	e0ffff17 	ldw	r3,-4(fp)
 40007f0:	00820034 	movhi	r2,2048
 40007f4:	10842804 	addi	r2,r2,4256
 40007f8:	10c00035 	stwio	r3,0(r2)
}
 40007fc:	0001883a 	nop
 4000800:	e037883a 	mov	sp,fp
 4000804:	df000017 	ldw	fp,0(sp)
 4000808:	dec00104 	addi	sp,sp,4
 400080c:	f800283a 	ret

04000810 <waitForData>:

//Function that halts till certain data is received
char* waitForData(FILE* fp, char* compare1, char* compare2) {
 4000810:	deffc904 	addi	sp,sp,-220
 4000814:	dfc03615 	stw	ra,216(sp)
 4000818:	df003515 	stw	fp,212(sp)
 400081c:	df003504 	addi	fp,sp,212
 4000820:	e13ffd15 	stw	r4,-12(fp)
 4000824:	e17ffe15 	stw	r5,-8(fp)
 4000828:	e1bfff15 	stw	r6,-4(fp)
	char* waitIn[BUFFERSIZE];
	while ((strcmp(waitIn, compare1) != 0) && (strcmp(waitIn, compare2) != 0 )) {
 400082c:	00000406 	br	4000840 <waitForData+0x30>
		read(fp, &waitIn, BUFFERSIZE);
 4000830:	01800c84 	movi	r6,50
 4000834:	e17fcb04 	addi	r5,fp,-212
 4000838:	e13ffd17 	ldw	r4,-12(fp)
 400083c:	400ded40 	call	400ded4 <read>
}

//Function that halts till certain data is received
char* waitForData(FILE* fp, char* compare1, char* compare2) {
	char* waitIn[BUFFERSIZE];
	while ((strcmp(waitIn, compare1) != 0) && (strcmp(waitIn, compare2) != 0 )) {
 4000840:	e17ffe17 	ldw	r5,-8(fp)
 4000844:	e13fcb04 	addi	r4,fp,-212
 4000848:	40023880 	call	4002388 <strcmp>
 400084c:	10000426 	beq	r2,zero,4000860 <waitForData+0x50>
 4000850:	e17fff17 	ldw	r5,-4(fp)
 4000854:	e13fcb04 	addi	r4,fp,-212
 4000858:	40023880 	call	4002388 <strcmp>
 400085c:	103ff41e 	bne	r2,zero,4000830 <__alt_data_end+0xfc000830>
		read(fp, &waitIn, BUFFERSIZE);
	}
	printf("BREAK");
 4000860:	01010074 	movhi	r4,1025
 4000864:	21009204 	addi	r4,r4,584
 4000868:	40021bc0 	call	40021bc <printf>
	if ((strcmp(waitIn, compare1)) != 0) {
 400086c:	e17ffe17 	ldw	r5,-8(fp)
 4000870:	e13fcb04 	addi	r4,fp,-212
 4000874:	40023880 	call	4002388 <strcmp>
 4000878:	10000226 	beq	r2,zero,4000884 <waitForData+0x74>
		return compare1;
 400087c:	e0bffe17 	ldw	r2,-8(fp)
 4000880:	00000106 	br	4000888 <waitForData+0x78>
	} else {
		return compare2;
 4000884:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 4000888:	e037883a 	mov	sp,fp
 400088c:	dfc00117 	ldw	ra,4(sp)
 4000890:	df000017 	ldw	fp,0(sp)
 4000894:	dec00204 	addi	sp,sp,8
 4000898:	f800283a 	ret

0400089c <roundLoop>:

//Function that runs during a round
void roundLoop(FILE* fp) {
 400089c:	deffc904 	addi	sp,sp,-220
 40008a0:	dfc03615 	stw	ra,216(sp)
 40008a4:	df003515 	stw	fp,212(sp)
 40008a8:	df003504 	addi	fp,sp,212
 40008ac:	e13fff15 	stw	r4,-4(fp)
	char* timeRatio[BUFFERSIZE];
	int ratio = 0;
 40008b0:	e03fcb15 	stw	zero,-212(fp)
	alt_timestamp_start();
 40008b4:	400ee000 	call	400ee00 <alt_timestamp_start>
	alt_32 startTime = alt_timestamp();
 40008b8:	400ee780 	call	400ee78 <alt_timestamp>
 40008bc:	e0bfcc15 	stw	r2,-208(fp)
	alt_32 stopTime;
	//While time is not up
	while (strcmp(timeRatio, "100") != 0) {
 40008c0:	00003f06 	br	40009c0 <roundLoop+0x124>
		//If received a time ratio
		if(read(fp, &timeRatio, 1) > 0) {
 40008c4:	e0bfcd04 	addi	r2,fp,-204
 40008c8:	01800044 	movi	r6,1
 40008cc:	100b883a 	mov	r5,r2
 40008d0:	e13fff17 	ldw	r4,-4(fp)
 40008d4:	400ded40 	call	400ded4 <read>
 40008d8:	0080390e 	bge	zero,r2,40009c0 <roundLoop+0x124>
			ratio = atoi(timeRatio);
 40008dc:	e0bfcd04 	addi	r2,fp,-204
 40008e0:	1009883a 	mov	r4,r2
 40008e4:	4000b380 	call	4000b38 <atoi>
 40008e8:	e0bfcb15 	stw	r2,-212(fp)
			if (ratio < 10) {
 40008ec:	e0bfcb17 	ldw	r2,-212(fp)
 40008f0:	10800288 	cmpgei	r2,r2,10
 40008f4:	1000031e 	bne	r2,zero,4000904 <roundLoop+0x68>
				ledWrite(0b1);
 40008f8:	01000044 	movi	r4,1
 40008fc:	40007dc0 	call	40007dc <ledWrite>
 4000900:	00002f06 	br	40009c0 <roundLoop+0x124>
			} else if (ratio < 20) {
 4000904:	e0bfcb17 	ldw	r2,-212(fp)
 4000908:	10800508 	cmpgei	r2,r2,20
 400090c:	1000031e 	bne	r2,zero,400091c <roundLoop+0x80>
				ledWrite(0b11);
 4000910:	010000c4 	movi	r4,3
 4000914:	40007dc0 	call	40007dc <ledWrite>
 4000918:	00002906 	br	40009c0 <roundLoop+0x124>
			} else if (ratio < 30) {
 400091c:	e0bfcb17 	ldw	r2,-212(fp)
 4000920:	10800788 	cmpgei	r2,r2,30
 4000924:	1000031e 	bne	r2,zero,4000934 <roundLoop+0x98>
				ledWrite(0b111);
 4000928:	010001c4 	movi	r4,7
 400092c:	40007dc0 	call	40007dc <ledWrite>
 4000930:	00002306 	br	40009c0 <roundLoop+0x124>
			} else if (ratio < 40) {
 4000934:	e0bfcb17 	ldw	r2,-212(fp)
 4000938:	10800a08 	cmpgei	r2,r2,40
 400093c:	1000031e 	bne	r2,zero,400094c <roundLoop+0xb0>
				ledWrite(0b1111);
 4000940:	010003c4 	movi	r4,15
 4000944:	40007dc0 	call	40007dc <ledWrite>
 4000948:	00001d06 	br	40009c0 <roundLoop+0x124>
			} else if (ratio < 50) {
 400094c:	e0bfcb17 	ldw	r2,-212(fp)
 4000950:	10800c88 	cmpgei	r2,r2,50
 4000954:	1000031e 	bne	r2,zero,4000964 <roundLoop+0xc8>
				ledWrite(0b11111);
 4000958:	010007c4 	movi	r4,31
 400095c:	40007dc0 	call	40007dc <ledWrite>
 4000960:	00001706 	br	40009c0 <roundLoop+0x124>
			} else if (ratio < 60) {
 4000964:	e0bfcb17 	ldw	r2,-212(fp)
 4000968:	10800f08 	cmpgei	r2,r2,60
 400096c:	1000031e 	bne	r2,zero,400097c <roundLoop+0xe0>
				ledWrite(0b111111);
 4000970:	01000fc4 	movi	r4,63
 4000974:	40007dc0 	call	40007dc <ledWrite>
 4000978:	00001106 	br	40009c0 <roundLoop+0x124>
			} else if (ratio < 70) {
 400097c:	e0bfcb17 	ldw	r2,-212(fp)
 4000980:	10801188 	cmpgei	r2,r2,70
 4000984:	1000031e 	bne	r2,zero,4000994 <roundLoop+0xf8>
				ledWrite(0b1111111);
 4000988:	01001fc4 	movi	r4,127
 400098c:	40007dc0 	call	40007dc <ledWrite>
 4000990:	00000b06 	br	40009c0 <roundLoop+0x124>
			} else if (ratio < 80) {
 4000994:	e0bfcb17 	ldw	r2,-212(fp)
 4000998:	10801408 	cmpgei	r2,r2,80
 400099c:	1000031e 	bne	r2,zero,40009ac <roundLoop+0x110>
				ledWrite(0b11111111);
 40009a0:	01003fc4 	movi	r4,255
 40009a4:	40007dc0 	call	40007dc <ledWrite>
 40009a8:	00000506 	br	40009c0 <roundLoop+0x124>
			} else if (ratio < 90) {
 40009ac:	e0bfcb17 	ldw	r2,-212(fp)
 40009b0:	10801688 	cmpgei	r2,r2,90
 40009b4:	1000021e 	bne	r2,zero,40009c0 <roundLoop+0x124>
				ledWrite(0b111111111);
 40009b8:	01007fc4 	movi	r4,511
 40009bc:	40007dc0 	call	40007dc <ledWrite>
	int ratio = 0;
	alt_timestamp_start();
	alt_32 startTime = alt_timestamp();
	alt_32 stopTime;
	//While time is not up
	while (strcmp(timeRatio, "100") != 0) {
 40009c0:	e0bfcd04 	addi	r2,fp,-204
 40009c4:	01410074 	movhi	r5,1025
 40009c8:	29409404 	addi	r5,r5,592
 40009cc:	1009883a 	mov	r4,r2
 40009d0:	40023880 	call	4002388 <strcmp>
 40009d4:	103fbb1e 	bne	r2,zero,40008c4 <__alt_data_end+0xfc0008c4>
			startTime = alt_timestamp();

		}
		*/
	}
}
 40009d8:	0001883a 	nop
 40009dc:	e037883a 	mov	sp,fp
 40009e0:	dfc00117 	ldw	ra,4(sp)
 40009e4:	df000017 	ldw	fp,0(sp)
 40009e8:	dec00204 	addi	sp,sp,8
 40009ec:	f800283a 	ret

040009f0 <main>:

int main () {
 40009f0:	deffcb04 	addi	sp,sp,-212
 40009f4:	dfc03415 	stw	ra,208(sp)
 40009f8:	df003315 	stw	fp,204(sp)
 40009fc:	df003304 	addi	fp,sp,204
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
 4000a00:	01010074 	movhi	r4,1025
 4000a04:	21009504 	addi	r4,r4,596
 4000a08:	400ef180 	call	400ef18 <alt_up_accelerometer_spi_open_dev>
 4000a0c:	d0a6db15 	stw	r2,-25748(gp)
	if (acc_dev == NULL) {
 4000a10:	d0a6db17 	ldw	r2,-25748(gp)
 4000a14:	1000021e 	bne	r2,zero,4000a20 <main+0x30>
		// if return 1, check if the spi ip name is "accelerometer_spi"
		return 1;
 4000a18:	00800044 	movi	r2,1
 4000a1c:	00004106 	br	4000b24 <main+0x134>
	}
	char* dataIn[BUFFERSIZE];
	FILE* fp = open("/dev/jtag_uart", O_RDWR|O_NONBLOCK|O_NOCTTY|O_SYNC);
 4000a20:	01780094 	movui	r5,57346
 4000a24:	01010074 	movhi	r4,1025
 4000a28:	21009b04 	addi	r4,r4,620
 4000a2c:	400dd440 	call	400dd44 <open>
 4000a30:	e0bfcd15 	stw	r2,-204(fp)
	writeScore("start");
 4000a34:	01010074 	movhi	r4,1025
 4000a38:	21009f04 	addi	r4,r4,636
 4000a3c:	40004ac0 	call	40004ac <writeScore>
	ledWrite(0b1111111111);
 4000a40:	0100ffc4 	movi	r4,1023
 4000a44:	40007dc0 	call	40007dc <ledWrite>
	//Wait for start
	strcpy(dataIn, waitForData(fp, "STARTGAME", "STARTGAME"));
 4000a48:	01810074 	movhi	r6,1025
 4000a4c:	3180a104 	addi	r6,r6,644
 4000a50:	01410074 	movhi	r5,1025
 4000a54:	2940a104 	addi	r5,r5,644
 4000a58:	e13fcd17 	ldw	r4,-204(fp)
 4000a5c:	40008100 	call	4000810 <waitForData>
 4000a60:	1007883a 	mov	r3,r2
 4000a64:	e0bfce04 	addi	r2,fp,-200
 4000a68:	180b883a 	mov	r5,r3
 4000a6c:	1009883a 	mov	r4,r2
 4000a70:	40024640 	call	4002464 <strcpy>
	writeScore("------");
 4000a74:	01010074 	movhi	r4,1025
 4000a78:	2100a404 	addi	r4,r4,656
 4000a7c:	40004ac0 	call	40004ac <writeScore>
	//Wait for round start
	strcpy(dataIn, waitForData(fp, "STARTROUND", "STARTROUND"));
 4000a80:	01810074 	movhi	r6,1025
 4000a84:	3180a604 	addi	r6,r6,664
 4000a88:	01410074 	movhi	r5,1025
 4000a8c:	2940a604 	addi	r5,r5,664
 4000a90:	e13fcd17 	ldw	r4,-204(fp)
 4000a94:	40008100 	call	4000810 <waitForData>
 4000a98:	1007883a 	mov	r3,r2
 4000a9c:	e0bfce04 	addi	r2,fp,-200
 4000aa0:	180b883a 	mov	r5,r3
 4000aa4:	1009883a 	mov	r4,r2
 4000aa8:	40024640 	call	4002464 <strcpy>
	fclose(fp);
 4000aac:	e13fcd17 	ldw	r4,-204(fp)
 4000ab0:	4000c400 	call	4000c40 <fclose>

	//MAIN LOOP - Terminate loop when game end
	while (strcmp(dataIn, "ENDGAME") != 0) {
 4000ab4:	00001406 	br	4000b08 <main+0x118>
		fp = open("/dev/jtag_uart", O_RDWR|O_NONBLOCK|O_NOCTTY|O_SYNC);
 4000ab8:	01780094 	movui	r5,57346
 4000abc:	01010074 	movhi	r4,1025
 4000ac0:	21009b04 	addi	r4,r4,620
 4000ac4:	400dd440 	call	400dd44 <open>
 4000ac8:	e0bfcd15 	stw	r2,-204(fp)
		roundLoop(fp);
 4000acc:	e13fcd17 	ldw	r4,-204(fp)
 4000ad0:	400089c0 	call	400089c <roundLoop>
		strcpy(dataIn, waitForData(fp, "STARTGAME", "ENDGAME"));
 4000ad4:	01810074 	movhi	r6,1025
 4000ad8:	3180a904 	addi	r6,r6,676
 4000adc:	01410074 	movhi	r5,1025
 4000ae0:	2940a104 	addi	r5,r5,644
 4000ae4:	e13fcd17 	ldw	r4,-204(fp)
 4000ae8:	40008100 	call	4000810 <waitForData>
 4000aec:	1007883a 	mov	r3,r2
 4000af0:	e0bfce04 	addi	r2,fp,-200
 4000af4:	180b883a 	mov	r5,r3
 4000af8:	1009883a 	mov	r4,r2
 4000afc:	40024640 	call	4002464 <strcpy>
		fclose(fp);
 4000b00:	e13fcd17 	ldw	r4,-204(fp)
 4000b04:	4000c400 	call	4000c40 <fclose>
	//Wait for round start
	strcpy(dataIn, waitForData(fp, "STARTROUND", "STARTROUND"));
	fclose(fp);

	//MAIN LOOP - Terminate loop when game end
	while (strcmp(dataIn, "ENDGAME") != 0) {
 4000b08:	e0bfce04 	addi	r2,fp,-200
 4000b0c:	01410074 	movhi	r5,1025
 4000b10:	2940a904 	addi	r5,r5,676
 4000b14:	1009883a 	mov	r4,r2
 4000b18:	40023880 	call	4002388 <strcmp>
 4000b1c:	103fe61e 	bne	r2,zero,4000ab8 <__alt_data_end+0xfc000ab8>
		fp = open("/dev/jtag_uart", O_RDWR|O_NONBLOCK|O_NOCTTY|O_SYNC);
		roundLoop(fp);
		strcpy(dataIn, waitForData(fp, "STARTGAME", "ENDGAME"));
		fclose(fp);
	}
	return 0;
 4000b20:	0005883a 	mov	r2,zero
}
 4000b24:	e037883a 	mov	sp,fp
 4000b28:	dfc00117 	ldw	ra,4(sp)
 4000b2c:	df000017 	ldw	fp,0(sp)
 4000b30:	dec00204 	addi	sp,sp,8
 4000b34:	f800283a 	ret

04000b38 <atoi>:
 4000b38:	01800284 	movi	r6,10
 4000b3c:	000b883a 	mov	r5,zero
 4000b40:	40027c41 	jmpi	40027c4 <strtol>

04000b44 <_atoi_r>:
 4000b44:	01c00284 	movi	r7,10
 4000b48:	000d883a 	mov	r6,zero
 4000b4c:	400258c1 	jmpi	400258c <_strtol_r>

04000b50 <_fclose_r>:
 4000b50:	28003926 	beq	r5,zero,4000c38 <_fclose_r+0xe8>
 4000b54:	defffc04 	addi	sp,sp,-16
 4000b58:	dc400115 	stw	r17,4(sp)
 4000b5c:	dc000015 	stw	r16,0(sp)
 4000b60:	dfc00315 	stw	ra,12(sp)
 4000b64:	dc800215 	stw	r18,8(sp)
 4000b68:	2023883a 	mov	r17,r4
 4000b6c:	2821883a 	mov	r16,r5
 4000b70:	20000226 	beq	r4,zero,4000b7c <_fclose_r+0x2c>
 4000b74:	20800e17 	ldw	r2,56(r4)
 4000b78:	10002726 	beq	r2,zero,4000c18 <_fclose_r+0xc8>
 4000b7c:	8080030f 	ldh	r2,12(r16)
 4000b80:	1000071e 	bne	r2,zero,4000ba0 <_fclose_r+0x50>
 4000b84:	0005883a 	mov	r2,zero
 4000b88:	dfc00317 	ldw	ra,12(sp)
 4000b8c:	dc800217 	ldw	r18,8(sp)
 4000b90:	dc400117 	ldw	r17,4(sp)
 4000b94:	dc000017 	ldw	r16,0(sp)
 4000b98:	dec00404 	addi	sp,sp,16
 4000b9c:	f800283a 	ret
 4000ba0:	800b883a 	mov	r5,r16
 4000ba4:	8809883a 	mov	r4,r17
 4000ba8:	4000c540 	call	4000c54 <__sflush_r>
 4000bac:	1025883a 	mov	r18,r2
 4000bb0:	80800b17 	ldw	r2,44(r16)
 4000bb4:	10000426 	beq	r2,zero,4000bc8 <_fclose_r+0x78>
 4000bb8:	81400717 	ldw	r5,28(r16)
 4000bbc:	8809883a 	mov	r4,r17
 4000bc0:	103ee83a 	callr	r2
 4000bc4:	10001616 	blt	r2,zero,4000c20 <_fclose_r+0xd0>
 4000bc8:	8080030b 	ldhu	r2,12(r16)
 4000bcc:	1080200c 	andi	r2,r2,128
 4000bd0:	1000151e 	bne	r2,zero,4000c28 <_fclose_r+0xd8>
 4000bd4:	81400c17 	ldw	r5,48(r16)
 4000bd8:	28000526 	beq	r5,zero,4000bf0 <_fclose_r+0xa0>
 4000bdc:	80801004 	addi	r2,r16,64
 4000be0:	28800226 	beq	r5,r2,4000bec <_fclose_r+0x9c>
 4000be4:	8809883a 	mov	r4,r17
 4000be8:	40013c00 	call	40013c0 <_free_r>
 4000bec:	80000c15 	stw	zero,48(r16)
 4000bf0:	81401117 	ldw	r5,68(r16)
 4000bf4:	28000326 	beq	r5,zero,4000c04 <_fclose_r+0xb4>
 4000bf8:	8809883a 	mov	r4,r17
 4000bfc:	40013c00 	call	40013c0 <_free_r>
 4000c00:	80001115 	stw	zero,68(r16)
 4000c04:	400125c0 	call	400125c <__sfp_lock_acquire>
 4000c08:	8000030d 	sth	zero,12(r16)
 4000c0c:	40012600 	call	4001260 <__sfp_lock_release>
 4000c10:	9005883a 	mov	r2,r18
 4000c14:	003fdc06 	br	4000b88 <__alt_data_end+0xfc000b88>
 4000c18:	400124c0 	call	400124c <__sinit>
 4000c1c:	003fd706 	br	4000b7c <__alt_data_end+0xfc000b7c>
 4000c20:	04bfffc4 	movi	r18,-1
 4000c24:	003fe806 	br	4000bc8 <__alt_data_end+0xfc000bc8>
 4000c28:	81400417 	ldw	r5,16(r16)
 4000c2c:	8809883a 	mov	r4,r17
 4000c30:	40013c00 	call	40013c0 <_free_r>
 4000c34:	003fe706 	br	4000bd4 <__alt_data_end+0xfc000bd4>
 4000c38:	0005883a 	mov	r2,zero
 4000c3c:	f800283a 	ret

04000c40 <fclose>:
 4000c40:	00810074 	movhi	r2,1025
 4000c44:	1088c504 	addi	r2,r2,8980
 4000c48:	200b883a 	mov	r5,r4
 4000c4c:	11000017 	ldw	r4,0(r2)
 4000c50:	4000b501 	jmpi	4000b50 <_fclose_r>

04000c54 <__sflush_r>:
 4000c54:	2880030b 	ldhu	r2,12(r5)
 4000c58:	defffb04 	addi	sp,sp,-20
 4000c5c:	dcc00315 	stw	r19,12(sp)
 4000c60:	dc400115 	stw	r17,4(sp)
 4000c64:	dfc00415 	stw	ra,16(sp)
 4000c68:	dc800215 	stw	r18,8(sp)
 4000c6c:	dc000015 	stw	r16,0(sp)
 4000c70:	10c0020c 	andi	r3,r2,8
 4000c74:	2823883a 	mov	r17,r5
 4000c78:	2027883a 	mov	r19,r4
 4000c7c:	1800311e 	bne	r3,zero,4000d44 <__sflush_r+0xf0>
 4000c80:	28c00117 	ldw	r3,4(r5)
 4000c84:	10820014 	ori	r2,r2,2048
 4000c88:	2880030d 	sth	r2,12(r5)
 4000c8c:	00c04b0e 	bge	zero,r3,4000dbc <__sflush_r+0x168>
 4000c90:	8a000a17 	ldw	r8,40(r17)
 4000c94:	40002326 	beq	r8,zero,4000d24 <__sflush_r+0xd0>
 4000c98:	9c000017 	ldw	r16,0(r19)
 4000c9c:	10c4000c 	andi	r3,r2,4096
 4000ca0:	98000015 	stw	zero,0(r19)
 4000ca4:	18004826 	beq	r3,zero,4000dc8 <__sflush_r+0x174>
 4000ca8:	89801417 	ldw	r6,80(r17)
 4000cac:	10c0010c 	andi	r3,r2,4
 4000cb0:	18000626 	beq	r3,zero,4000ccc <__sflush_r+0x78>
 4000cb4:	88c00117 	ldw	r3,4(r17)
 4000cb8:	88800c17 	ldw	r2,48(r17)
 4000cbc:	30cdc83a 	sub	r6,r6,r3
 4000cc0:	10000226 	beq	r2,zero,4000ccc <__sflush_r+0x78>
 4000cc4:	88800f17 	ldw	r2,60(r17)
 4000cc8:	308dc83a 	sub	r6,r6,r2
 4000ccc:	89400717 	ldw	r5,28(r17)
 4000cd0:	000f883a 	mov	r7,zero
 4000cd4:	9809883a 	mov	r4,r19
 4000cd8:	403ee83a 	callr	r8
 4000cdc:	00ffffc4 	movi	r3,-1
 4000ce0:	10c04426 	beq	r2,r3,4000df4 <__sflush_r+0x1a0>
 4000ce4:	88c0030b 	ldhu	r3,12(r17)
 4000ce8:	89000417 	ldw	r4,16(r17)
 4000cec:	88000115 	stw	zero,4(r17)
 4000cf0:	197dffcc 	andi	r5,r3,63487
 4000cf4:	8940030d 	sth	r5,12(r17)
 4000cf8:	89000015 	stw	r4,0(r17)
 4000cfc:	18c4000c 	andi	r3,r3,4096
 4000d00:	18002c1e 	bne	r3,zero,4000db4 <__sflush_r+0x160>
 4000d04:	89400c17 	ldw	r5,48(r17)
 4000d08:	9c000015 	stw	r16,0(r19)
 4000d0c:	28000526 	beq	r5,zero,4000d24 <__sflush_r+0xd0>
 4000d10:	88801004 	addi	r2,r17,64
 4000d14:	28800226 	beq	r5,r2,4000d20 <__sflush_r+0xcc>
 4000d18:	9809883a 	mov	r4,r19
 4000d1c:	40013c00 	call	40013c0 <_free_r>
 4000d20:	88000c15 	stw	zero,48(r17)
 4000d24:	0005883a 	mov	r2,zero
 4000d28:	dfc00417 	ldw	ra,16(sp)
 4000d2c:	dcc00317 	ldw	r19,12(sp)
 4000d30:	dc800217 	ldw	r18,8(sp)
 4000d34:	dc400117 	ldw	r17,4(sp)
 4000d38:	dc000017 	ldw	r16,0(sp)
 4000d3c:	dec00504 	addi	sp,sp,20
 4000d40:	f800283a 	ret
 4000d44:	2c800417 	ldw	r18,16(r5)
 4000d48:	903ff626 	beq	r18,zero,4000d24 <__alt_data_end+0xfc000d24>
 4000d4c:	2c000017 	ldw	r16,0(r5)
 4000d50:	108000cc 	andi	r2,r2,3
 4000d54:	2c800015 	stw	r18,0(r5)
 4000d58:	84a1c83a 	sub	r16,r16,r18
 4000d5c:	1000131e 	bne	r2,zero,4000dac <__sflush_r+0x158>
 4000d60:	28800517 	ldw	r2,20(r5)
 4000d64:	88800215 	stw	r2,8(r17)
 4000d68:	04000316 	blt	zero,r16,4000d78 <__sflush_r+0x124>
 4000d6c:	003fed06 	br	4000d24 <__alt_data_end+0xfc000d24>
 4000d70:	90a5883a 	add	r18,r18,r2
 4000d74:	043feb0e 	bge	zero,r16,4000d24 <__alt_data_end+0xfc000d24>
 4000d78:	88800917 	ldw	r2,36(r17)
 4000d7c:	89400717 	ldw	r5,28(r17)
 4000d80:	800f883a 	mov	r7,r16
 4000d84:	900d883a 	mov	r6,r18
 4000d88:	9809883a 	mov	r4,r19
 4000d8c:	103ee83a 	callr	r2
 4000d90:	80a1c83a 	sub	r16,r16,r2
 4000d94:	00bff616 	blt	zero,r2,4000d70 <__alt_data_end+0xfc000d70>
 4000d98:	88c0030b 	ldhu	r3,12(r17)
 4000d9c:	00bfffc4 	movi	r2,-1
 4000da0:	18c01014 	ori	r3,r3,64
 4000da4:	88c0030d 	sth	r3,12(r17)
 4000da8:	003fdf06 	br	4000d28 <__alt_data_end+0xfc000d28>
 4000dac:	0005883a 	mov	r2,zero
 4000db0:	003fec06 	br	4000d64 <__alt_data_end+0xfc000d64>
 4000db4:	88801415 	stw	r2,80(r17)
 4000db8:	003fd206 	br	4000d04 <__alt_data_end+0xfc000d04>
 4000dbc:	28c00f17 	ldw	r3,60(r5)
 4000dc0:	00ffb316 	blt	zero,r3,4000c90 <__alt_data_end+0xfc000c90>
 4000dc4:	003fd706 	br	4000d24 <__alt_data_end+0xfc000d24>
 4000dc8:	89400717 	ldw	r5,28(r17)
 4000dcc:	000d883a 	mov	r6,zero
 4000dd0:	01c00044 	movi	r7,1
 4000dd4:	9809883a 	mov	r4,r19
 4000dd8:	403ee83a 	callr	r8
 4000ddc:	100d883a 	mov	r6,r2
 4000de0:	00bfffc4 	movi	r2,-1
 4000de4:	30801426 	beq	r6,r2,4000e38 <__sflush_r+0x1e4>
 4000de8:	8880030b 	ldhu	r2,12(r17)
 4000dec:	8a000a17 	ldw	r8,40(r17)
 4000df0:	003fae06 	br	4000cac <__alt_data_end+0xfc000cac>
 4000df4:	98c00017 	ldw	r3,0(r19)
 4000df8:	183fba26 	beq	r3,zero,4000ce4 <__alt_data_end+0xfc000ce4>
 4000dfc:	01000744 	movi	r4,29
 4000e00:	19000626 	beq	r3,r4,4000e1c <__sflush_r+0x1c8>
 4000e04:	01000584 	movi	r4,22
 4000e08:	19000426 	beq	r3,r4,4000e1c <__sflush_r+0x1c8>
 4000e0c:	88c0030b 	ldhu	r3,12(r17)
 4000e10:	18c01014 	ori	r3,r3,64
 4000e14:	88c0030d 	sth	r3,12(r17)
 4000e18:	003fc306 	br	4000d28 <__alt_data_end+0xfc000d28>
 4000e1c:	8880030b 	ldhu	r2,12(r17)
 4000e20:	88c00417 	ldw	r3,16(r17)
 4000e24:	88000115 	stw	zero,4(r17)
 4000e28:	10bdffcc 	andi	r2,r2,63487
 4000e2c:	8880030d 	sth	r2,12(r17)
 4000e30:	88c00015 	stw	r3,0(r17)
 4000e34:	003fb306 	br	4000d04 <__alt_data_end+0xfc000d04>
 4000e38:	98800017 	ldw	r2,0(r19)
 4000e3c:	103fea26 	beq	r2,zero,4000de8 <__alt_data_end+0xfc000de8>
 4000e40:	00c00744 	movi	r3,29
 4000e44:	10c00226 	beq	r2,r3,4000e50 <__sflush_r+0x1fc>
 4000e48:	00c00584 	movi	r3,22
 4000e4c:	10c0031e 	bne	r2,r3,4000e5c <__sflush_r+0x208>
 4000e50:	9c000015 	stw	r16,0(r19)
 4000e54:	0005883a 	mov	r2,zero
 4000e58:	003fb306 	br	4000d28 <__alt_data_end+0xfc000d28>
 4000e5c:	88c0030b 	ldhu	r3,12(r17)
 4000e60:	3005883a 	mov	r2,r6
 4000e64:	18c01014 	ori	r3,r3,64
 4000e68:	88c0030d 	sth	r3,12(r17)
 4000e6c:	003fae06 	br	4000d28 <__alt_data_end+0xfc000d28>

04000e70 <_fflush_r>:
 4000e70:	defffd04 	addi	sp,sp,-12
 4000e74:	dc000115 	stw	r16,4(sp)
 4000e78:	dfc00215 	stw	ra,8(sp)
 4000e7c:	2021883a 	mov	r16,r4
 4000e80:	20000226 	beq	r4,zero,4000e8c <_fflush_r+0x1c>
 4000e84:	20800e17 	ldw	r2,56(r4)
 4000e88:	10000c26 	beq	r2,zero,4000ebc <_fflush_r+0x4c>
 4000e8c:	2880030f 	ldh	r2,12(r5)
 4000e90:	1000051e 	bne	r2,zero,4000ea8 <_fflush_r+0x38>
 4000e94:	0005883a 	mov	r2,zero
 4000e98:	dfc00217 	ldw	ra,8(sp)
 4000e9c:	dc000117 	ldw	r16,4(sp)
 4000ea0:	dec00304 	addi	sp,sp,12
 4000ea4:	f800283a 	ret
 4000ea8:	8009883a 	mov	r4,r16
 4000eac:	dfc00217 	ldw	ra,8(sp)
 4000eb0:	dc000117 	ldw	r16,4(sp)
 4000eb4:	dec00304 	addi	sp,sp,12
 4000eb8:	4000c541 	jmpi	4000c54 <__sflush_r>
 4000ebc:	d9400015 	stw	r5,0(sp)
 4000ec0:	400124c0 	call	400124c <__sinit>
 4000ec4:	d9400017 	ldw	r5,0(sp)
 4000ec8:	003ff006 	br	4000e8c <__alt_data_end+0xfc000e8c>

04000ecc <fflush>:
 4000ecc:	20000526 	beq	r4,zero,4000ee4 <fflush+0x18>
 4000ed0:	00810074 	movhi	r2,1025
 4000ed4:	1088c504 	addi	r2,r2,8980
 4000ed8:	200b883a 	mov	r5,r4
 4000edc:	11000017 	ldw	r4,0(r2)
 4000ee0:	4000e701 	jmpi	4000e70 <_fflush_r>
 4000ee4:	00810074 	movhi	r2,1025
 4000ee8:	1088c404 	addi	r2,r2,8976
 4000eec:	11000017 	ldw	r4,0(r2)
 4000ef0:	01410034 	movhi	r5,1024
 4000ef4:	29439c04 	addi	r5,r5,3696
 4000ef8:	40017941 	jmpi	4001794 <_fwalk_reent>

04000efc <__fp_unlock>:
 4000efc:	0005883a 	mov	r2,zero
 4000f00:	f800283a 	ret

04000f04 <_cleanup_r>:
 4000f04:	01410034 	movhi	r5,1024
 4000f08:	2942d404 	addi	r5,r5,2896
 4000f0c:	40017941 	jmpi	4001794 <_fwalk_reent>

04000f10 <__sinit.part.1>:
 4000f10:	defff704 	addi	sp,sp,-36
 4000f14:	00c10034 	movhi	r3,1024
 4000f18:	dfc00815 	stw	ra,32(sp)
 4000f1c:	ddc00715 	stw	r23,28(sp)
 4000f20:	dd800615 	stw	r22,24(sp)
 4000f24:	dd400515 	stw	r21,20(sp)
 4000f28:	dd000415 	stw	r20,16(sp)
 4000f2c:	dcc00315 	stw	r19,12(sp)
 4000f30:	dc800215 	stw	r18,8(sp)
 4000f34:	dc400115 	stw	r17,4(sp)
 4000f38:	dc000015 	stw	r16,0(sp)
 4000f3c:	18c3c104 	addi	r3,r3,3844
 4000f40:	24000117 	ldw	r16,4(r4)
 4000f44:	20c00f15 	stw	r3,60(r4)
 4000f48:	2080bb04 	addi	r2,r4,748
 4000f4c:	00c000c4 	movi	r3,3
 4000f50:	20c0b915 	stw	r3,740(r4)
 4000f54:	2080ba15 	stw	r2,744(r4)
 4000f58:	2000b815 	stw	zero,736(r4)
 4000f5c:	05c00204 	movi	r23,8
 4000f60:	00800104 	movi	r2,4
 4000f64:	2025883a 	mov	r18,r4
 4000f68:	b80d883a 	mov	r6,r23
 4000f6c:	81001704 	addi	r4,r16,92
 4000f70:	000b883a 	mov	r5,zero
 4000f74:	80000015 	stw	zero,0(r16)
 4000f78:	80000115 	stw	zero,4(r16)
 4000f7c:	80000215 	stw	zero,8(r16)
 4000f80:	8080030d 	sth	r2,12(r16)
 4000f84:	80001915 	stw	zero,100(r16)
 4000f88:	8000038d 	sth	zero,14(r16)
 4000f8c:	80000415 	stw	zero,16(r16)
 4000f90:	80000515 	stw	zero,20(r16)
 4000f94:	80000615 	stw	zero,24(r16)
 4000f98:	40020640 	call	4002064 <memset>
 4000f9c:	05810034 	movhi	r22,1024
 4000fa0:	94400217 	ldw	r17,8(r18)
 4000fa4:	05410034 	movhi	r21,1024
 4000fa8:	05010034 	movhi	r20,1024
 4000fac:	04c10034 	movhi	r19,1024
 4000fb0:	b5889304 	addi	r22,r22,8780
 4000fb4:	ad48aa04 	addi	r21,r21,8872
 4000fb8:	a508c904 	addi	r20,r20,8996
 4000fbc:	9cc8e004 	addi	r19,r19,9088
 4000fc0:	85800815 	stw	r22,32(r16)
 4000fc4:	85400915 	stw	r21,36(r16)
 4000fc8:	85000a15 	stw	r20,40(r16)
 4000fcc:	84c00b15 	stw	r19,44(r16)
 4000fd0:	84000715 	stw	r16,28(r16)
 4000fd4:	00800284 	movi	r2,10
 4000fd8:	8880030d 	sth	r2,12(r17)
 4000fdc:	00800044 	movi	r2,1
 4000fe0:	b80d883a 	mov	r6,r23
 4000fe4:	89001704 	addi	r4,r17,92
 4000fe8:	000b883a 	mov	r5,zero
 4000fec:	88000015 	stw	zero,0(r17)
 4000ff0:	88000115 	stw	zero,4(r17)
 4000ff4:	88000215 	stw	zero,8(r17)
 4000ff8:	88001915 	stw	zero,100(r17)
 4000ffc:	8880038d 	sth	r2,14(r17)
 4001000:	88000415 	stw	zero,16(r17)
 4001004:	88000515 	stw	zero,20(r17)
 4001008:	88000615 	stw	zero,24(r17)
 400100c:	40020640 	call	4002064 <memset>
 4001010:	94000317 	ldw	r16,12(r18)
 4001014:	00800484 	movi	r2,18
 4001018:	8c400715 	stw	r17,28(r17)
 400101c:	8d800815 	stw	r22,32(r17)
 4001020:	8d400915 	stw	r21,36(r17)
 4001024:	8d000a15 	stw	r20,40(r17)
 4001028:	8cc00b15 	stw	r19,44(r17)
 400102c:	8080030d 	sth	r2,12(r16)
 4001030:	00800084 	movi	r2,2
 4001034:	80000015 	stw	zero,0(r16)
 4001038:	80000115 	stw	zero,4(r16)
 400103c:	80000215 	stw	zero,8(r16)
 4001040:	80001915 	stw	zero,100(r16)
 4001044:	8080038d 	sth	r2,14(r16)
 4001048:	80000415 	stw	zero,16(r16)
 400104c:	80000515 	stw	zero,20(r16)
 4001050:	80000615 	stw	zero,24(r16)
 4001054:	b80d883a 	mov	r6,r23
 4001058:	000b883a 	mov	r5,zero
 400105c:	81001704 	addi	r4,r16,92
 4001060:	40020640 	call	4002064 <memset>
 4001064:	00800044 	movi	r2,1
 4001068:	84000715 	stw	r16,28(r16)
 400106c:	85800815 	stw	r22,32(r16)
 4001070:	85400915 	stw	r21,36(r16)
 4001074:	85000a15 	stw	r20,40(r16)
 4001078:	84c00b15 	stw	r19,44(r16)
 400107c:	90800e15 	stw	r2,56(r18)
 4001080:	dfc00817 	ldw	ra,32(sp)
 4001084:	ddc00717 	ldw	r23,28(sp)
 4001088:	dd800617 	ldw	r22,24(sp)
 400108c:	dd400517 	ldw	r21,20(sp)
 4001090:	dd000417 	ldw	r20,16(sp)
 4001094:	dcc00317 	ldw	r19,12(sp)
 4001098:	dc800217 	ldw	r18,8(sp)
 400109c:	dc400117 	ldw	r17,4(sp)
 40010a0:	dc000017 	ldw	r16,0(sp)
 40010a4:	dec00904 	addi	sp,sp,36
 40010a8:	f800283a 	ret

040010ac <__fp_lock>:
 40010ac:	0005883a 	mov	r2,zero
 40010b0:	f800283a 	ret

040010b4 <__sfmoreglue>:
 40010b4:	defffc04 	addi	sp,sp,-16
 40010b8:	dc400115 	stw	r17,4(sp)
 40010bc:	2c7fffc4 	addi	r17,r5,-1
 40010c0:	8c401a24 	muli	r17,r17,104
 40010c4:	dc800215 	stw	r18,8(sp)
 40010c8:	2825883a 	mov	r18,r5
 40010cc:	89401d04 	addi	r5,r17,116
 40010d0:	dc000015 	stw	r16,0(sp)
 40010d4:	dfc00315 	stw	ra,12(sp)
 40010d8:	40018580 	call	4001858 <_malloc_r>
 40010dc:	1021883a 	mov	r16,r2
 40010e0:	10000726 	beq	r2,zero,4001100 <__sfmoreglue+0x4c>
 40010e4:	11000304 	addi	r4,r2,12
 40010e8:	10000015 	stw	zero,0(r2)
 40010ec:	14800115 	stw	r18,4(r2)
 40010f0:	11000215 	stw	r4,8(r2)
 40010f4:	89801a04 	addi	r6,r17,104
 40010f8:	000b883a 	mov	r5,zero
 40010fc:	40020640 	call	4002064 <memset>
 4001100:	8005883a 	mov	r2,r16
 4001104:	dfc00317 	ldw	ra,12(sp)
 4001108:	dc800217 	ldw	r18,8(sp)
 400110c:	dc400117 	ldw	r17,4(sp)
 4001110:	dc000017 	ldw	r16,0(sp)
 4001114:	dec00404 	addi	sp,sp,16
 4001118:	f800283a 	ret

0400111c <__sfp>:
 400111c:	defffb04 	addi	sp,sp,-20
 4001120:	dc000015 	stw	r16,0(sp)
 4001124:	04010074 	movhi	r16,1025
 4001128:	8408c404 	addi	r16,r16,8976
 400112c:	dcc00315 	stw	r19,12(sp)
 4001130:	2027883a 	mov	r19,r4
 4001134:	81000017 	ldw	r4,0(r16)
 4001138:	dfc00415 	stw	ra,16(sp)
 400113c:	dc800215 	stw	r18,8(sp)
 4001140:	20800e17 	ldw	r2,56(r4)
 4001144:	dc400115 	stw	r17,4(sp)
 4001148:	1000021e 	bne	r2,zero,4001154 <__sfp+0x38>
 400114c:	4000f100 	call	4000f10 <__sinit.part.1>
 4001150:	81000017 	ldw	r4,0(r16)
 4001154:	2480b804 	addi	r18,r4,736
 4001158:	047fffc4 	movi	r17,-1
 400115c:	91000117 	ldw	r4,4(r18)
 4001160:	94000217 	ldw	r16,8(r18)
 4001164:	213fffc4 	addi	r4,r4,-1
 4001168:	20000a16 	blt	r4,zero,4001194 <__sfp+0x78>
 400116c:	8080030f 	ldh	r2,12(r16)
 4001170:	10000c26 	beq	r2,zero,40011a4 <__sfp+0x88>
 4001174:	80c01d04 	addi	r3,r16,116
 4001178:	00000206 	br	4001184 <__sfp+0x68>
 400117c:	18bfe60f 	ldh	r2,-104(r3)
 4001180:	10000826 	beq	r2,zero,40011a4 <__sfp+0x88>
 4001184:	213fffc4 	addi	r4,r4,-1
 4001188:	1c3ffd04 	addi	r16,r3,-12
 400118c:	18c01a04 	addi	r3,r3,104
 4001190:	247ffa1e 	bne	r4,r17,400117c <__alt_data_end+0xfc00117c>
 4001194:	90800017 	ldw	r2,0(r18)
 4001198:	10001d26 	beq	r2,zero,4001210 <__sfp+0xf4>
 400119c:	1025883a 	mov	r18,r2
 40011a0:	003fee06 	br	400115c <__alt_data_end+0xfc00115c>
 40011a4:	00bfffc4 	movi	r2,-1
 40011a8:	8080038d 	sth	r2,14(r16)
 40011ac:	00800044 	movi	r2,1
 40011b0:	8080030d 	sth	r2,12(r16)
 40011b4:	80001915 	stw	zero,100(r16)
 40011b8:	80000015 	stw	zero,0(r16)
 40011bc:	80000215 	stw	zero,8(r16)
 40011c0:	80000115 	stw	zero,4(r16)
 40011c4:	80000415 	stw	zero,16(r16)
 40011c8:	80000515 	stw	zero,20(r16)
 40011cc:	80000615 	stw	zero,24(r16)
 40011d0:	01800204 	movi	r6,8
 40011d4:	000b883a 	mov	r5,zero
 40011d8:	81001704 	addi	r4,r16,92
 40011dc:	40020640 	call	4002064 <memset>
 40011e0:	8005883a 	mov	r2,r16
 40011e4:	80000c15 	stw	zero,48(r16)
 40011e8:	80000d15 	stw	zero,52(r16)
 40011ec:	80001115 	stw	zero,68(r16)
 40011f0:	80001215 	stw	zero,72(r16)
 40011f4:	dfc00417 	ldw	ra,16(sp)
 40011f8:	dcc00317 	ldw	r19,12(sp)
 40011fc:	dc800217 	ldw	r18,8(sp)
 4001200:	dc400117 	ldw	r17,4(sp)
 4001204:	dc000017 	ldw	r16,0(sp)
 4001208:	dec00504 	addi	sp,sp,20
 400120c:	f800283a 	ret
 4001210:	01400104 	movi	r5,4
 4001214:	9809883a 	mov	r4,r19
 4001218:	40010b40 	call	40010b4 <__sfmoreglue>
 400121c:	90800015 	stw	r2,0(r18)
 4001220:	103fde1e 	bne	r2,zero,400119c <__alt_data_end+0xfc00119c>
 4001224:	00800304 	movi	r2,12
 4001228:	98800015 	stw	r2,0(r19)
 400122c:	0005883a 	mov	r2,zero
 4001230:	003ff006 	br	40011f4 <__alt_data_end+0xfc0011f4>

04001234 <_cleanup>:
 4001234:	00810074 	movhi	r2,1025
 4001238:	1088c404 	addi	r2,r2,8976
 400123c:	11000017 	ldw	r4,0(r2)
 4001240:	01410034 	movhi	r5,1024
 4001244:	2942d404 	addi	r5,r5,2896
 4001248:	40017941 	jmpi	4001794 <_fwalk_reent>

0400124c <__sinit>:
 400124c:	20800e17 	ldw	r2,56(r4)
 4001250:	10000126 	beq	r2,zero,4001258 <__sinit+0xc>
 4001254:	f800283a 	ret
 4001258:	4000f101 	jmpi	4000f10 <__sinit.part.1>

0400125c <__sfp_lock_acquire>:
 400125c:	f800283a 	ret

04001260 <__sfp_lock_release>:
 4001260:	f800283a 	ret

04001264 <__sinit_lock_acquire>:
 4001264:	f800283a 	ret

04001268 <__sinit_lock_release>:
 4001268:	f800283a 	ret

0400126c <__fp_lock_all>:
 400126c:	00810074 	movhi	r2,1025
 4001270:	1088c504 	addi	r2,r2,8980
 4001274:	11000017 	ldw	r4,0(r2)
 4001278:	01410034 	movhi	r5,1024
 400127c:	29442b04 	addi	r5,r5,4268
 4001280:	40016d01 	jmpi	40016d0 <_fwalk>

04001284 <__fp_unlock_all>:
 4001284:	00810074 	movhi	r2,1025
 4001288:	1088c504 	addi	r2,r2,8980
 400128c:	11000017 	ldw	r4,0(r2)
 4001290:	01410034 	movhi	r5,1024
 4001294:	2943bf04 	addi	r5,r5,3836
 4001298:	40016d01 	jmpi	40016d0 <_fwalk>

0400129c <_malloc_trim_r>:
 400129c:	defffb04 	addi	sp,sp,-20
 40012a0:	dcc00315 	stw	r19,12(sp)
 40012a4:	04c10074 	movhi	r19,1025
 40012a8:	dc800215 	stw	r18,8(sp)
 40012ac:	dc400115 	stw	r17,4(sp)
 40012b0:	dc000015 	stw	r16,0(sp)
 40012b4:	dfc00415 	stw	ra,16(sp)
 40012b8:	2821883a 	mov	r16,r5
 40012bc:	9cc31704 	addi	r19,r19,3164
 40012c0:	2025883a 	mov	r18,r4
 40012c4:	400dbfc0 	call	400dbfc <__malloc_lock>
 40012c8:	98800217 	ldw	r2,8(r19)
 40012cc:	14400117 	ldw	r17,4(r2)
 40012d0:	00bfff04 	movi	r2,-4
 40012d4:	88a2703a 	and	r17,r17,r2
 40012d8:	8c21c83a 	sub	r16,r17,r16
 40012dc:	8403fbc4 	addi	r16,r16,4079
 40012e0:	8020d33a 	srli	r16,r16,12
 40012e4:	0083ffc4 	movi	r2,4095
 40012e8:	843fffc4 	addi	r16,r16,-1
 40012ec:	8020933a 	slli	r16,r16,12
 40012f0:	1400060e 	bge	r2,r16,400130c <_malloc_trim_r+0x70>
 40012f4:	000b883a 	mov	r5,zero
 40012f8:	9009883a 	mov	r4,r18
 40012fc:	40021f80 	call	40021f8 <_sbrk_r>
 4001300:	98c00217 	ldw	r3,8(r19)
 4001304:	1c47883a 	add	r3,r3,r17
 4001308:	10c00a26 	beq	r2,r3,4001334 <_malloc_trim_r+0x98>
 400130c:	9009883a 	mov	r4,r18
 4001310:	400dc200 	call	400dc20 <__malloc_unlock>
 4001314:	0005883a 	mov	r2,zero
 4001318:	dfc00417 	ldw	ra,16(sp)
 400131c:	dcc00317 	ldw	r19,12(sp)
 4001320:	dc800217 	ldw	r18,8(sp)
 4001324:	dc400117 	ldw	r17,4(sp)
 4001328:	dc000017 	ldw	r16,0(sp)
 400132c:	dec00504 	addi	sp,sp,20
 4001330:	f800283a 	ret
 4001334:	040bc83a 	sub	r5,zero,r16
 4001338:	9009883a 	mov	r4,r18
 400133c:	40021f80 	call	40021f8 <_sbrk_r>
 4001340:	00ffffc4 	movi	r3,-1
 4001344:	10c00d26 	beq	r2,r3,400137c <_malloc_trim_r+0xe0>
 4001348:	00c10074 	movhi	r3,1025
 400134c:	18cfb004 	addi	r3,r3,16064
 4001350:	18800017 	ldw	r2,0(r3)
 4001354:	99000217 	ldw	r4,8(r19)
 4001358:	8c23c83a 	sub	r17,r17,r16
 400135c:	8c400054 	ori	r17,r17,1
 4001360:	1421c83a 	sub	r16,r2,r16
 4001364:	24400115 	stw	r17,4(r4)
 4001368:	9009883a 	mov	r4,r18
 400136c:	1c000015 	stw	r16,0(r3)
 4001370:	400dc200 	call	400dc20 <__malloc_unlock>
 4001374:	00800044 	movi	r2,1
 4001378:	003fe706 	br	4001318 <__alt_data_end+0xfc001318>
 400137c:	000b883a 	mov	r5,zero
 4001380:	9009883a 	mov	r4,r18
 4001384:	40021f80 	call	40021f8 <_sbrk_r>
 4001388:	99000217 	ldw	r4,8(r19)
 400138c:	014003c4 	movi	r5,15
 4001390:	1107c83a 	sub	r3,r2,r4
 4001394:	28ffdd0e 	bge	r5,r3,400130c <__alt_data_end+0xfc00130c>
 4001398:	01410074 	movhi	r5,1025
 400139c:	2948c604 	addi	r5,r5,8984
 40013a0:	29400017 	ldw	r5,0(r5)
 40013a4:	18c00054 	ori	r3,r3,1
 40013a8:	20c00115 	stw	r3,4(r4)
 40013ac:	00c10074 	movhi	r3,1025
 40013b0:	1145c83a 	sub	r2,r2,r5
 40013b4:	18cfb004 	addi	r3,r3,16064
 40013b8:	18800015 	stw	r2,0(r3)
 40013bc:	003fd306 	br	400130c <__alt_data_end+0xfc00130c>

040013c0 <_free_r>:
 40013c0:	28004126 	beq	r5,zero,40014c8 <_free_r+0x108>
 40013c4:	defffd04 	addi	sp,sp,-12
 40013c8:	dc400115 	stw	r17,4(sp)
 40013cc:	dc000015 	stw	r16,0(sp)
 40013d0:	2023883a 	mov	r17,r4
 40013d4:	2821883a 	mov	r16,r5
 40013d8:	dfc00215 	stw	ra,8(sp)
 40013dc:	400dbfc0 	call	400dbfc <__malloc_lock>
 40013e0:	81ffff17 	ldw	r7,-4(r16)
 40013e4:	00bfff84 	movi	r2,-2
 40013e8:	01010074 	movhi	r4,1025
 40013ec:	81bffe04 	addi	r6,r16,-8
 40013f0:	3884703a 	and	r2,r7,r2
 40013f4:	21031704 	addi	r4,r4,3164
 40013f8:	308b883a 	add	r5,r6,r2
 40013fc:	2a400117 	ldw	r9,4(r5)
 4001400:	22000217 	ldw	r8,8(r4)
 4001404:	00ffff04 	movi	r3,-4
 4001408:	48c6703a 	and	r3,r9,r3
 400140c:	2a005726 	beq	r5,r8,400156c <_free_r+0x1ac>
 4001410:	28c00115 	stw	r3,4(r5)
 4001414:	39c0004c 	andi	r7,r7,1
 4001418:	3800091e 	bne	r7,zero,4001440 <_free_r+0x80>
 400141c:	823ffe17 	ldw	r8,-8(r16)
 4001420:	22400204 	addi	r9,r4,8
 4001424:	320dc83a 	sub	r6,r6,r8
 4001428:	31c00217 	ldw	r7,8(r6)
 400142c:	1205883a 	add	r2,r2,r8
 4001430:	3a406526 	beq	r7,r9,40015c8 <_free_r+0x208>
 4001434:	32000317 	ldw	r8,12(r6)
 4001438:	3a000315 	stw	r8,12(r7)
 400143c:	41c00215 	stw	r7,8(r8)
 4001440:	28cf883a 	add	r7,r5,r3
 4001444:	39c00117 	ldw	r7,4(r7)
 4001448:	39c0004c 	andi	r7,r7,1
 400144c:	38003a26 	beq	r7,zero,4001538 <_free_r+0x178>
 4001450:	10c00054 	ori	r3,r2,1
 4001454:	30c00115 	stw	r3,4(r6)
 4001458:	3087883a 	add	r3,r6,r2
 400145c:	18800015 	stw	r2,0(r3)
 4001460:	00c07fc4 	movi	r3,511
 4001464:	18801936 	bltu	r3,r2,40014cc <_free_r+0x10c>
 4001468:	1004d0fa 	srli	r2,r2,3
 400146c:	01c00044 	movi	r7,1
 4001470:	21400117 	ldw	r5,4(r4)
 4001474:	10c00044 	addi	r3,r2,1
 4001478:	18c7883a 	add	r3,r3,r3
 400147c:	1005d0ba 	srai	r2,r2,2
 4001480:	18c7883a 	add	r3,r3,r3
 4001484:	18c7883a 	add	r3,r3,r3
 4001488:	1907883a 	add	r3,r3,r4
 400148c:	3884983a 	sll	r2,r7,r2
 4001490:	19c00017 	ldw	r7,0(r3)
 4001494:	1a3ffe04 	addi	r8,r3,-8
 4001498:	1144b03a 	or	r2,r2,r5
 400149c:	32000315 	stw	r8,12(r6)
 40014a0:	31c00215 	stw	r7,8(r6)
 40014a4:	20800115 	stw	r2,4(r4)
 40014a8:	19800015 	stw	r6,0(r3)
 40014ac:	39800315 	stw	r6,12(r7)
 40014b0:	8809883a 	mov	r4,r17
 40014b4:	dfc00217 	ldw	ra,8(sp)
 40014b8:	dc400117 	ldw	r17,4(sp)
 40014bc:	dc000017 	ldw	r16,0(sp)
 40014c0:	dec00304 	addi	sp,sp,12
 40014c4:	400dc201 	jmpi	400dc20 <__malloc_unlock>
 40014c8:	f800283a 	ret
 40014cc:	100ad27a 	srli	r5,r2,9
 40014d0:	00c00104 	movi	r3,4
 40014d4:	19404a36 	bltu	r3,r5,4001600 <_free_r+0x240>
 40014d8:	100ad1ba 	srli	r5,r2,6
 40014dc:	28c00e44 	addi	r3,r5,57
 40014e0:	18c7883a 	add	r3,r3,r3
 40014e4:	29400e04 	addi	r5,r5,56
 40014e8:	18c7883a 	add	r3,r3,r3
 40014ec:	18c7883a 	add	r3,r3,r3
 40014f0:	1909883a 	add	r4,r3,r4
 40014f4:	20c00017 	ldw	r3,0(r4)
 40014f8:	01c10074 	movhi	r7,1025
 40014fc:	213ffe04 	addi	r4,r4,-8
 4001500:	39c31704 	addi	r7,r7,3164
 4001504:	20c04426 	beq	r4,r3,4001618 <_free_r+0x258>
 4001508:	01ffff04 	movi	r7,-4
 400150c:	19400117 	ldw	r5,4(r3)
 4001510:	29ca703a 	and	r5,r5,r7
 4001514:	1140022e 	bgeu	r2,r5,4001520 <_free_r+0x160>
 4001518:	18c00217 	ldw	r3,8(r3)
 400151c:	20fffb1e 	bne	r4,r3,400150c <__alt_data_end+0xfc00150c>
 4001520:	19000317 	ldw	r4,12(r3)
 4001524:	31000315 	stw	r4,12(r6)
 4001528:	30c00215 	stw	r3,8(r6)
 400152c:	21800215 	stw	r6,8(r4)
 4001530:	19800315 	stw	r6,12(r3)
 4001534:	003fde06 	br	40014b0 <__alt_data_end+0xfc0014b0>
 4001538:	29c00217 	ldw	r7,8(r5)
 400153c:	10c5883a 	add	r2,r2,r3
 4001540:	00c10074 	movhi	r3,1025
 4001544:	18c31904 	addi	r3,r3,3172
 4001548:	38c03b26 	beq	r7,r3,4001638 <_free_r+0x278>
 400154c:	2a000317 	ldw	r8,12(r5)
 4001550:	11400054 	ori	r5,r2,1
 4001554:	3087883a 	add	r3,r6,r2
 4001558:	3a000315 	stw	r8,12(r7)
 400155c:	41c00215 	stw	r7,8(r8)
 4001560:	31400115 	stw	r5,4(r6)
 4001564:	18800015 	stw	r2,0(r3)
 4001568:	003fbd06 	br	4001460 <__alt_data_end+0xfc001460>
 400156c:	39c0004c 	andi	r7,r7,1
 4001570:	10c5883a 	add	r2,r2,r3
 4001574:	3800071e 	bne	r7,zero,4001594 <_free_r+0x1d4>
 4001578:	81fffe17 	ldw	r7,-8(r16)
 400157c:	31cdc83a 	sub	r6,r6,r7
 4001580:	30c00317 	ldw	r3,12(r6)
 4001584:	31400217 	ldw	r5,8(r6)
 4001588:	11c5883a 	add	r2,r2,r7
 400158c:	28c00315 	stw	r3,12(r5)
 4001590:	19400215 	stw	r5,8(r3)
 4001594:	10c00054 	ori	r3,r2,1
 4001598:	30c00115 	stw	r3,4(r6)
 400159c:	00c10074 	movhi	r3,1025
 40015a0:	18c8c704 	addi	r3,r3,8988
 40015a4:	18c00017 	ldw	r3,0(r3)
 40015a8:	21800215 	stw	r6,8(r4)
 40015ac:	10ffc036 	bltu	r2,r3,40014b0 <__alt_data_end+0xfc0014b0>
 40015b0:	00810074 	movhi	r2,1025
 40015b4:	108fa204 	addi	r2,r2,16008
 40015b8:	11400017 	ldw	r5,0(r2)
 40015bc:	8809883a 	mov	r4,r17
 40015c0:	400129c0 	call	400129c <_malloc_trim_r>
 40015c4:	003fba06 	br	40014b0 <__alt_data_end+0xfc0014b0>
 40015c8:	28c9883a 	add	r4,r5,r3
 40015cc:	21000117 	ldw	r4,4(r4)
 40015d0:	2100004c 	andi	r4,r4,1
 40015d4:	2000391e 	bne	r4,zero,40016bc <_free_r+0x2fc>
 40015d8:	29c00217 	ldw	r7,8(r5)
 40015dc:	29000317 	ldw	r4,12(r5)
 40015e0:	1885883a 	add	r2,r3,r2
 40015e4:	10c00054 	ori	r3,r2,1
 40015e8:	39000315 	stw	r4,12(r7)
 40015ec:	21c00215 	stw	r7,8(r4)
 40015f0:	30c00115 	stw	r3,4(r6)
 40015f4:	308d883a 	add	r6,r6,r2
 40015f8:	30800015 	stw	r2,0(r6)
 40015fc:	003fac06 	br	40014b0 <__alt_data_end+0xfc0014b0>
 4001600:	00c00504 	movi	r3,20
 4001604:	19401536 	bltu	r3,r5,400165c <_free_r+0x29c>
 4001608:	28c01704 	addi	r3,r5,92
 400160c:	18c7883a 	add	r3,r3,r3
 4001610:	294016c4 	addi	r5,r5,91
 4001614:	003fb406 	br	40014e8 <__alt_data_end+0xfc0014e8>
 4001618:	280bd0ba 	srai	r5,r5,2
 400161c:	00c00044 	movi	r3,1
 4001620:	38800117 	ldw	r2,4(r7)
 4001624:	194a983a 	sll	r5,r3,r5
 4001628:	2007883a 	mov	r3,r4
 400162c:	2884b03a 	or	r2,r5,r2
 4001630:	38800115 	stw	r2,4(r7)
 4001634:	003fbb06 	br	4001524 <__alt_data_end+0xfc001524>
 4001638:	21800515 	stw	r6,20(r4)
 400163c:	21800415 	stw	r6,16(r4)
 4001640:	10c00054 	ori	r3,r2,1
 4001644:	31c00315 	stw	r7,12(r6)
 4001648:	31c00215 	stw	r7,8(r6)
 400164c:	30c00115 	stw	r3,4(r6)
 4001650:	308d883a 	add	r6,r6,r2
 4001654:	30800015 	stw	r2,0(r6)
 4001658:	003f9506 	br	40014b0 <__alt_data_end+0xfc0014b0>
 400165c:	00c01504 	movi	r3,84
 4001660:	19400536 	bltu	r3,r5,4001678 <_free_r+0x2b8>
 4001664:	100ad33a 	srli	r5,r2,12
 4001668:	28c01bc4 	addi	r3,r5,111
 400166c:	18c7883a 	add	r3,r3,r3
 4001670:	29401b84 	addi	r5,r5,110
 4001674:	003f9c06 	br	40014e8 <__alt_data_end+0xfc0014e8>
 4001678:	00c05504 	movi	r3,340
 400167c:	19400536 	bltu	r3,r5,4001694 <_free_r+0x2d4>
 4001680:	100ad3fa 	srli	r5,r2,15
 4001684:	28c01e04 	addi	r3,r5,120
 4001688:	18c7883a 	add	r3,r3,r3
 400168c:	29401dc4 	addi	r5,r5,119
 4001690:	003f9506 	br	40014e8 <__alt_data_end+0xfc0014e8>
 4001694:	00c15504 	movi	r3,1364
 4001698:	19400536 	bltu	r3,r5,40016b0 <_free_r+0x2f0>
 400169c:	100ad4ba 	srli	r5,r2,18
 40016a0:	28c01f44 	addi	r3,r5,125
 40016a4:	18c7883a 	add	r3,r3,r3
 40016a8:	29401f04 	addi	r5,r5,124
 40016ac:	003f8e06 	br	40014e8 <__alt_data_end+0xfc0014e8>
 40016b0:	00c03f84 	movi	r3,254
 40016b4:	01401f84 	movi	r5,126
 40016b8:	003f8b06 	br	40014e8 <__alt_data_end+0xfc0014e8>
 40016bc:	10c00054 	ori	r3,r2,1
 40016c0:	30c00115 	stw	r3,4(r6)
 40016c4:	308d883a 	add	r6,r6,r2
 40016c8:	30800015 	stw	r2,0(r6)
 40016cc:	003f7806 	br	40014b0 <__alt_data_end+0xfc0014b0>

040016d0 <_fwalk>:
 40016d0:	defff704 	addi	sp,sp,-36
 40016d4:	dd000415 	stw	r20,16(sp)
 40016d8:	dfc00815 	stw	ra,32(sp)
 40016dc:	ddc00715 	stw	r23,28(sp)
 40016e0:	dd800615 	stw	r22,24(sp)
 40016e4:	dd400515 	stw	r21,20(sp)
 40016e8:	dcc00315 	stw	r19,12(sp)
 40016ec:	dc800215 	stw	r18,8(sp)
 40016f0:	dc400115 	stw	r17,4(sp)
 40016f4:	dc000015 	stw	r16,0(sp)
 40016f8:	2500b804 	addi	r20,r4,736
 40016fc:	a0002326 	beq	r20,zero,400178c <_fwalk+0xbc>
 4001700:	282b883a 	mov	r21,r5
 4001704:	002f883a 	mov	r23,zero
 4001708:	05800044 	movi	r22,1
 400170c:	04ffffc4 	movi	r19,-1
 4001710:	a4400117 	ldw	r17,4(r20)
 4001714:	a4800217 	ldw	r18,8(r20)
 4001718:	8c7fffc4 	addi	r17,r17,-1
 400171c:	88000d16 	blt	r17,zero,4001754 <_fwalk+0x84>
 4001720:	94000304 	addi	r16,r18,12
 4001724:	94800384 	addi	r18,r18,14
 4001728:	8080000b 	ldhu	r2,0(r16)
 400172c:	8c7fffc4 	addi	r17,r17,-1
 4001730:	813ffd04 	addi	r4,r16,-12
 4001734:	b080042e 	bgeu	r22,r2,4001748 <_fwalk+0x78>
 4001738:	9080000f 	ldh	r2,0(r18)
 400173c:	14c00226 	beq	r2,r19,4001748 <_fwalk+0x78>
 4001740:	a83ee83a 	callr	r21
 4001744:	b8aeb03a 	or	r23,r23,r2
 4001748:	84001a04 	addi	r16,r16,104
 400174c:	94801a04 	addi	r18,r18,104
 4001750:	8cfff51e 	bne	r17,r19,4001728 <__alt_data_end+0xfc001728>
 4001754:	a5000017 	ldw	r20,0(r20)
 4001758:	a03fed1e 	bne	r20,zero,4001710 <__alt_data_end+0xfc001710>
 400175c:	b805883a 	mov	r2,r23
 4001760:	dfc00817 	ldw	ra,32(sp)
 4001764:	ddc00717 	ldw	r23,28(sp)
 4001768:	dd800617 	ldw	r22,24(sp)
 400176c:	dd400517 	ldw	r21,20(sp)
 4001770:	dd000417 	ldw	r20,16(sp)
 4001774:	dcc00317 	ldw	r19,12(sp)
 4001778:	dc800217 	ldw	r18,8(sp)
 400177c:	dc400117 	ldw	r17,4(sp)
 4001780:	dc000017 	ldw	r16,0(sp)
 4001784:	dec00904 	addi	sp,sp,36
 4001788:	f800283a 	ret
 400178c:	002f883a 	mov	r23,zero
 4001790:	003ff206 	br	400175c <__alt_data_end+0xfc00175c>

04001794 <_fwalk_reent>:
 4001794:	defff704 	addi	sp,sp,-36
 4001798:	dd000415 	stw	r20,16(sp)
 400179c:	dfc00815 	stw	ra,32(sp)
 40017a0:	ddc00715 	stw	r23,28(sp)
 40017a4:	dd800615 	stw	r22,24(sp)
 40017a8:	dd400515 	stw	r21,20(sp)
 40017ac:	dcc00315 	stw	r19,12(sp)
 40017b0:	dc800215 	stw	r18,8(sp)
 40017b4:	dc400115 	stw	r17,4(sp)
 40017b8:	dc000015 	stw	r16,0(sp)
 40017bc:	2500b804 	addi	r20,r4,736
 40017c0:	a0002326 	beq	r20,zero,4001850 <_fwalk_reent+0xbc>
 40017c4:	282b883a 	mov	r21,r5
 40017c8:	2027883a 	mov	r19,r4
 40017cc:	002f883a 	mov	r23,zero
 40017d0:	05800044 	movi	r22,1
 40017d4:	04bfffc4 	movi	r18,-1
 40017d8:	a4400117 	ldw	r17,4(r20)
 40017dc:	a4000217 	ldw	r16,8(r20)
 40017e0:	8c7fffc4 	addi	r17,r17,-1
 40017e4:	88000c16 	blt	r17,zero,4001818 <_fwalk_reent+0x84>
 40017e8:	84000304 	addi	r16,r16,12
 40017ec:	8080000b 	ldhu	r2,0(r16)
 40017f0:	8c7fffc4 	addi	r17,r17,-1
 40017f4:	817ffd04 	addi	r5,r16,-12
 40017f8:	b080052e 	bgeu	r22,r2,4001810 <_fwalk_reent+0x7c>
 40017fc:	8080008f 	ldh	r2,2(r16)
 4001800:	9809883a 	mov	r4,r19
 4001804:	14800226 	beq	r2,r18,4001810 <_fwalk_reent+0x7c>
 4001808:	a83ee83a 	callr	r21
 400180c:	b8aeb03a 	or	r23,r23,r2
 4001810:	84001a04 	addi	r16,r16,104
 4001814:	8cbff51e 	bne	r17,r18,40017ec <__alt_data_end+0xfc0017ec>
 4001818:	a5000017 	ldw	r20,0(r20)
 400181c:	a03fee1e 	bne	r20,zero,40017d8 <__alt_data_end+0xfc0017d8>
 4001820:	b805883a 	mov	r2,r23
 4001824:	dfc00817 	ldw	ra,32(sp)
 4001828:	ddc00717 	ldw	r23,28(sp)
 400182c:	dd800617 	ldw	r22,24(sp)
 4001830:	dd400517 	ldw	r21,20(sp)
 4001834:	dd000417 	ldw	r20,16(sp)
 4001838:	dcc00317 	ldw	r19,12(sp)
 400183c:	dc800217 	ldw	r18,8(sp)
 4001840:	dc400117 	ldw	r17,4(sp)
 4001844:	dc000017 	ldw	r16,0(sp)
 4001848:	dec00904 	addi	sp,sp,36
 400184c:	f800283a 	ret
 4001850:	002f883a 	mov	r23,zero
 4001854:	003ff206 	br	4001820 <__alt_data_end+0xfc001820>

04001858 <_malloc_r>:
 4001858:	defff504 	addi	sp,sp,-44
 400185c:	dc800315 	stw	r18,12(sp)
 4001860:	dfc00a15 	stw	ra,40(sp)
 4001864:	df000915 	stw	fp,36(sp)
 4001868:	ddc00815 	stw	r23,32(sp)
 400186c:	dd800715 	stw	r22,28(sp)
 4001870:	dd400615 	stw	r21,24(sp)
 4001874:	dd000515 	stw	r20,20(sp)
 4001878:	dcc00415 	stw	r19,16(sp)
 400187c:	dc400215 	stw	r17,8(sp)
 4001880:	dc000115 	stw	r16,4(sp)
 4001884:	288002c4 	addi	r2,r5,11
 4001888:	00c00584 	movi	r3,22
 400188c:	2025883a 	mov	r18,r4
 4001890:	18807f2e 	bgeu	r3,r2,4001a90 <_malloc_r+0x238>
 4001894:	047ffe04 	movi	r17,-8
 4001898:	1462703a 	and	r17,r2,r17
 400189c:	8800a316 	blt	r17,zero,4001b2c <_malloc_r+0x2d4>
 40018a0:	8940a236 	bltu	r17,r5,4001b2c <_malloc_r+0x2d4>
 40018a4:	400dbfc0 	call	400dbfc <__malloc_lock>
 40018a8:	00807dc4 	movi	r2,503
 40018ac:	1441e92e 	bgeu	r2,r17,4002054 <_malloc_r+0x7fc>
 40018b0:	8804d27a 	srli	r2,r17,9
 40018b4:	1000a126 	beq	r2,zero,4001b3c <_malloc_r+0x2e4>
 40018b8:	00c00104 	movi	r3,4
 40018bc:	18811e36 	bltu	r3,r2,4001d38 <_malloc_r+0x4e0>
 40018c0:	8804d1ba 	srli	r2,r17,6
 40018c4:	12000e44 	addi	r8,r2,57
 40018c8:	11c00e04 	addi	r7,r2,56
 40018cc:	4209883a 	add	r4,r8,r8
 40018d0:	04c10074 	movhi	r19,1025
 40018d4:	2109883a 	add	r4,r4,r4
 40018d8:	9cc31704 	addi	r19,r19,3164
 40018dc:	2109883a 	add	r4,r4,r4
 40018e0:	9909883a 	add	r4,r19,r4
 40018e4:	24000117 	ldw	r16,4(r4)
 40018e8:	213ffe04 	addi	r4,r4,-8
 40018ec:	24009726 	beq	r4,r16,4001b4c <_malloc_r+0x2f4>
 40018f0:	80800117 	ldw	r2,4(r16)
 40018f4:	01bfff04 	movi	r6,-4
 40018f8:	014003c4 	movi	r5,15
 40018fc:	1184703a 	and	r2,r2,r6
 4001900:	1447c83a 	sub	r3,r2,r17
 4001904:	28c00716 	blt	r5,r3,4001924 <_malloc_r+0xcc>
 4001908:	1800920e 	bge	r3,zero,4001b54 <_malloc_r+0x2fc>
 400190c:	84000317 	ldw	r16,12(r16)
 4001910:	24008e26 	beq	r4,r16,4001b4c <_malloc_r+0x2f4>
 4001914:	80800117 	ldw	r2,4(r16)
 4001918:	1184703a 	and	r2,r2,r6
 400191c:	1447c83a 	sub	r3,r2,r17
 4001920:	28fff90e 	bge	r5,r3,4001908 <__alt_data_end+0xfc001908>
 4001924:	3809883a 	mov	r4,r7
 4001928:	01810074 	movhi	r6,1025
 400192c:	9c000417 	ldw	r16,16(r19)
 4001930:	31831704 	addi	r6,r6,3164
 4001934:	32000204 	addi	r8,r6,8
 4001938:	82013426 	beq	r16,r8,4001e0c <_malloc_r+0x5b4>
 400193c:	80c00117 	ldw	r3,4(r16)
 4001940:	00bfff04 	movi	r2,-4
 4001944:	188e703a 	and	r7,r3,r2
 4001948:	3c45c83a 	sub	r2,r7,r17
 400194c:	00c003c4 	movi	r3,15
 4001950:	18811f16 	blt	r3,r2,4001dd0 <_malloc_r+0x578>
 4001954:	32000515 	stw	r8,20(r6)
 4001958:	32000415 	stw	r8,16(r6)
 400195c:	10007f0e 	bge	r2,zero,4001b5c <_malloc_r+0x304>
 4001960:	00807fc4 	movi	r2,511
 4001964:	11c0fd36 	bltu	r2,r7,4001d5c <_malloc_r+0x504>
 4001968:	3806d0fa 	srli	r3,r7,3
 400196c:	01c00044 	movi	r7,1
 4001970:	30800117 	ldw	r2,4(r6)
 4001974:	19400044 	addi	r5,r3,1
 4001978:	294b883a 	add	r5,r5,r5
 400197c:	1807d0ba 	srai	r3,r3,2
 4001980:	294b883a 	add	r5,r5,r5
 4001984:	294b883a 	add	r5,r5,r5
 4001988:	298b883a 	add	r5,r5,r6
 400198c:	38c6983a 	sll	r3,r7,r3
 4001990:	29c00017 	ldw	r7,0(r5)
 4001994:	2a7ffe04 	addi	r9,r5,-8
 4001998:	1886b03a 	or	r3,r3,r2
 400199c:	82400315 	stw	r9,12(r16)
 40019a0:	81c00215 	stw	r7,8(r16)
 40019a4:	30c00115 	stw	r3,4(r6)
 40019a8:	2c000015 	stw	r16,0(r5)
 40019ac:	3c000315 	stw	r16,12(r7)
 40019b0:	2005d0ba 	srai	r2,r4,2
 40019b4:	01400044 	movi	r5,1
 40019b8:	288a983a 	sll	r5,r5,r2
 40019bc:	19406f36 	bltu	r3,r5,4001b7c <_malloc_r+0x324>
 40019c0:	28c4703a 	and	r2,r5,r3
 40019c4:	10000a1e 	bne	r2,zero,40019f0 <_malloc_r+0x198>
 40019c8:	00bfff04 	movi	r2,-4
 40019cc:	294b883a 	add	r5,r5,r5
 40019d0:	2088703a 	and	r4,r4,r2
 40019d4:	28c4703a 	and	r2,r5,r3
 40019d8:	21000104 	addi	r4,r4,4
 40019dc:	1000041e 	bne	r2,zero,40019f0 <_malloc_r+0x198>
 40019e0:	294b883a 	add	r5,r5,r5
 40019e4:	28c4703a 	and	r2,r5,r3
 40019e8:	21000104 	addi	r4,r4,4
 40019ec:	103ffc26 	beq	r2,zero,40019e0 <__alt_data_end+0xfc0019e0>
 40019f0:	02bfff04 	movi	r10,-4
 40019f4:	024003c4 	movi	r9,15
 40019f8:	21800044 	addi	r6,r4,1
 40019fc:	318d883a 	add	r6,r6,r6
 4001a00:	318d883a 	add	r6,r6,r6
 4001a04:	318d883a 	add	r6,r6,r6
 4001a08:	998d883a 	add	r6,r19,r6
 4001a0c:	333ffe04 	addi	r12,r6,-8
 4001a10:	2017883a 	mov	r11,r4
 4001a14:	31800104 	addi	r6,r6,4
 4001a18:	34000017 	ldw	r16,0(r6)
 4001a1c:	31fffd04 	addi	r7,r6,-12
 4001a20:	81c0041e 	bne	r16,r7,4001a34 <_malloc_r+0x1dc>
 4001a24:	0000fb06 	br	4001e14 <_malloc_r+0x5bc>
 4001a28:	1801030e 	bge	r3,zero,4001e38 <_malloc_r+0x5e0>
 4001a2c:	84000317 	ldw	r16,12(r16)
 4001a30:	81c0f826 	beq	r16,r7,4001e14 <_malloc_r+0x5bc>
 4001a34:	80800117 	ldw	r2,4(r16)
 4001a38:	1284703a 	and	r2,r2,r10
 4001a3c:	1447c83a 	sub	r3,r2,r17
 4001a40:	48fff90e 	bge	r9,r3,4001a28 <__alt_data_end+0xfc001a28>
 4001a44:	80800317 	ldw	r2,12(r16)
 4001a48:	81000217 	ldw	r4,8(r16)
 4001a4c:	89400054 	ori	r5,r17,1
 4001a50:	81400115 	stw	r5,4(r16)
 4001a54:	20800315 	stw	r2,12(r4)
 4001a58:	11000215 	stw	r4,8(r2)
 4001a5c:	8463883a 	add	r17,r16,r17
 4001a60:	9c400515 	stw	r17,20(r19)
 4001a64:	9c400415 	stw	r17,16(r19)
 4001a68:	18800054 	ori	r2,r3,1
 4001a6c:	88800115 	stw	r2,4(r17)
 4001a70:	8a000315 	stw	r8,12(r17)
 4001a74:	8a000215 	stw	r8,8(r17)
 4001a78:	88e3883a 	add	r17,r17,r3
 4001a7c:	88c00015 	stw	r3,0(r17)
 4001a80:	9009883a 	mov	r4,r18
 4001a84:	400dc200 	call	400dc20 <__malloc_unlock>
 4001a88:	80800204 	addi	r2,r16,8
 4001a8c:	00001b06 	br	4001afc <_malloc_r+0x2a4>
 4001a90:	04400404 	movi	r17,16
 4001a94:	89402536 	bltu	r17,r5,4001b2c <_malloc_r+0x2d4>
 4001a98:	400dbfc0 	call	400dbfc <__malloc_lock>
 4001a9c:	00800184 	movi	r2,6
 4001aa0:	01000084 	movi	r4,2
 4001aa4:	04c10074 	movhi	r19,1025
 4001aa8:	1085883a 	add	r2,r2,r2
 4001aac:	9cc31704 	addi	r19,r19,3164
 4001ab0:	1085883a 	add	r2,r2,r2
 4001ab4:	9885883a 	add	r2,r19,r2
 4001ab8:	14000117 	ldw	r16,4(r2)
 4001abc:	10fffe04 	addi	r3,r2,-8
 4001ac0:	80c0d926 	beq	r16,r3,4001e28 <_malloc_r+0x5d0>
 4001ac4:	80c00117 	ldw	r3,4(r16)
 4001ac8:	81000317 	ldw	r4,12(r16)
 4001acc:	00bfff04 	movi	r2,-4
 4001ad0:	1884703a 	and	r2,r3,r2
 4001ad4:	81400217 	ldw	r5,8(r16)
 4001ad8:	8085883a 	add	r2,r16,r2
 4001adc:	10c00117 	ldw	r3,4(r2)
 4001ae0:	29000315 	stw	r4,12(r5)
 4001ae4:	21400215 	stw	r5,8(r4)
 4001ae8:	18c00054 	ori	r3,r3,1
 4001aec:	10c00115 	stw	r3,4(r2)
 4001af0:	9009883a 	mov	r4,r18
 4001af4:	400dc200 	call	400dc20 <__malloc_unlock>
 4001af8:	80800204 	addi	r2,r16,8
 4001afc:	dfc00a17 	ldw	ra,40(sp)
 4001b00:	df000917 	ldw	fp,36(sp)
 4001b04:	ddc00817 	ldw	r23,32(sp)
 4001b08:	dd800717 	ldw	r22,28(sp)
 4001b0c:	dd400617 	ldw	r21,24(sp)
 4001b10:	dd000517 	ldw	r20,20(sp)
 4001b14:	dcc00417 	ldw	r19,16(sp)
 4001b18:	dc800317 	ldw	r18,12(sp)
 4001b1c:	dc400217 	ldw	r17,8(sp)
 4001b20:	dc000117 	ldw	r16,4(sp)
 4001b24:	dec00b04 	addi	sp,sp,44
 4001b28:	f800283a 	ret
 4001b2c:	00800304 	movi	r2,12
 4001b30:	90800015 	stw	r2,0(r18)
 4001b34:	0005883a 	mov	r2,zero
 4001b38:	003ff006 	br	4001afc <__alt_data_end+0xfc001afc>
 4001b3c:	01002004 	movi	r4,128
 4001b40:	02001004 	movi	r8,64
 4001b44:	01c00fc4 	movi	r7,63
 4001b48:	003f6106 	br	40018d0 <__alt_data_end+0xfc0018d0>
 4001b4c:	4009883a 	mov	r4,r8
 4001b50:	003f7506 	br	4001928 <__alt_data_end+0xfc001928>
 4001b54:	81000317 	ldw	r4,12(r16)
 4001b58:	003fde06 	br	4001ad4 <__alt_data_end+0xfc001ad4>
 4001b5c:	81c5883a 	add	r2,r16,r7
 4001b60:	11400117 	ldw	r5,4(r2)
 4001b64:	9009883a 	mov	r4,r18
 4001b68:	29400054 	ori	r5,r5,1
 4001b6c:	11400115 	stw	r5,4(r2)
 4001b70:	400dc200 	call	400dc20 <__malloc_unlock>
 4001b74:	80800204 	addi	r2,r16,8
 4001b78:	003fe006 	br	4001afc <__alt_data_end+0xfc001afc>
 4001b7c:	9c000217 	ldw	r16,8(r19)
 4001b80:	00bfff04 	movi	r2,-4
 4001b84:	85800117 	ldw	r22,4(r16)
 4001b88:	b0ac703a 	and	r22,r22,r2
 4001b8c:	b4400336 	bltu	r22,r17,4001b9c <_malloc_r+0x344>
 4001b90:	b445c83a 	sub	r2,r22,r17
 4001b94:	00c003c4 	movi	r3,15
 4001b98:	18805d16 	blt	r3,r2,4001d10 <_malloc_r+0x4b8>
 4001b9c:	05c10074 	movhi	r23,1025
 4001ba0:	00810074 	movhi	r2,1025
 4001ba4:	108fa204 	addi	r2,r2,16008
 4001ba8:	bdc8c604 	addi	r23,r23,8984
 4001bac:	15400017 	ldw	r21,0(r2)
 4001bb0:	b8c00017 	ldw	r3,0(r23)
 4001bb4:	00bfffc4 	movi	r2,-1
 4001bb8:	858d883a 	add	r6,r16,r22
 4001bbc:	8d6b883a 	add	r21,r17,r21
 4001bc0:	1880ea26 	beq	r3,r2,4001f6c <_malloc_r+0x714>
 4001bc4:	ad4403c4 	addi	r21,r21,4111
 4001bc8:	00bc0004 	movi	r2,-4096
 4001bcc:	a8aa703a 	and	r21,r21,r2
 4001bd0:	a80b883a 	mov	r5,r21
 4001bd4:	9009883a 	mov	r4,r18
 4001bd8:	d9800015 	stw	r6,0(sp)
 4001bdc:	40021f80 	call	40021f8 <_sbrk_r>
 4001be0:	1029883a 	mov	r20,r2
 4001be4:	00bfffc4 	movi	r2,-1
 4001be8:	d9800017 	ldw	r6,0(sp)
 4001bec:	a080e826 	beq	r20,r2,4001f90 <_malloc_r+0x738>
 4001bf0:	a180a636 	bltu	r20,r6,4001e8c <_malloc_r+0x634>
 4001bf4:	07010074 	movhi	fp,1025
 4001bf8:	e70fb004 	addi	fp,fp,16064
 4001bfc:	e0800017 	ldw	r2,0(fp)
 4001c00:	a887883a 	add	r3,r21,r2
 4001c04:	e0c00015 	stw	r3,0(fp)
 4001c08:	3500e626 	beq	r6,r20,4001fa4 <_malloc_r+0x74c>
 4001c0c:	b9000017 	ldw	r4,0(r23)
 4001c10:	00bfffc4 	movi	r2,-1
 4001c14:	2080ee26 	beq	r4,r2,4001fd0 <_malloc_r+0x778>
 4001c18:	a185c83a 	sub	r2,r20,r6
 4001c1c:	10c5883a 	add	r2,r2,r3
 4001c20:	e0800015 	stw	r2,0(fp)
 4001c24:	a0c001cc 	andi	r3,r20,7
 4001c28:	1800bc26 	beq	r3,zero,4001f1c <_malloc_r+0x6c4>
 4001c2c:	a0e9c83a 	sub	r20,r20,r3
 4001c30:	00840204 	movi	r2,4104
 4001c34:	a5000204 	addi	r20,r20,8
 4001c38:	10c7c83a 	sub	r3,r2,r3
 4001c3c:	a545883a 	add	r2,r20,r21
 4001c40:	1083ffcc 	andi	r2,r2,4095
 4001c44:	18abc83a 	sub	r21,r3,r2
 4001c48:	a80b883a 	mov	r5,r21
 4001c4c:	9009883a 	mov	r4,r18
 4001c50:	40021f80 	call	40021f8 <_sbrk_r>
 4001c54:	00ffffc4 	movi	r3,-1
 4001c58:	10c0e126 	beq	r2,r3,4001fe0 <_malloc_r+0x788>
 4001c5c:	1505c83a 	sub	r2,r2,r20
 4001c60:	1545883a 	add	r2,r2,r21
 4001c64:	10800054 	ori	r2,r2,1
 4001c68:	e0c00017 	ldw	r3,0(fp)
 4001c6c:	9d000215 	stw	r20,8(r19)
 4001c70:	a0800115 	stw	r2,4(r20)
 4001c74:	a8c7883a 	add	r3,r21,r3
 4001c78:	e0c00015 	stw	r3,0(fp)
 4001c7c:	84c00e26 	beq	r16,r19,4001cb8 <_malloc_r+0x460>
 4001c80:	018003c4 	movi	r6,15
 4001c84:	3580a72e 	bgeu	r6,r22,4001f24 <_malloc_r+0x6cc>
 4001c88:	81400117 	ldw	r5,4(r16)
 4001c8c:	013ffe04 	movi	r4,-8
 4001c90:	b0bffd04 	addi	r2,r22,-12
 4001c94:	1104703a 	and	r2,r2,r4
 4001c98:	2900004c 	andi	r4,r5,1
 4001c9c:	2088b03a 	or	r4,r4,r2
 4001ca0:	81000115 	stw	r4,4(r16)
 4001ca4:	01400144 	movi	r5,5
 4001ca8:	8089883a 	add	r4,r16,r2
 4001cac:	21400115 	stw	r5,4(r4)
 4001cb0:	21400215 	stw	r5,8(r4)
 4001cb4:	3080cd36 	bltu	r6,r2,4001fec <_malloc_r+0x794>
 4001cb8:	00810074 	movhi	r2,1025
 4001cbc:	108fa104 	addi	r2,r2,16004
 4001cc0:	11000017 	ldw	r4,0(r2)
 4001cc4:	20c0012e 	bgeu	r4,r3,4001ccc <_malloc_r+0x474>
 4001cc8:	10c00015 	stw	r3,0(r2)
 4001ccc:	00810074 	movhi	r2,1025
 4001cd0:	108fa004 	addi	r2,r2,16000
 4001cd4:	11000017 	ldw	r4,0(r2)
 4001cd8:	9c000217 	ldw	r16,8(r19)
 4001cdc:	20c0012e 	bgeu	r4,r3,4001ce4 <_malloc_r+0x48c>
 4001ce0:	10c00015 	stw	r3,0(r2)
 4001ce4:	80c00117 	ldw	r3,4(r16)
 4001ce8:	00bfff04 	movi	r2,-4
 4001cec:	1886703a 	and	r3,r3,r2
 4001cf0:	1c45c83a 	sub	r2,r3,r17
 4001cf4:	1c400236 	bltu	r3,r17,4001d00 <_malloc_r+0x4a8>
 4001cf8:	00c003c4 	movi	r3,15
 4001cfc:	18800416 	blt	r3,r2,4001d10 <_malloc_r+0x4b8>
 4001d00:	9009883a 	mov	r4,r18
 4001d04:	400dc200 	call	400dc20 <__malloc_unlock>
 4001d08:	0005883a 	mov	r2,zero
 4001d0c:	003f7b06 	br	4001afc <__alt_data_end+0xfc001afc>
 4001d10:	88c00054 	ori	r3,r17,1
 4001d14:	80c00115 	stw	r3,4(r16)
 4001d18:	8463883a 	add	r17,r16,r17
 4001d1c:	10800054 	ori	r2,r2,1
 4001d20:	9c400215 	stw	r17,8(r19)
 4001d24:	88800115 	stw	r2,4(r17)
 4001d28:	9009883a 	mov	r4,r18
 4001d2c:	400dc200 	call	400dc20 <__malloc_unlock>
 4001d30:	80800204 	addi	r2,r16,8
 4001d34:	003f7106 	br	4001afc <__alt_data_end+0xfc001afc>
 4001d38:	00c00504 	movi	r3,20
 4001d3c:	18804a2e 	bgeu	r3,r2,4001e68 <_malloc_r+0x610>
 4001d40:	00c01504 	movi	r3,84
 4001d44:	18806e36 	bltu	r3,r2,4001f00 <_malloc_r+0x6a8>
 4001d48:	8804d33a 	srli	r2,r17,12
 4001d4c:	12001bc4 	addi	r8,r2,111
 4001d50:	11c01b84 	addi	r7,r2,110
 4001d54:	4209883a 	add	r4,r8,r8
 4001d58:	003edd06 	br	40018d0 <__alt_data_end+0xfc0018d0>
 4001d5c:	3804d27a 	srli	r2,r7,9
 4001d60:	00c00104 	movi	r3,4
 4001d64:	1880442e 	bgeu	r3,r2,4001e78 <_malloc_r+0x620>
 4001d68:	00c00504 	movi	r3,20
 4001d6c:	18808136 	bltu	r3,r2,4001f74 <_malloc_r+0x71c>
 4001d70:	11401704 	addi	r5,r2,92
 4001d74:	10c016c4 	addi	r3,r2,91
 4001d78:	294b883a 	add	r5,r5,r5
 4001d7c:	294b883a 	add	r5,r5,r5
 4001d80:	294b883a 	add	r5,r5,r5
 4001d84:	994b883a 	add	r5,r19,r5
 4001d88:	28800017 	ldw	r2,0(r5)
 4001d8c:	01810074 	movhi	r6,1025
 4001d90:	297ffe04 	addi	r5,r5,-8
 4001d94:	31831704 	addi	r6,r6,3164
 4001d98:	28806526 	beq	r5,r2,4001f30 <_malloc_r+0x6d8>
 4001d9c:	01bfff04 	movi	r6,-4
 4001da0:	10c00117 	ldw	r3,4(r2)
 4001da4:	1986703a 	and	r3,r3,r6
 4001da8:	38c0022e 	bgeu	r7,r3,4001db4 <_malloc_r+0x55c>
 4001dac:	10800217 	ldw	r2,8(r2)
 4001db0:	28bffb1e 	bne	r5,r2,4001da0 <__alt_data_end+0xfc001da0>
 4001db4:	11400317 	ldw	r5,12(r2)
 4001db8:	98c00117 	ldw	r3,4(r19)
 4001dbc:	81400315 	stw	r5,12(r16)
 4001dc0:	80800215 	stw	r2,8(r16)
 4001dc4:	2c000215 	stw	r16,8(r5)
 4001dc8:	14000315 	stw	r16,12(r2)
 4001dcc:	003ef806 	br	40019b0 <__alt_data_end+0xfc0019b0>
 4001dd0:	88c00054 	ori	r3,r17,1
 4001dd4:	80c00115 	stw	r3,4(r16)
 4001dd8:	8463883a 	add	r17,r16,r17
 4001ddc:	34400515 	stw	r17,20(r6)
 4001de0:	34400415 	stw	r17,16(r6)
 4001de4:	10c00054 	ori	r3,r2,1
 4001de8:	8a000315 	stw	r8,12(r17)
 4001dec:	8a000215 	stw	r8,8(r17)
 4001df0:	88c00115 	stw	r3,4(r17)
 4001df4:	88a3883a 	add	r17,r17,r2
 4001df8:	88800015 	stw	r2,0(r17)
 4001dfc:	9009883a 	mov	r4,r18
 4001e00:	400dc200 	call	400dc20 <__malloc_unlock>
 4001e04:	80800204 	addi	r2,r16,8
 4001e08:	003f3c06 	br	4001afc <__alt_data_end+0xfc001afc>
 4001e0c:	30c00117 	ldw	r3,4(r6)
 4001e10:	003ee706 	br	40019b0 <__alt_data_end+0xfc0019b0>
 4001e14:	5ac00044 	addi	r11,r11,1
 4001e18:	588000cc 	andi	r2,r11,3
 4001e1c:	31800204 	addi	r6,r6,8
 4001e20:	103efd1e 	bne	r2,zero,4001a18 <__alt_data_end+0xfc001a18>
 4001e24:	00002406 	br	4001eb8 <_malloc_r+0x660>
 4001e28:	14000317 	ldw	r16,12(r2)
 4001e2c:	143f251e 	bne	r2,r16,4001ac4 <__alt_data_end+0xfc001ac4>
 4001e30:	21000084 	addi	r4,r4,2
 4001e34:	003ebc06 	br	4001928 <__alt_data_end+0xfc001928>
 4001e38:	8085883a 	add	r2,r16,r2
 4001e3c:	10c00117 	ldw	r3,4(r2)
 4001e40:	81000317 	ldw	r4,12(r16)
 4001e44:	81400217 	ldw	r5,8(r16)
 4001e48:	18c00054 	ori	r3,r3,1
 4001e4c:	10c00115 	stw	r3,4(r2)
 4001e50:	29000315 	stw	r4,12(r5)
 4001e54:	21400215 	stw	r5,8(r4)
 4001e58:	9009883a 	mov	r4,r18
 4001e5c:	400dc200 	call	400dc20 <__malloc_unlock>
 4001e60:	80800204 	addi	r2,r16,8
 4001e64:	003f2506 	br	4001afc <__alt_data_end+0xfc001afc>
 4001e68:	12001704 	addi	r8,r2,92
 4001e6c:	11c016c4 	addi	r7,r2,91
 4001e70:	4209883a 	add	r4,r8,r8
 4001e74:	003e9606 	br	40018d0 <__alt_data_end+0xfc0018d0>
 4001e78:	3804d1ba 	srli	r2,r7,6
 4001e7c:	11400e44 	addi	r5,r2,57
 4001e80:	10c00e04 	addi	r3,r2,56
 4001e84:	294b883a 	add	r5,r5,r5
 4001e88:	003fbc06 	br	4001d7c <__alt_data_end+0xfc001d7c>
 4001e8c:	84ff5926 	beq	r16,r19,4001bf4 <__alt_data_end+0xfc001bf4>
 4001e90:	00810074 	movhi	r2,1025
 4001e94:	10831704 	addi	r2,r2,3164
 4001e98:	14000217 	ldw	r16,8(r2)
 4001e9c:	00bfff04 	movi	r2,-4
 4001ea0:	80c00117 	ldw	r3,4(r16)
 4001ea4:	1886703a 	and	r3,r3,r2
 4001ea8:	003f9106 	br	4001cf0 <__alt_data_end+0xfc001cf0>
 4001eac:	60800217 	ldw	r2,8(r12)
 4001eb0:	213fffc4 	addi	r4,r4,-1
 4001eb4:	1300651e 	bne	r2,r12,400204c <_malloc_r+0x7f4>
 4001eb8:	208000cc 	andi	r2,r4,3
 4001ebc:	633ffe04 	addi	r12,r12,-8
 4001ec0:	103ffa1e 	bne	r2,zero,4001eac <__alt_data_end+0xfc001eac>
 4001ec4:	98800117 	ldw	r2,4(r19)
 4001ec8:	0146303a 	nor	r3,zero,r5
 4001ecc:	1884703a 	and	r2,r3,r2
 4001ed0:	98800115 	stw	r2,4(r19)
 4001ed4:	294b883a 	add	r5,r5,r5
 4001ed8:	117f2836 	bltu	r2,r5,4001b7c <__alt_data_end+0xfc001b7c>
 4001edc:	283f2726 	beq	r5,zero,4001b7c <__alt_data_end+0xfc001b7c>
 4001ee0:	2886703a 	and	r3,r5,r2
 4001ee4:	5809883a 	mov	r4,r11
 4001ee8:	183ec31e 	bne	r3,zero,40019f8 <__alt_data_end+0xfc0019f8>
 4001eec:	294b883a 	add	r5,r5,r5
 4001ef0:	2886703a 	and	r3,r5,r2
 4001ef4:	21000104 	addi	r4,r4,4
 4001ef8:	183ffc26 	beq	r3,zero,4001eec <__alt_data_end+0xfc001eec>
 4001efc:	003ebe06 	br	40019f8 <__alt_data_end+0xfc0019f8>
 4001f00:	00c05504 	movi	r3,340
 4001f04:	18801236 	bltu	r3,r2,4001f50 <_malloc_r+0x6f8>
 4001f08:	8804d3fa 	srli	r2,r17,15
 4001f0c:	12001e04 	addi	r8,r2,120
 4001f10:	11c01dc4 	addi	r7,r2,119
 4001f14:	4209883a 	add	r4,r8,r8
 4001f18:	003e6d06 	br	40018d0 <__alt_data_end+0xfc0018d0>
 4001f1c:	00c40004 	movi	r3,4096
 4001f20:	003f4606 	br	4001c3c <__alt_data_end+0xfc001c3c>
 4001f24:	00800044 	movi	r2,1
 4001f28:	a0800115 	stw	r2,4(r20)
 4001f2c:	003f7406 	br	4001d00 <__alt_data_end+0xfc001d00>
 4001f30:	1805d0ba 	srai	r2,r3,2
 4001f34:	01c00044 	movi	r7,1
 4001f38:	30c00117 	ldw	r3,4(r6)
 4001f3c:	388e983a 	sll	r7,r7,r2
 4001f40:	2805883a 	mov	r2,r5
 4001f44:	38c6b03a 	or	r3,r7,r3
 4001f48:	30c00115 	stw	r3,4(r6)
 4001f4c:	003f9b06 	br	4001dbc <__alt_data_end+0xfc001dbc>
 4001f50:	00c15504 	movi	r3,1364
 4001f54:	18801a36 	bltu	r3,r2,4001fc0 <_malloc_r+0x768>
 4001f58:	8804d4ba 	srli	r2,r17,18
 4001f5c:	12001f44 	addi	r8,r2,125
 4001f60:	11c01f04 	addi	r7,r2,124
 4001f64:	4209883a 	add	r4,r8,r8
 4001f68:	003e5906 	br	40018d0 <__alt_data_end+0xfc0018d0>
 4001f6c:	ad400404 	addi	r21,r21,16
 4001f70:	003f1706 	br	4001bd0 <__alt_data_end+0xfc001bd0>
 4001f74:	00c01504 	movi	r3,84
 4001f78:	18802336 	bltu	r3,r2,4002008 <_malloc_r+0x7b0>
 4001f7c:	3804d33a 	srli	r2,r7,12
 4001f80:	11401bc4 	addi	r5,r2,111
 4001f84:	10c01b84 	addi	r3,r2,110
 4001f88:	294b883a 	add	r5,r5,r5
 4001f8c:	003f7b06 	br	4001d7c <__alt_data_end+0xfc001d7c>
 4001f90:	9c000217 	ldw	r16,8(r19)
 4001f94:	00bfff04 	movi	r2,-4
 4001f98:	80c00117 	ldw	r3,4(r16)
 4001f9c:	1886703a 	and	r3,r3,r2
 4001fa0:	003f5306 	br	4001cf0 <__alt_data_end+0xfc001cf0>
 4001fa4:	3083ffcc 	andi	r2,r6,4095
 4001fa8:	103f181e 	bne	r2,zero,4001c0c <__alt_data_end+0xfc001c0c>
 4001fac:	99000217 	ldw	r4,8(r19)
 4001fb0:	b545883a 	add	r2,r22,r21
 4001fb4:	10800054 	ori	r2,r2,1
 4001fb8:	20800115 	stw	r2,4(r4)
 4001fbc:	003f3e06 	br	4001cb8 <__alt_data_end+0xfc001cb8>
 4001fc0:	01003f84 	movi	r4,254
 4001fc4:	02001fc4 	movi	r8,127
 4001fc8:	01c01f84 	movi	r7,126
 4001fcc:	003e4006 	br	40018d0 <__alt_data_end+0xfc0018d0>
 4001fd0:	00810074 	movhi	r2,1025
 4001fd4:	1088c604 	addi	r2,r2,8984
 4001fd8:	15000015 	stw	r20,0(r2)
 4001fdc:	003f1106 	br	4001c24 <__alt_data_end+0xfc001c24>
 4001fe0:	00800044 	movi	r2,1
 4001fe4:	002b883a 	mov	r21,zero
 4001fe8:	003f1f06 	br	4001c68 <__alt_data_end+0xfc001c68>
 4001fec:	81400204 	addi	r5,r16,8
 4001ff0:	9009883a 	mov	r4,r18
 4001ff4:	40013c00 	call	40013c0 <_free_r>
 4001ff8:	00810074 	movhi	r2,1025
 4001ffc:	108fb004 	addi	r2,r2,16064
 4002000:	10c00017 	ldw	r3,0(r2)
 4002004:	003f2c06 	br	4001cb8 <__alt_data_end+0xfc001cb8>
 4002008:	00c05504 	movi	r3,340
 400200c:	18800536 	bltu	r3,r2,4002024 <_malloc_r+0x7cc>
 4002010:	3804d3fa 	srli	r2,r7,15
 4002014:	11401e04 	addi	r5,r2,120
 4002018:	10c01dc4 	addi	r3,r2,119
 400201c:	294b883a 	add	r5,r5,r5
 4002020:	003f5606 	br	4001d7c <__alt_data_end+0xfc001d7c>
 4002024:	00c15504 	movi	r3,1364
 4002028:	18800536 	bltu	r3,r2,4002040 <_malloc_r+0x7e8>
 400202c:	3804d4ba 	srli	r2,r7,18
 4002030:	11401f44 	addi	r5,r2,125
 4002034:	10c01f04 	addi	r3,r2,124
 4002038:	294b883a 	add	r5,r5,r5
 400203c:	003f4f06 	br	4001d7c <__alt_data_end+0xfc001d7c>
 4002040:	01403f84 	movi	r5,254
 4002044:	00c01f84 	movi	r3,126
 4002048:	003f4c06 	br	4001d7c <__alt_data_end+0xfc001d7c>
 400204c:	98800117 	ldw	r2,4(r19)
 4002050:	003fa006 	br	4001ed4 <__alt_data_end+0xfc001ed4>
 4002054:	8808d0fa 	srli	r4,r17,3
 4002058:	20800044 	addi	r2,r4,1
 400205c:	1085883a 	add	r2,r2,r2
 4002060:	003e9006 	br	4001aa4 <__alt_data_end+0xfc001aa4>

04002064 <memset>:
 4002064:	20c000cc 	andi	r3,r4,3
 4002068:	2005883a 	mov	r2,r4
 400206c:	18004426 	beq	r3,zero,4002180 <memset+0x11c>
 4002070:	31ffffc4 	addi	r7,r6,-1
 4002074:	30004026 	beq	r6,zero,4002178 <memset+0x114>
 4002078:	2813883a 	mov	r9,r5
 400207c:	200d883a 	mov	r6,r4
 4002080:	2007883a 	mov	r3,r4
 4002084:	00000406 	br	4002098 <memset+0x34>
 4002088:	3a3fffc4 	addi	r8,r7,-1
 400208c:	31800044 	addi	r6,r6,1
 4002090:	38003926 	beq	r7,zero,4002178 <memset+0x114>
 4002094:	400f883a 	mov	r7,r8
 4002098:	18c00044 	addi	r3,r3,1
 400209c:	32400005 	stb	r9,0(r6)
 40020a0:	1a0000cc 	andi	r8,r3,3
 40020a4:	403ff81e 	bne	r8,zero,4002088 <__alt_data_end+0xfc002088>
 40020a8:	010000c4 	movi	r4,3
 40020ac:	21c02d2e 	bgeu	r4,r7,4002164 <memset+0x100>
 40020b0:	29003fcc 	andi	r4,r5,255
 40020b4:	200c923a 	slli	r6,r4,8
 40020b8:	3108b03a 	or	r4,r6,r4
 40020bc:	200c943a 	slli	r6,r4,16
 40020c0:	218cb03a 	or	r6,r4,r6
 40020c4:	010003c4 	movi	r4,15
 40020c8:	21c0182e 	bgeu	r4,r7,400212c <memset+0xc8>
 40020cc:	3b3ffc04 	addi	r12,r7,-16
 40020d0:	6018d13a 	srli	r12,r12,4
 40020d4:	1a000104 	addi	r8,r3,4
 40020d8:	1ac00204 	addi	r11,r3,8
 40020dc:	6008913a 	slli	r4,r12,4
 40020e0:	1a800304 	addi	r10,r3,12
 40020e4:	1813883a 	mov	r9,r3
 40020e8:	21000504 	addi	r4,r4,20
 40020ec:	1909883a 	add	r4,r3,r4
 40020f0:	49800015 	stw	r6,0(r9)
 40020f4:	41800015 	stw	r6,0(r8)
 40020f8:	59800015 	stw	r6,0(r11)
 40020fc:	51800015 	stw	r6,0(r10)
 4002100:	42000404 	addi	r8,r8,16
 4002104:	4a400404 	addi	r9,r9,16
 4002108:	5ac00404 	addi	r11,r11,16
 400210c:	52800404 	addi	r10,r10,16
 4002110:	413ff71e 	bne	r8,r4,40020f0 <__alt_data_end+0xfc0020f0>
 4002114:	63000044 	addi	r12,r12,1
 4002118:	6018913a 	slli	r12,r12,4
 400211c:	39c003cc 	andi	r7,r7,15
 4002120:	010000c4 	movi	r4,3
 4002124:	1b07883a 	add	r3,r3,r12
 4002128:	21c00e2e 	bgeu	r4,r7,4002164 <memset+0x100>
 400212c:	1813883a 	mov	r9,r3
 4002130:	3811883a 	mov	r8,r7
 4002134:	010000c4 	movi	r4,3
 4002138:	49800015 	stw	r6,0(r9)
 400213c:	423fff04 	addi	r8,r8,-4
 4002140:	4a400104 	addi	r9,r9,4
 4002144:	223ffc36 	bltu	r4,r8,4002138 <__alt_data_end+0xfc002138>
 4002148:	393fff04 	addi	r4,r7,-4
 400214c:	2008d0ba 	srli	r4,r4,2
 4002150:	39c000cc 	andi	r7,r7,3
 4002154:	21000044 	addi	r4,r4,1
 4002158:	2109883a 	add	r4,r4,r4
 400215c:	2109883a 	add	r4,r4,r4
 4002160:	1907883a 	add	r3,r3,r4
 4002164:	38000526 	beq	r7,zero,400217c <memset+0x118>
 4002168:	19cf883a 	add	r7,r3,r7
 400216c:	19400005 	stb	r5,0(r3)
 4002170:	18c00044 	addi	r3,r3,1
 4002174:	38fffd1e 	bne	r7,r3,400216c <__alt_data_end+0xfc00216c>
 4002178:	f800283a 	ret
 400217c:	f800283a 	ret
 4002180:	2007883a 	mov	r3,r4
 4002184:	300f883a 	mov	r7,r6
 4002188:	003fc706 	br	40020a8 <__alt_data_end+0xfc0020a8>

0400218c <_printf_r>:
 400218c:	defffd04 	addi	sp,sp,-12
 4002190:	2805883a 	mov	r2,r5
 4002194:	dfc00015 	stw	ra,0(sp)
 4002198:	d9800115 	stw	r6,4(sp)
 400219c:	d9c00215 	stw	r7,8(sp)
 40021a0:	21400217 	ldw	r5,8(r4)
 40021a4:	d9c00104 	addi	r7,sp,4
 40021a8:	100d883a 	mov	r6,r2
 40021ac:	40027e00 	call	40027e0 <___vfprintf_internal_r>
 40021b0:	dfc00017 	ldw	ra,0(sp)
 40021b4:	dec00304 	addi	sp,sp,12
 40021b8:	f800283a 	ret

040021bc <printf>:
 40021bc:	defffc04 	addi	sp,sp,-16
 40021c0:	dfc00015 	stw	ra,0(sp)
 40021c4:	d9400115 	stw	r5,4(sp)
 40021c8:	d9800215 	stw	r6,8(sp)
 40021cc:	d9c00315 	stw	r7,12(sp)
 40021d0:	00810074 	movhi	r2,1025
 40021d4:	1088c504 	addi	r2,r2,8980
 40021d8:	10800017 	ldw	r2,0(r2)
 40021dc:	200b883a 	mov	r5,r4
 40021e0:	d9800104 	addi	r6,sp,4
 40021e4:	11000217 	ldw	r4,8(r2)
 40021e8:	40049d80 	call	40049d8 <__vfprintf_internal>
 40021ec:	dfc00017 	ldw	ra,0(sp)
 40021f0:	dec00404 	addi	sp,sp,16
 40021f4:	f800283a 	ret

040021f8 <_sbrk_r>:
 40021f8:	defffd04 	addi	sp,sp,-12
 40021fc:	dc000015 	stw	r16,0(sp)
 4002200:	04010074 	movhi	r16,1025
 4002204:	dc400115 	stw	r17,4(sp)
 4002208:	840fa304 	addi	r16,r16,16012
 400220c:	2023883a 	mov	r17,r4
 4002210:	2809883a 	mov	r4,r5
 4002214:	dfc00215 	stw	ra,8(sp)
 4002218:	80000015 	stw	zero,0(r16)
 400221c:	400e0340 	call	400e034 <sbrk>
 4002220:	00ffffc4 	movi	r3,-1
 4002224:	10c00526 	beq	r2,r3,400223c <_sbrk_r+0x44>
 4002228:	dfc00217 	ldw	ra,8(sp)
 400222c:	dc400117 	ldw	r17,4(sp)
 4002230:	dc000017 	ldw	r16,0(sp)
 4002234:	dec00304 	addi	sp,sp,12
 4002238:	f800283a 	ret
 400223c:	80c00017 	ldw	r3,0(r16)
 4002240:	183ff926 	beq	r3,zero,4002228 <__alt_data_end+0xfc002228>
 4002244:	88c00015 	stw	r3,0(r17)
 4002248:	003ff706 	br	4002228 <__alt_data_end+0xfc002228>

0400224c <__sread>:
 400224c:	defffe04 	addi	sp,sp,-8
 4002250:	dc000015 	stw	r16,0(sp)
 4002254:	2821883a 	mov	r16,r5
 4002258:	2940038f 	ldh	r5,14(r5)
 400225c:	dfc00115 	stw	ra,4(sp)
 4002260:	4007a600 	call	4007a60 <_read_r>
 4002264:	10000716 	blt	r2,zero,4002284 <__sread+0x38>
 4002268:	80c01417 	ldw	r3,80(r16)
 400226c:	1887883a 	add	r3,r3,r2
 4002270:	80c01415 	stw	r3,80(r16)
 4002274:	dfc00117 	ldw	ra,4(sp)
 4002278:	dc000017 	ldw	r16,0(sp)
 400227c:	dec00204 	addi	sp,sp,8
 4002280:	f800283a 	ret
 4002284:	80c0030b 	ldhu	r3,12(r16)
 4002288:	18fbffcc 	andi	r3,r3,61439
 400228c:	80c0030d 	sth	r3,12(r16)
 4002290:	dfc00117 	ldw	ra,4(sp)
 4002294:	dc000017 	ldw	r16,0(sp)
 4002298:	dec00204 	addi	sp,sp,8
 400229c:	f800283a 	ret

040022a0 <__seofread>:
 40022a0:	0005883a 	mov	r2,zero
 40022a4:	f800283a 	ret

040022a8 <__swrite>:
 40022a8:	2880030b 	ldhu	r2,12(r5)
 40022ac:	defffb04 	addi	sp,sp,-20
 40022b0:	dcc00315 	stw	r19,12(sp)
 40022b4:	dc800215 	stw	r18,8(sp)
 40022b8:	dc400115 	stw	r17,4(sp)
 40022bc:	dc000015 	stw	r16,0(sp)
 40022c0:	dfc00415 	stw	ra,16(sp)
 40022c4:	10c0400c 	andi	r3,r2,256
 40022c8:	2821883a 	mov	r16,r5
 40022cc:	2023883a 	mov	r17,r4
 40022d0:	3025883a 	mov	r18,r6
 40022d4:	3827883a 	mov	r19,r7
 40022d8:	18000526 	beq	r3,zero,40022f0 <__swrite+0x48>
 40022dc:	2940038f 	ldh	r5,14(r5)
 40022e0:	01c00084 	movi	r7,2
 40022e4:	000d883a 	mov	r6,zero
 40022e8:	400661c0 	call	400661c <_lseek_r>
 40022ec:	8080030b 	ldhu	r2,12(r16)
 40022f0:	8140038f 	ldh	r5,14(r16)
 40022f4:	10bbffcc 	andi	r2,r2,61439
 40022f8:	980f883a 	mov	r7,r19
 40022fc:	900d883a 	mov	r6,r18
 4002300:	8809883a 	mov	r4,r17
 4002304:	8080030d 	sth	r2,12(r16)
 4002308:	dfc00417 	ldw	ra,16(sp)
 400230c:	dcc00317 	ldw	r19,12(sp)
 4002310:	dc800217 	ldw	r18,8(sp)
 4002314:	dc400117 	ldw	r17,4(sp)
 4002318:	dc000017 	ldw	r16,0(sp)
 400231c:	dec00504 	addi	sp,sp,20
 4002320:	4004ab01 	jmpi	4004ab0 <_write_r>

04002324 <__sseek>:
 4002324:	defffe04 	addi	sp,sp,-8
 4002328:	dc000015 	stw	r16,0(sp)
 400232c:	2821883a 	mov	r16,r5
 4002330:	2940038f 	ldh	r5,14(r5)
 4002334:	dfc00115 	stw	ra,4(sp)
 4002338:	400661c0 	call	400661c <_lseek_r>
 400233c:	00ffffc4 	movi	r3,-1
 4002340:	10c00826 	beq	r2,r3,4002364 <__sseek+0x40>
 4002344:	80c0030b 	ldhu	r3,12(r16)
 4002348:	80801415 	stw	r2,80(r16)
 400234c:	18c40014 	ori	r3,r3,4096
 4002350:	80c0030d 	sth	r3,12(r16)
 4002354:	dfc00117 	ldw	ra,4(sp)
 4002358:	dc000017 	ldw	r16,0(sp)
 400235c:	dec00204 	addi	sp,sp,8
 4002360:	f800283a 	ret
 4002364:	80c0030b 	ldhu	r3,12(r16)
 4002368:	18fbffcc 	andi	r3,r3,61439
 400236c:	80c0030d 	sth	r3,12(r16)
 4002370:	dfc00117 	ldw	ra,4(sp)
 4002374:	dc000017 	ldw	r16,0(sp)
 4002378:	dec00204 	addi	sp,sp,8
 400237c:	f800283a 	ret

04002380 <__sclose>:
 4002380:	2940038f 	ldh	r5,14(r5)
 4002384:	4004c641 	jmpi	4004c64 <_close_r>

04002388 <strcmp>:
 4002388:	2144b03a 	or	r2,r4,r5
 400238c:	108000cc 	andi	r2,r2,3
 4002390:	1000171e 	bne	r2,zero,40023f0 <strcmp+0x68>
 4002394:	20800017 	ldw	r2,0(r4)
 4002398:	28c00017 	ldw	r3,0(r5)
 400239c:	10c0141e 	bne	r2,r3,40023f0 <strcmp+0x68>
 40023a0:	027fbff4 	movhi	r9,65279
 40023a4:	4a7fbfc4 	addi	r9,r9,-257
 40023a8:	0086303a 	nor	r3,zero,r2
 40023ac:	02202074 	movhi	r8,32897
 40023b0:	1245883a 	add	r2,r2,r9
 40023b4:	42202004 	addi	r8,r8,-32640
 40023b8:	10c4703a 	and	r2,r2,r3
 40023bc:	1204703a 	and	r2,r2,r8
 40023c0:	10000226 	beq	r2,zero,40023cc <strcmp+0x44>
 40023c4:	00002306 	br	4002454 <strcmp+0xcc>
 40023c8:	1000221e 	bne	r2,zero,4002454 <strcmp+0xcc>
 40023cc:	21000104 	addi	r4,r4,4
 40023d0:	20c00017 	ldw	r3,0(r4)
 40023d4:	29400104 	addi	r5,r5,4
 40023d8:	29800017 	ldw	r6,0(r5)
 40023dc:	1a4f883a 	add	r7,r3,r9
 40023e0:	00c4303a 	nor	r2,zero,r3
 40023e4:	3884703a 	and	r2,r7,r2
 40023e8:	1204703a 	and	r2,r2,r8
 40023ec:	19bff626 	beq	r3,r6,40023c8 <__alt_data_end+0xfc0023c8>
 40023f0:	20800003 	ldbu	r2,0(r4)
 40023f4:	10c03fcc 	andi	r3,r2,255
 40023f8:	18c0201c 	xori	r3,r3,128
 40023fc:	18ffe004 	addi	r3,r3,-128
 4002400:	18000c26 	beq	r3,zero,4002434 <strcmp+0xac>
 4002404:	29800007 	ldb	r6,0(r5)
 4002408:	19800326 	beq	r3,r6,4002418 <strcmp+0x90>
 400240c:	00001306 	br	400245c <strcmp+0xd4>
 4002410:	29800007 	ldb	r6,0(r5)
 4002414:	11800b1e 	bne	r2,r6,4002444 <strcmp+0xbc>
 4002418:	21000044 	addi	r4,r4,1
 400241c:	20c00003 	ldbu	r3,0(r4)
 4002420:	29400044 	addi	r5,r5,1
 4002424:	18803fcc 	andi	r2,r3,255
 4002428:	1080201c 	xori	r2,r2,128
 400242c:	10bfe004 	addi	r2,r2,-128
 4002430:	103ff71e 	bne	r2,zero,4002410 <__alt_data_end+0xfc002410>
 4002434:	0007883a 	mov	r3,zero
 4002438:	28800003 	ldbu	r2,0(r5)
 400243c:	1885c83a 	sub	r2,r3,r2
 4002440:	f800283a 	ret
 4002444:	28800003 	ldbu	r2,0(r5)
 4002448:	18c03fcc 	andi	r3,r3,255
 400244c:	1885c83a 	sub	r2,r3,r2
 4002450:	f800283a 	ret
 4002454:	0005883a 	mov	r2,zero
 4002458:	f800283a 	ret
 400245c:	10c03fcc 	andi	r3,r2,255
 4002460:	003ff506 	br	4002438 <__alt_data_end+0xfc002438>

04002464 <strcpy>:
 4002464:	2906b03a 	or	r3,r5,r4
 4002468:	18c000cc 	andi	r3,r3,3
 400246c:	2005883a 	mov	r2,r4
 4002470:	1800161e 	bne	r3,zero,40024cc <strcpy+0x68>
 4002474:	29c00017 	ldw	r7,0(r5)
 4002478:	02ffbff4 	movhi	r11,65279
 400247c:	5affbfc4 	addi	r11,r11,-257
 4002480:	02a02074 	movhi	r10,32897
 4002484:	01c6303a 	nor	r3,zero,r7
 4002488:	3ac9883a 	add	r4,r7,r11
 400248c:	52a02004 	addi	r10,r10,-32640
 4002490:	20c6703a 	and	r3,r4,r3
 4002494:	1a86703a 	and	r3,r3,r10
 4002498:	18000c1e 	bne	r3,zero,40024cc <strcpy+0x68>
 400249c:	1011883a 	mov	r8,r2
 40024a0:	41c00015 	stw	r7,0(r8)
 40024a4:	29400104 	addi	r5,r5,4
 40024a8:	29c00017 	ldw	r7,0(r5)
 40024ac:	41800104 	addi	r6,r8,4
 40024b0:	3011883a 	mov	r8,r6
 40024b4:	3ad3883a 	add	r9,r7,r11
 40024b8:	01c6303a 	nor	r3,zero,r7
 40024bc:	48c6703a 	and	r3,r9,r3
 40024c0:	1a86703a 	and	r3,r3,r10
 40024c4:	183ff626 	beq	r3,zero,40024a0 <__alt_data_end+0xfc0024a0>
 40024c8:	00000106 	br	40024d0 <strcpy+0x6c>
 40024cc:	100d883a 	mov	r6,r2
 40024d0:	28c00003 	ldbu	r3,0(r5)
 40024d4:	31800044 	addi	r6,r6,1
 40024d8:	29400044 	addi	r5,r5,1
 40024dc:	30ffffc5 	stb	r3,-1(r6)
 40024e0:	18c03fcc 	andi	r3,r3,255
 40024e4:	18c0201c 	xori	r3,r3,128
 40024e8:	18ffe004 	addi	r3,r3,-128
 40024ec:	183ff81e 	bne	r3,zero,40024d0 <__alt_data_end+0xfc0024d0>
 40024f0:	f800283a 	ret

040024f4 <strlen>:
 40024f4:	208000cc 	andi	r2,r4,3
 40024f8:	10002026 	beq	r2,zero,400257c <strlen+0x88>
 40024fc:	20800007 	ldb	r2,0(r4)
 4002500:	10002026 	beq	r2,zero,4002584 <strlen+0x90>
 4002504:	2005883a 	mov	r2,r4
 4002508:	00000206 	br	4002514 <strlen+0x20>
 400250c:	10c00007 	ldb	r3,0(r2)
 4002510:	18001826 	beq	r3,zero,4002574 <strlen+0x80>
 4002514:	10800044 	addi	r2,r2,1
 4002518:	10c000cc 	andi	r3,r2,3
 400251c:	183ffb1e 	bne	r3,zero,400250c <__alt_data_end+0xfc00250c>
 4002520:	10c00017 	ldw	r3,0(r2)
 4002524:	01ffbff4 	movhi	r7,65279
 4002528:	39ffbfc4 	addi	r7,r7,-257
 400252c:	00ca303a 	nor	r5,zero,r3
 4002530:	01a02074 	movhi	r6,32897
 4002534:	19c7883a 	add	r3,r3,r7
 4002538:	31a02004 	addi	r6,r6,-32640
 400253c:	1946703a 	and	r3,r3,r5
 4002540:	1986703a 	and	r3,r3,r6
 4002544:	1800091e 	bne	r3,zero,400256c <strlen+0x78>
 4002548:	10800104 	addi	r2,r2,4
 400254c:	10c00017 	ldw	r3,0(r2)
 4002550:	19cb883a 	add	r5,r3,r7
 4002554:	00c6303a 	nor	r3,zero,r3
 4002558:	28c6703a 	and	r3,r5,r3
 400255c:	1986703a 	and	r3,r3,r6
 4002560:	183ff926 	beq	r3,zero,4002548 <__alt_data_end+0xfc002548>
 4002564:	00000106 	br	400256c <strlen+0x78>
 4002568:	10800044 	addi	r2,r2,1
 400256c:	10c00007 	ldb	r3,0(r2)
 4002570:	183ffd1e 	bne	r3,zero,4002568 <__alt_data_end+0xfc002568>
 4002574:	1105c83a 	sub	r2,r2,r4
 4002578:	f800283a 	ret
 400257c:	2005883a 	mov	r2,r4
 4002580:	003fe706 	br	4002520 <__alt_data_end+0xfc002520>
 4002584:	0005883a 	mov	r2,zero
 4002588:	f800283a 	ret

0400258c <_strtol_r>:
 400258c:	00810074 	movhi	r2,1025
 4002590:	defff404 	addi	sp,sp,-48
 4002594:	1088c804 	addi	r2,r2,8992
 4002598:	dd400715 	stw	r21,28(sp)
 400259c:	15400017 	ldw	r21,0(r2)
 40025a0:	dd800815 	stw	r22,32(sp)
 40025a4:	dd000615 	stw	r20,24(sp)
 40025a8:	dcc00515 	stw	r19,20(sp)
 40025ac:	d9000015 	stw	r4,0(sp)
 40025b0:	dfc00b15 	stw	ra,44(sp)
 40025b4:	df000a15 	stw	fp,40(sp)
 40025b8:	ddc00915 	stw	r23,36(sp)
 40025bc:	dc800415 	stw	r18,16(sp)
 40025c0:	dc400315 	stw	r17,12(sp)
 40025c4:	dc000215 	stw	r16,8(sp)
 40025c8:	2829883a 	mov	r20,r5
 40025cc:	3027883a 	mov	r19,r6
 40025d0:	382d883a 	mov	r22,r7
 40025d4:	2809883a 	mov	r4,r5
 40025d8:	24000003 	ldbu	r16,0(r4)
 40025dc:	24400044 	addi	r17,r4,1
 40025e0:	2007883a 	mov	r3,r4
 40025e4:	ac05883a 	add	r2,r21,r16
 40025e8:	10800043 	ldbu	r2,1(r2)
 40025ec:	8809883a 	mov	r4,r17
 40025f0:	1080020c 	andi	r2,r2,8
 40025f4:	103ff81e 	bne	r2,zero,40025d8 <__alt_data_end+0xfc0025d8>
 40025f8:	00800b44 	movi	r2,45
 40025fc:	80805826 	beq	r16,r2,4002760 <_strtol_r+0x1d4>
 4002600:	00800ac4 	movi	r2,43
 4002604:	80805a26 	beq	r16,r2,4002770 <_strtol_r+0x1e4>
 4002608:	0039883a 	mov	fp,zero
 400260c:	b0004426 	beq	r22,zero,4002720 <_strtol_r+0x194>
 4002610:	00800404 	movi	r2,16
 4002614:	b0806026 	beq	r22,r2,4002798 <_strtol_r+0x20c>
 4002618:	b02f883a 	mov	r23,r22
 400261c:	00a00034 	movhi	r2,32768
 4002620:	e025003a 	cmpeq	r18,fp,zero
 4002624:	14a5c83a 	sub	r18,r2,r18
 4002628:	b80b883a 	mov	r5,r23
 400262c:	9009883a 	mov	r4,r18
 4002630:	400afc00 	call	400afc0 <__umodsi3>
 4002634:	b80b883a 	mov	r5,r23
 4002638:	9009883a 	mov	r4,r18
 400263c:	d8800115 	stw	r2,4(sp)
 4002640:	400af5c0 	call	400af5c <__udivsi3>
 4002644:	ac07883a 	add	r3,r21,r16
 4002648:	18c00043 	ldbu	r3,1(r3)
 400264c:	880b883a 	mov	r5,r17
 4002650:	000d883a 	mov	r6,zero
 4002654:	1a00010c 	andi	r8,r3,4
 4002658:	0009883a 	mov	r4,zero
 400265c:	02800044 	movi	r10,1
 4002660:	027fffc4 	movi	r9,-1
 4002664:	d9c00117 	ldw	r7,4(sp)
 4002668:	40000e26 	beq	r8,zero,40026a4 <_strtol_r+0x118>
 400266c:	843ff404 	addi	r16,r16,-48
 4002670:	8580120e 	bge	r16,r22,40026bc <_strtol_r+0x130>
 4002674:	32400526 	beq	r6,r9,400268c <_strtol_r+0x100>
 4002678:	11002536 	bltu	r2,r4,4002710 <_strtol_r+0x184>
 400267c:	20802326 	beq	r4,r2,400270c <_strtol_r+0x180>
 4002680:	25c9383a 	mul	r4,r4,r23
 4002684:	01800044 	movi	r6,1
 4002688:	8109883a 	add	r4,r16,r4
 400268c:	2c000003 	ldbu	r16,0(r5)
 4002690:	29400044 	addi	r5,r5,1
 4002694:	ac07883a 	add	r3,r21,r16
 4002698:	18c00043 	ldbu	r3,1(r3)
 400269c:	1a00010c 	andi	r8,r3,4
 40026a0:	403ff21e 	bne	r8,zero,400266c <__alt_data_end+0xfc00266c>
 40026a4:	18c000cc 	andi	r3,r3,3
 40026a8:	18000426 	beq	r3,zero,40026bc <_strtol_r+0x130>
 40026ac:	1a801a26 	beq	r3,r10,4002718 <_strtol_r+0x18c>
 40026b0:	00c015c4 	movi	r3,87
 40026b4:	80e1c83a 	sub	r16,r16,r3
 40026b8:	85bfee16 	blt	r16,r22,4002674 <__alt_data_end+0xfc002674>
 40026bc:	00bfffc4 	movi	r2,-1
 40026c0:	30801e26 	beq	r6,r2,400273c <_strtol_r+0x1b0>
 40026c4:	e0001b1e 	bne	fp,zero,4002734 <_strtol_r+0x1a8>
 40026c8:	2005883a 	mov	r2,r4
 40026cc:	98000326 	beq	r19,zero,40026dc <_strtol_r+0x150>
 40026d0:	3000211e 	bne	r6,zero,4002758 <_strtol_r+0x1cc>
 40026d4:	a00b883a 	mov	r5,r20
 40026d8:	99400015 	stw	r5,0(r19)
 40026dc:	dfc00b17 	ldw	ra,44(sp)
 40026e0:	df000a17 	ldw	fp,40(sp)
 40026e4:	ddc00917 	ldw	r23,36(sp)
 40026e8:	dd800817 	ldw	r22,32(sp)
 40026ec:	dd400717 	ldw	r21,28(sp)
 40026f0:	dd000617 	ldw	r20,24(sp)
 40026f4:	dcc00517 	ldw	r19,20(sp)
 40026f8:	dc800417 	ldw	r18,16(sp)
 40026fc:	dc400317 	ldw	r17,12(sp)
 4002700:	dc000217 	ldw	r16,8(sp)
 4002704:	dec00c04 	addi	sp,sp,48
 4002708:	f800283a 	ret
 400270c:	3c3fdc0e 	bge	r7,r16,4002680 <__alt_data_end+0xfc002680>
 4002710:	01bfffc4 	movi	r6,-1
 4002714:	003fdd06 	br	400268c <__alt_data_end+0xfc00268c>
 4002718:	00c00dc4 	movi	r3,55
 400271c:	003fe506 	br	40026b4 <__alt_data_end+0xfc0026b4>
 4002720:	00800c04 	movi	r2,48
 4002724:	80801626 	beq	r16,r2,4002780 <_strtol_r+0x1f4>
 4002728:	05800284 	movi	r22,10
 400272c:	b02f883a 	mov	r23,r22
 4002730:	003fba06 	br	400261c <__alt_data_end+0xfc00261c>
 4002734:	0109c83a 	sub	r4,zero,r4
 4002738:	003fe306 	br	40026c8 <__alt_data_end+0xfc0026c8>
 400273c:	d9000017 	ldw	r4,0(sp)
 4002740:	00c00884 	movi	r3,34
 4002744:	e005003a 	cmpeq	r2,fp,zero
 4002748:	20c00015 	stw	r3,0(r4)
 400274c:	00e00034 	movhi	r3,32768
 4002750:	1885c83a 	sub	r2,r3,r2
 4002754:	983fe126 	beq	r19,zero,40026dc <__alt_data_end+0xfc0026dc>
 4002758:	297fffc4 	addi	r5,r5,-1
 400275c:	003fde06 	br	40026d8 <__alt_data_end+0xfc0026d8>
 4002760:	1c400084 	addi	r17,r3,2
 4002764:	1c000043 	ldbu	r16,1(r3)
 4002768:	07000044 	movi	fp,1
 400276c:	003fa706 	br	400260c <__alt_data_end+0xfc00260c>
 4002770:	1c400084 	addi	r17,r3,2
 4002774:	1c000043 	ldbu	r16,1(r3)
 4002778:	0039883a 	mov	fp,zero
 400277c:	003fa306 	br	400260c <__alt_data_end+0xfc00260c>
 4002780:	88800003 	ldbu	r2,0(r17)
 4002784:	00c01604 	movi	r3,88
 4002788:	108037cc 	andi	r2,r2,223
 400278c:	10c00826 	beq	r2,r3,40027b0 <_strtol_r+0x224>
 4002790:	05800204 	movi	r22,8
 4002794:	003fa006 	br	4002618 <__alt_data_end+0xfc002618>
 4002798:	00800c04 	movi	r2,48
 400279c:	80bf9e1e 	bne	r16,r2,4002618 <__alt_data_end+0xfc002618>
 40027a0:	88800003 	ldbu	r2,0(r17)
 40027a4:	00c01604 	movi	r3,88
 40027a8:	108037cc 	andi	r2,r2,223
 40027ac:	10ff9a1e 	bne	r2,r3,4002618 <__alt_data_end+0xfc002618>
 40027b0:	05c00404 	movi	r23,16
 40027b4:	8c000043 	ldbu	r16,1(r17)
 40027b8:	b82d883a 	mov	r22,r23
 40027bc:	8c400084 	addi	r17,r17,2
 40027c0:	003f9606 	br	400261c <__alt_data_end+0xfc00261c>

040027c4 <strtol>:
 40027c4:	00810074 	movhi	r2,1025
 40027c8:	1088c504 	addi	r2,r2,8980
 40027cc:	300f883a 	mov	r7,r6
 40027d0:	280d883a 	mov	r6,r5
 40027d4:	200b883a 	mov	r5,r4
 40027d8:	11000017 	ldw	r4,0(r2)
 40027dc:	400258c1 	jmpi	400258c <_strtol_r>

040027e0 <___vfprintf_internal_r>:
 40027e0:	deffb804 	addi	sp,sp,-288
 40027e4:	dfc04715 	stw	ra,284(sp)
 40027e8:	ddc04515 	stw	r23,276(sp)
 40027ec:	dd404315 	stw	r21,268(sp)
 40027f0:	d9002c15 	stw	r4,176(sp)
 40027f4:	282f883a 	mov	r23,r5
 40027f8:	302b883a 	mov	r21,r6
 40027fc:	d9c02d15 	stw	r7,180(sp)
 4002800:	df004615 	stw	fp,280(sp)
 4002804:	dd804415 	stw	r22,272(sp)
 4002808:	dd004215 	stw	r20,264(sp)
 400280c:	dcc04115 	stw	r19,260(sp)
 4002810:	dc804015 	stw	r18,256(sp)
 4002814:	dc403f15 	stw	r17,252(sp)
 4002818:	dc003e15 	stw	r16,248(sp)
 400281c:	40065ec0 	call	40065ec <_localeconv_r>
 4002820:	10800017 	ldw	r2,0(r2)
 4002824:	1009883a 	mov	r4,r2
 4002828:	d8803415 	stw	r2,208(sp)
 400282c:	40024f40 	call	40024f4 <strlen>
 4002830:	d8803715 	stw	r2,220(sp)
 4002834:	d8802c17 	ldw	r2,176(sp)
 4002838:	10000226 	beq	r2,zero,4002844 <___vfprintf_internal_r+0x64>
 400283c:	10800e17 	ldw	r2,56(r2)
 4002840:	1000f926 	beq	r2,zero,4002c28 <___vfprintf_internal_r+0x448>
 4002844:	b880030b 	ldhu	r2,12(r23)
 4002848:	10c8000c 	andi	r3,r2,8192
 400284c:	1800061e 	bne	r3,zero,4002868 <___vfprintf_internal_r+0x88>
 4002850:	b9001917 	ldw	r4,100(r23)
 4002854:	00f7ffc4 	movi	r3,-8193
 4002858:	10880014 	ori	r2,r2,8192
 400285c:	20c6703a 	and	r3,r4,r3
 4002860:	b880030d 	sth	r2,12(r23)
 4002864:	b8c01915 	stw	r3,100(r23)
 4002868:	10c0020c 	andi	r3,r2,8
 400286c:	1800c126 	beq	r3,zero,4002b74 <___vfprintf_internal_r+0x394>
 4002870:	b8c00417 	ldw	r3,16(r23)
 4002874:	1800bf26 	beq	r3,zero,4002b74 <___vfprintf_internal_r+0x394>
 4002878:	1080068c 	andi	r2,r2,26
 400287c:	00c00284 	movi	r3,10
 4002880:	10c0c426 	beq	r2,r3,4002b94 <___vfprintf_internal_r+0x3b4>
 4002884:	d8c00404 	addi	r3,sp,16
 4002888:	05010074 	movhi	r20,1025
 400288c:	d9001e04 	addi	r4,sp,120
 4002890:	a500bc84 	addi	r20,r20,754
 4002894:	d8c01e15 	stw	r3,120(sp)
 4002898:	d8002015 	stw	zero,128(sp)
 400289c:	d8001f15 	stw	zero,124(sp)
 40028a0:	d8003315 	stw	zero,204(sp)
 40028a4:	d8003615 	stw	zero,216(sp)
 40028a8:	d8003815 	stw	zero,224(sp)
 40028ac:	1811883a 	mov	r8,r3
 40028b0:	d8003915 	stw	zero,228(sp)
 40028b4:	d8003a15 	stw	zero,232(sp)
 40028b8:	d8002f15 	stw	zero,188(sp)
 40028bc:	d9002815 	stw	r4,160(sp)
 40028c0:	a8800007 	ldb	r2,0(r21)
 40028c4:	10027b26 	beq	r2,zero,40032b4 <___vfprintf_internal_r+0xad4>
 40028c8:	00c00944 	movi	r3,37
 40028cc:	a821883a 	mov	r16,r21
 40028d0:	10c0021e 	bne	r2,r3,40028dc <___vfprintf_internal_r+0xfc>
 40028d4:	00001406 	br	4002928 <___vfprintf_internal_r+0x148>
 40028d8:	10c00326 	beq	r2,r3,40028e8 <___vfprintf_internal_r+0x108>
 40028dc:	84000044 	addi	r16,r16,1
 40028e0:	80800007 	ldb	r2,0(r16)
 40028e4:	103ffc1e 	bne	r2,zero,40028d8 <__alt_data_end+0xfc0028d8>
 40028e8:	8563c83a 	sub	r17,r16,r21
 40028ec:	88000e26 	beq	r17,zero,4002928 <___vfprintf_internal_r+0x148>
 40028f0:	d8c02017 	ldw	r3,128(sp)
 40028f4:	d8801f17 	ldw	r2,124(sp)
 40028f8:	45400015 	stw	r21,0(r8)
 40028fc:	1c47883a 	add	r3,r3,r17
 4002900:	10800044 	addi	r2,r2,1
 4002904:	d8c02015 	stw	r3,128(sp)
 4002908:	44400115 	stw	r17,4(r8)
 400290c:	d8801f15 	stw	r2,124(sp)
 4002910:	00c001c4 	movi	r3,7
 4002914:	1880a716 	blt	r3,r2,4002bb4 <___vfprintf_internal_r+0x3d4>
 4002918:	42000204 	addi	r8,r8,8
 400291c:	d9402f17 	ldw	r5,188(sp)
 4002920:	2c4b883a 	add	r5,r5,r17
 4002924:	d9402f15 	stw	r5,188(sp)
 4002928:	80800007 	ldb	r2,0(r16)
 400292c:	1000a826 	beq	r2,zero,4002bd0 <___vfprintf_internal_r+0x3f0>
 4002930:	84400047 	ldb	r17,1(r16)
 4002934:	00bfffc4 	movi	r2,-1
 4002938:	85400044 	addi	r21,r16,1
 400293c:	d8002785 	stb	zero,158(sp)
 4002940:	0007883a 	mov	r3,zero
 4002944:	000f883a 	mov	r7,zero
 4002948:	d8802915 	stw	r2,164(sp)
 400294c:	d8003115 	stw	zero,196(sp)
 4002950:	0025883a 	mov	r18,zero
 4002954:	01401604 	movi	r5,88
 4002958:	01800244 	movi	r6,9
 400295c:	02800a84 	movi	r10,42
 4002960:	02401b04 	movi	r9,108
 4002964:	ad400044 	addi	r21,r21,1
 4002968:	88bff804 	addi	r2,r17,-32
 400296c:	28830436 	bltu	r5,r2,4003580 <___vfprintf_internal_r+0xda0>
 4002970:	100490ba 	slli	r2,r2,2
 4002974:	01010034 	movhi	r4,1024
 4002978:	210a6204 	addi	r4,r4,10632
 400297c:	1105883a 	add	r2,r2,r4
 4002980:	10800017 	ldw	r2,0(r2)
 4002984:	1000683a 	jmp	r2
 4002988:	040034a0 	cmpeqi	r16,zero,210
 400298c:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002990:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002994:	040034c0 	call	40034c <__alt_mem_sdram-0x3bffcb4>
 4002998:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 400299c:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 40029a0:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 40029a4:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 40029a8:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 40029ac:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 40029b0:	04002c34 	movhi	r16,176
 40029b4:	040033dc 	xori	r16,zero,207
 40029b8:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 40029bc:	04002afc 	xorhi	r16,zero,171
 40029c0:	04002c5c 	xori	r16,zero,177
 40029c4:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 40029c8:	04002c9c 	xori	r16,zero,178
 40029cc:	04002ca8 	cmpgeui	r16,zero,178
 40029d0:	04002ca8 	cmpgeui	r16,zero,178
 40029d4:	04002ca8 	cmpgeui	r16,zero,178
 40029d8:	04002ca8 	cmpgeui	r16,zero,178
 40029dc:	04002ca8 	cmpgeui	r16,zero,178
 40029e0:	04002ca8 	cmpgeui	r16,zero,178
 40029e4:	04002ca8 	cmpgeui	r16,zero,178
 40029e8:	04002ca8 	cmpgeui	r16,zero,178
 40029ec:	04002ca8 	cmpgeui	r16,zero,178
 40029f0:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 40029f4:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 40029f8:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 40029fc:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a00:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a04:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a08:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a0c:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a10:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a14:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a18:	04002cdc 	xori	r16,zero,179
 4002a1c:	04002d98 	cmpnei	r16,zero,182
 4002a20:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a24:	04002d98 	cmpnei	r16,zero,182
 4002a28:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a2c:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a30:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a34:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a38:	04002e38 	rdprs	r16,zero,184
 4002a3c:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a40:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a44:	04002e44 	movi	r16,185
 4002a48:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a4c:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a50:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a54:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a58:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a5c:	040032bc 	xorhi	r16,zero,202
 4002a60:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a64:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a68:	0400331c 	xori	r16,zero,204
 4002a6c:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a70:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a74:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a78:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a7c:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a80:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a84:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a88:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a8c:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a90:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002a94:	0400352c 	andhi	r16,zero,212
 4002a98:	040034cc 	andi	r16,zero,211
 4002a9c:	04002d98 	cmpnei	r16,zero,182
 4002aa0:	04002d98 	cmpnei	r16,zero,182
 4002aa4:	04002d98 	cmpnei	r16,zero,182
 4002aa8:	040034dc 	xori	r16,zero,211
 4002aac:	040034cc 	andi	r16,zero,211
 4002ab0:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002ab4:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002ab8:	040034e8 	cmpgeui	r16,zero,211
 4002abc:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002ac0:	040034f8 	rdprs	r16,zero,211
 4002ac4:	040033cc 	andi	r16,zero,207
 4002ac8:	04002b08 	cmpgei	r16,zero,172
 4002acc:	040033ec 	andhi	r16,zero,207
 4002ad0:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002ad4:	040033f8 	rdprs	r16,zero,207
 4002ad8:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002adc:	04003454 	movui	r16,209
 4002ae0:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002ae4:	04003580 	call	400358 <__alt_mem_sdram-0x3bffca8>
 4002ae8:	04003464 	muli	r16,zero,209
 4002aec:	d9003117 	ldw	r4,196(sp)
 4002af0:	d8802d15 	stw	r2,180(sp)
 4002af4:	0109c83a 	sub	r4,zero,r4
 4002af8:	d9003115 	stw	r4,196(sp)
 4002afc:	94800114 	ori	r18,r18,4
 4002b00:	ac400007 	ldb	r17,0(r21)
 4002b04:	003f9706 	br	4002964 <__alt_data_end+0xfc002964>
 4002b08:	00800c04 	movi	r2,48
 4002b0c:	d9002d17 	ldw	r4,180(sp)
 4002b10:	d9402917 	ldw	r5,164(sp)
 4002b14:	d8802705 	stb	r2,156(sp)
 4002b18:	00801e04 	movi	r2,120
 4002b1c:	d8802745 	stb	r2,157(sp)
 4002b20:	d8002785 	stb	zero,158(sp)
 4002b24:	20c00104 	addi	r3,r4,4
 4002b28:	24c00017 	ldw	r19,0(r4)
 4002b2c:	002d883a 	mov	r22,zero
 4002b30:	90800094 	ori	r2,r18,2
 4002b34:	28029a16 	blt	r5,zero,40035a0 <___vfprintf_internal_r+0xdc0>
 4002b38:	00bfdfc4 	movi	r2,-129
 4002b3c:	90a4703a 	and	r18,r18,r2
 4002b40:	d8c02d15 	stw	r3,180(sp)
 4002b44:	94800094 	ori	r18,r18,2
 4002b48:	9802871e 	bne	r19,zero,4003568 <___vfprintf_internal_r+0xd88>
 4002b4c:	00810074 	movhi	r2,1025
 4002b50:	1080b504 	addi	r2,r2,724
 4002b54:	d8803915 	stw	r2,228(sp)
 4002b58:	04401e04 	movi	r17,120
 4002b5c:	d8802917 	ldw	r2,164(sp)
 4002b60:	0039883a 	mov	fp,zero
 4002b64:	1001e926 	beq	r2,zero,400330c <___vfprintf_internal_r+0xb2c>
 4002b68:	0027883a 	mov	r19,zero
 4002b6c:	002d883a 	mov	r22,zero
 4002b70:	00020506 	br	4003388 <___vfprintf_internal_r+0xba8>
 4002b74:	d9002c17 	ldw	r4,176(sp)
 4002b78:	b80b883a 	mov	r5,r23
 4002b7c:	4004b100 	call	4004b10 <__swsetup_r>
 4002b80:	1005ac1e 	bne	r2,zero,4004234 <___vfprintf_internal_r+0x1a54>
 4002b84:	b880030b 	ldhu	r2,12(r23)
 4002b88:	00c00284 	movi	r3,10
 4002b8c:	1080068c 	andi	r2,r2,26
 4002b90:	10ff3c1e 	bne	r2,r3,4002884 <__alt_data_end+0xfc002884>
 4002b94:	b880038f 	ldh	r2,14(r23)
 4002b98:	103f3a16 	blt	r2,zero,4002884 <__alt_data_end+0xfc002884>
 4002b9c:	d9c02d17 	ldw	r7,180(sp)
 4002ba0:	d9002c17 	ldw	r4,176(sp)
 4002ba4:	a80d883a 	mov	r6,r21
 4002ba8:	b80b883a 	mov	r5,r23
 4002bac:	40049f40 	call	40049f4 <__sbprintf>
 4002bb0:	00001106 	br	4002bf8 <___vfprintf_internal_r+0x418>
 4002bb4:	d9002c17 	ldw	r4,176(sp)
 4002bb8:	d9801e04 	addi	r6,sp,120
 4002bbc:	b80b883a 	mov	r5,r23
 4002bc0:	4007c300 	call	4007c30 <__sprint_r>
 4002bc4:	1000081e 	bne	r2,zero,4002be8 <___vfprintf_internal_r+0x408>
 4002bc8:	da000404 	addi	r8,sp,16
 4002bcc:	003f5306 	br	400291c <__alt_data_end+0xfc00291c>
 4002bd0:	d8802017 	ldw	r2,128(sp)
 4002bd4:	10000426 	beq	r2,zero,4002be8 <___vfprintf_internal_r+0x408>
 4002bd8:	d9002c17 	ldw	r4,176(sp)
 4002bdc:	d9801e04 	addi	r6,sp,120
 4002be0:	b80b883a 	mov	r5,r23
 4002be4:	4007c300 	call	4007c30 <__sprint_r>
 4002be8:	b880030b 	ldhu	r2,12(r23)
 4002bec:	1080100c 	andi	r2,r2,64
 4002bf0:	1005901e 	bne	r2,zero,4004234 <___vfprintf_internal_r+0x1a54>
 4002bf4:	d8802f17 	ldw	r2,188(sp)
 4002bf8:	dfc04717 	ldw	ra,284(sp)
 4002bfc:	df004617 	ldw	fp,280(sp)
 4002c00:	ddc04517 	ldw	r23,276(sp)
 4002c04:	dd804417 	ldw	r22,272(sp)
 4002c08:	dd404317 	ldw	r21,268(sp)
 4002c0c:	dd004217 	ldw	r20,264(sp)
 4002c10:	dcc04117 	ldw	r19,260(sp)
 4002c14:	dc804017 	ldw	r18,256(sp)
 4002c18:	dc403f17 	ldw	r17,252(sp)
 4002c1c:	dc003e17 	ldw	r16,248(sp)
 4002c20:	dec04804 	addi	sp,sp,288
 4002c24:	f800283a 	ret
 4002c28:	d9002c17 	ldw	r4,176(sp)
 4002c2c:	400124c0 	call	400124c <__sinit>
 4002c30:	003f0406 	br	4002844 <__alt_data_end+0xfc002844>
 4002c34:	d8802d17 	ldw	r2,180(sp)
 4002c38:	d9002d17 	ldw	r4,180(sp)
 4002c3c:	10800017 	ldw	r2,0(r2)
 4002c40:	d8803115 	stw	r2,196(sp)
 4002c44:	20800104 	addi	r2,r4,4
 4002c48:	d9003117 	ldw	r4,196(sp)
 4002c4c:	203fa716 	blt	r4,zero,4002aec <__alt_data_end+0xfc002aec>
 4002c50:	d8802d15 	stw	r2,180(sp)
 4002c54:	ac400007 	ldb	r17,0(r21)
 4002c58:	003f4206 	br	4002964 <__alt_data_end+0xfc002964>
 4002c5c:	ac400007 	ldb	r17,0(r21)
 4002c60:	aac00044 	addi	r11,r21,1
 4002c64:	8a872826 	beq	r17,r10,4004908 <___vfprintf_internal_r+0x2128>
 4002c68:	88bff404 	addi	r2,r17,-48
 4002c6c:	0009883a 	mov	r4,zero
 4002c70:	30867d36 	bltu	r6,r2,4004668 <___vfprintf_internal_r+0x1e88>
 4002c74:	5c400007 	ldb	r17,0(r11)
 4002c78:	210002a4 	muli	r4,r4,10
 4002c7c:	5d400044 	addi	r21,r11,1
 4002c80:	a817883a 	mov	r11,r21
 4002c84:	2089883a 	add	r4,r4,r2
 4002c88:	88bff404 	addi	r2,r17,-48
 4002c8c:	30bff92e 	bgeu	r6,r2,4002c74 <__alt_data_end+0xfc002c74>
 4002c90:	2005c916 	blt	r4,zero,40043b8 <___vfprintf_internal_r+0x1bd8>
 4002c94:	d9002915 	stw	r4,164(sp)
 4002c98:	003f3306 	br	4002968 <__alt_data_end+0xfc002968>
 4002c9c:	94802014 	ori	r18,r18,128
 4002ca0:	ac400007 	ldb	r17,0(r21)
 4002ca4:	003f2f06 	br	4002964 <__alt_data_end+0xfc002964>
 4002ca8:	a809883a 	mov	r4,r21
 4002cac:	d8003115 	stw	zero,196(sp)
 4002cb0:	88bff404 	addi	r2,r17,-48
 4002cb4:	0017883a 	mov	r11,zero
 4002cb8:	24400007 	ldb	r17,0(r4)
 4002cbc:	5ac002a4 	muli	r11,r11,10
 4002cc0:	ad400044 	addi	r21,r21,1
 4002cc4:	a809883a 	mov	r4,r21
 4002cc8:	12d7883a 	add	r11,r2,r11
 4002ccc:	88bff404 	addi	r2,r17,-48
 4002cd0:	30bff92e 	bgeu	r6,r2,4002cb8 <__alt_data_end+0xfc002cb8>
 4002cd4:	dac03115 	stw	r11,196(sp)
 4002cd8:	003f2306 	br	4002968 <__alt_data_end+0xfc002968>
 4002cdc:	18c03fcc 	andi	r3,r3,255
 4002ce0:	18072b1e 	bne	r3,zero,4004990 <___vfprintf_internal_r+0x21b0>
 4002ce4:	94800414 	ori	r18,r18,16
 4002ce8:	9080080c 	andi	r2,r18,32
 4002cec:	10037b26 	beq	r2,zero,4003adc <___vfprintf_internal_r+0x12fc>
 4002cf0:	d9402d17 	ldw	r5,180(sp)
 4002cf4:	28800117 	ldw	r2,4(r5)
 4002cf8:	2cc00017 	ldw	r19,0(r5)
 4002cfc:	29400204 	addi	r5,r5,8
 4002d00:	d9402d15 	stw	r5,180(sp)
 4002d04:	102d883a 	mov	r22,r2
 4002d08:	10044b16 	blt	r2,zero,4003e38 <___vfprintf_internal_r+0x1658>
 4002d0c:	d9402917 	ldw	r5,164(sp)
 4002d10:	df002783 	ldbu	fp,158(sp)
 4002d14:	2803bc16 	blt	r5,zero,4003c08 <___vfprintf_internal_r+0x1428>
 4002d18:	00ffdfc4 	movi	r3,-129
 4002d1c:	9d84b03a 	or	r2,r19,r22
 4002d20:	90e4703a 	and	r18,r18,r3
 4002d24:	10017726 	beq	r2,zero,4003304 <___vfprintf_internal_r+0xb24>
 4002d28:	b0038326 	beq	r22,zero,4003b38 <___vfprintf_internal_r+0x1358>
 4002d2c:	dc402a15 	stw	r17,168(sp)
 4002d30:	dc001e04 	addi	r16,sp,120
 4002d34:	b023883a 	mov	r17,r22
 4002d38:	402d883a 	mov	r22,r8
 4002d3c:	9809883a 	mov	r4,r19
 4002d40:	880b883a 	mov	r5,r17
 4002d44:	01800284 	movi	r6,10
 4002d48:	000f883a 	mov	r7,zero
 4002d4c:	400a92c0 	call	400a92c <__umoddi3>
 4002d50:	10800c04 	addi	r2,r2,48
 4002d54:	843fffc4 	addi	r16,r16,-1
 4002d58:	9809883a 	mov	r4,r19
 4002d5c:	880b883a 	mov	r5,r17
 4002d60:	80800005 	stb	r2,0(r16)
 4002d64:	01800284 	movi	r6,10
 4002d68:	000f883a 	mov	r7,zero
 4002d6c:	400a3b40 	call	400a3b4 <__udivdi3>
 4002d70:	1027883a 	mov	r19,r2
 4002d74:	10c4b03a 	or	r2,r2,r3
 4002d78:	1823883a 	mov	r17,r3
 4002d7c:	103fef1e 	bne	r2,zero,4002d3c <__alt_data_end+0xfc002d3c>
 4002d80:	d8c02817 	ldw	r3,160(sp)
 4002d84:	dc402a17 	ldw	r17,168(sp)
 4002d88:	b011883a 	mov	r8,r22
 4002d8c:	1c07c83a 	sub	r3,r3,r16
 4002d90:	d8c02e15 	stw	r3,184(sp)
 4002d94:	00005906 	br	4002efc <___vfprintf_internal_r+0x71c>
 4002d98:	18c03fcc 	andi	r3,r3,255
 4002d9c:	1806fa1e 	bne	r3,zero,4004988 <___vfprintf_internal_r+0x21a8>
 4002da0:	9080020c 	andi	r2,r18,8
 4002da4:	10048a26 	beq	r2,zero,4003fd0 <___vfprintf_internal_r+0x17f0>
 4002da8:	d8c02d17 	ldw	r3,180(sp)
 4002dac:	d9002d17 	ldw	r4,180(sp)
 4002db0:	d9402d17 	ldw	r5,180(sp)
 4002db4:	18c00017 	ldw	r3,0(r3)
 4002db8:	21000117 	ldw	r4,4(r4)
 4002dbc:	29400204 	addi	r5,r5,8
 4002dc0:	d8c03615 	stw	r3,216(sp)
 4002dc4:	d9003815 	stw	r4,224(sp)
 4002dc8:	d9402d15 	stw	r5,180(sp)
 4002dcc:	d9003617 	ldw	r4,216(sp)
 4002dd0:	d9403817 	ldw	r5,224(sp)
 4002dd4:	da003d15 	stw	r8,244(sp)
 4002dd8:	04000044 	movi	r16,1
 4002ddc:	4007ac00 	call	4007ac0 <__fpclassifyd>
 4002de0:	da003d17 	ldw	r8,244(sp)
 4002de4:	14041f1e 	bne	r2,r16,4003e64 <___vfprintf_internal_r+0x1684>
 4002de8:	d9003617 	ldw	r4,216(sp)
 4002dec:	d9403817 	ldw	r5,224(sp)
 4002df0:	000d883a 	mov	r6,zero
 4002df4:	000f883a 	mov	r7,zero
 4002df8:	400c3100 	call	400c310 <__ledf2>
 4002dfc:	da003d17 	ldw	r8,244(sp)
 4002e00:	1005be16 	blt	r2,zero,40044fc <___vfprintf_internal_r+0x1d1c>
 4002e04:	df002783 	ldbu	fp,158(sp)
 4002e08:	008011c4 	movi	r2,71
 4002e0c:	1445330e 	bge	r2,r17,40042dc <___vfprintf_internal_r+0x1afc>
 4002e10:	04010074 	movhi	r16,1025
 4002e14:	8400ad04 	addi	r16,r16,692
 4002e18:	00c000c4 	movi	r3,3
 4002e1c:	00bfdfc4 	movi	r2,-129
 4002e20:	d8c02a15 	stw	r3,168(sp)
 4002e24:	90a4703a 	and	r18,r18,r2
 4002e28:	d8c02e15 	stw	r3,184(sp)
 4002e2c:	d8002915 	stw	zero,164(sp)
 4002e30:	d8003215 	stw	zero,200(sp)
 4002e34:	00003706 	br	4002f14 <___vfprintf_internal_r+0x734>
 4002e38:	94800214 	ori	r18,r18,8
 4002e3c:	ac400007 	ldb	r17,0(r21)
 4002e40:	003ec806 	br	4002964 <__alt_data_end+0xfc002964>
 4002e44:	18c03fcc 	andi	r3,r3,255
 4002e48:	1806db1e 	bne	r3,zero,40049b8 <___vfprintf_internal_r+0x21d8>
 4002e4c:	94800414 	ori	r18,r18,16
 4002e50:	9080080c 	andi	r2,r18,32
 4002e54:	1002d826 	beq	r2,zero,40039b8 <___vfprintf_internal_r+0x11d8>
 4002e58:	d9402d17 	ldw	r5,180(sp)
 4002e5c:	d8c02917 	ldw	r3,164(sp)
 4002e60:	d8002785 	stb	zero,158(sp)
 4002e64:	28800204 	addi	r2,r5,8
 4002e68:	2cc00017 	ldw	r19,0(r5)
 4002e6c:	2d800117 	ldw	r22,4(r5)
 4002e70:	18048f16 	blt	r3,zero,40040b0 <___vfprintf_internal_r+0x18d0>
 4002e74:	013fdfc4 	movi	r4,-129
 4002e78:	9d86b03a 	or	r3,r19,r22
 4002e7c:	d8802d15 	stw	r2,180(sp)
 4002e80:	9124703a 	and	r18,r18,r4
 4002e84:	1802d91e 	bne	r3,zero,40039ec <___vfprintf_internal_r+0x120c>
 4002e88:	d8c02917 	ldw	r3,164(sp)
 4002e8c:	0039883a 	mov	fp,zero
 4002e90:	1805c326 	beq	r3,zero,40045a0 <___vfprintf_internal_r+0x1dc0>
 4002e94:	0027883a 	mov	r19,zero
 4002e98:	002d883a 	mov	r22,zero
 4002e9c:	dc001e04 	addi	r16,sp,120
 4002ea0:	9806d0fa 	srli	r3,r19,3
 4002ea4:	b008977a 	slli	r4,r22,29
 4002ea8:	b02cd0fa 	srli	r22,r22,3
 4002eac:	9cc001cc 	andi	r19,r19,7
 4002eb0:	98800c04 	addi	r2,r19,48
 4002eb4:	843fffc4 	addi	r16,r16,-1
 4002eb8:	20e6b03a 	or	r19,r4,r3
 4002ebc:	80800005 	stb	r2,0(r16)
 4002ec0:	9d86b03a 	or	r3,r19,r22
 4002ec4:	183ff61e 	bne	r3,zero,4002ea0 <__alt_data_end+0xfc002ea0>
 4002ec8:	90c0004c 	andi	r3,r18,1
 4002ecc:	18013b26 	beq	r3,zero,40033bc <___vfprintf_internal_r+0xbdc>
 4002ed0:	10803fcc 	andi	r2,r2,255
 4002ed4:	1080201c 	xori	r2,r2,128
 4002ed8:	10bfe004 	addi	r2,r2,-128
 4002edc:	00c00c04 	movi	r3,48
 4002ee0:	10c13626 	beq	r2,r3,40033bc <___vfprintf_internal_r+0xbdc>
 4002ee4:	80ffffc5 	stb	r3,-1(r16)
 4002ee8:	d8c02817 	ldw	r3,160(sp)
 4002eec:	80bfffc4 	addi	r2,r16,-1
 4002ef0:	1021883a 	mov	r16,r2
 4002ef4:	1887c83a 	sub	r3,r3,r2
 4002ef8:	d8c02e15 	stw	r3,184(sp)
 4002efc:	d8802e17 	ldw	r2,184(sp)
 4002f00:	d9002917 	ldw	r4,164(sp)
 4002f04:	1100010e 	bge	r2,r4,4002f0c <___vfprintf_internal_r+0x72c>
 4002f08:	2005883a 	mov	r2,r4
 4002f0c:	d8802a15 	stw	r2,168(sp)
 4002f10:	d8003215 	stw	zero,200(sp)
 4002f14:	e7003fcc 	andi	fp,fp,255
 4002f18:	e700201c 	xori	fp,fp,128
 4002f1c:	e73fe004 	addi	fp,fp,-128
 4002f20:	e0000326 	beq	fp,zero,4002f30 <___vfprintf_internal_r+0x750>
 4002f24:	d8c02a17 	ldw	r3,168(sp)
 4002f28:	18c00044 	addi	r3,r3,1
 4002f2c:	d8c02a15 	stw	r3,168(sp)
 4002f30:	90c0008c 	andi	r3,r18,2
 4002f34:	d8c02b15 	stw	r3,172(sp)
 4002f38:	18000326 	beq	r3,zero,4002f48 <___vfprintf_internal_r+0x768>
 4002f3c:	d8c02a17 	ldw	r3,168(sp)
 4002f40:	18c00084 	addi	r3,r3,2
 4002f44:	d8c02a15 	stw	r3,168(sp)
 4002f48:	90c0210c 	andi	r3,r18,132
 4002f4c:	d8c03015 	stw	r3,192(sp)
 4002f50:	1801a31e 	bne	r3,zero,40035e0 <___vfprintf_internal_r+0xe00>
 4002f54:	d9003117 	ldw	r4,196(sp)
 4002f58:	d8c02a17 	ldw	r3,168(sp)
 4002f5c:	20e7c83a 	sub	r19,r4,r3
 4002f60:	04c19f0e 	bge	zero,r19,40035e0 <___vfprintf_internal_r+0xe00>
 4002f64:	02400404 	movi	r9,16
 4002f68:	d8c02017 	ldw	r3,128(sp)
 4002f6c:	d8801f17 	ldw	r2,124(sp)
 4002f70:	4cc50d0e 	bge	r9,r19,40043a8 <___vfprintf_internal_r+0x1bc8>
 4002f74:	01410074 	movhi	r5,1025
 4002f78:	2940c084 	addi	r5,r5,770
 4002f7c:	dc403b15 	stw	r17,236(sp)
 4002f80:	d9403515 	stw	r5,212(sp)
 4002f84:	9823883a 	mov	r17,r19
 4002f88:	482d883a 	mov	r22,r9
 4002f8c:	9027883a 	mov	r19,r18
 4002f90:	070001c4 	movi	fp,7
 4002f94:	8025883a 	mov	r18,r16
 4002f98:	dc002c17 	ldw	r16,176(sp)
 4002f9c:	00000306 	br	4002fac <___vfprintf_internal_r+0x7cc>
 4002fa0:	8c7ffc04 	addi	r17,r17,-16
 4002fa4:	42000204 	addi	r8,r8,8
 4002fa8:	b440130e 	bge	r22,r17,4002ff8 <___vfprintf_internal_r+0x818>
 4002fac:	01010074 	movhi	r4,1025
 4002fb0:	18c00404 	addi	r3,r3,16
 4002fb4:	10800044 	addi	r2,r2,1
 4002fb8:	2100c084 	addi	r4,r4,770
 4002fbc:	41000015 	stw	r4,0(r8)
 4002fc0:	45800115 	stw	r22,4(r8)
 4002fc4:	d8c02015 	stw	r3,128(sp)
 4002fc8:	d8801f15 	stw	r2,124(sp)
 4002fcc:	e0bff40e 	bge	fp,r2,4002fa0 <__alt_data_end+0xfc002fa0>
 4002fd0:	d9801e04 	addi	r6,sp,120
 4002fd4:	b80b883a 	mov	r5,r23
 4002fd8:	8009883a 	mov	r4,r16
 4002fdc:	4007c300 	call	4007c30 <__sprint_r>
 4002fe0:	103f011e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4002fe4:	8c7ffc04 	addi	r17,r17,-16
 4002fe8:	d8c02017 	ldw	r3,128(sp)
 4002fec:	d8801f17 	ldw	r2,124(sp)
 4002ff0:	da000404 	addi	r8,sp,16
 4002ff4:	b47fed16 	blt	r22,r17,4002fac <__alt_data_end+0xfc002fac>
 4002ff8:	9021883a 	mov	r16,r18
 4002ffc:	9825883a 	mov	r18,r19
 4003000:	8827883a 	mov	r19,r17
 4003004:	dc403b17 	ldw	r17,236(sp)
 4003008:	d9403517 	ldw	r5,212(sp)
 400300c:	98c7883a 	add	r3,r19,r3
 4003010:	10800044 	addi	r2,r2,1
 4003014:	41400015 	stw	r5,0(r8)
 4003018:	44c00115 	stw	r19,4(r8)
 400301c:	d8c02015 	stw	r3,128(sp)
 4003020:	d8801f15 	stw	r2,124(sp)
 4003024:	010001c4 	movi	r4,7
 4003028:	2082a316 	blt	r4,r2,4003ab8 <___vfprintf_internal_r+0x12d8>
 400302c:	df002787 	ldb	fp,158(sp)
 4003030:	42000204 	addi	r8,r8,8
 4003034:	e0000c26 	beq	fp,zero,4003068 <___vfprintf_internal_r+0x888>
 4003038:	d8801f17 	ldw	r2,124(sp)
 400303c:	d9002784 	addi	r4,sp,158
 4003040:	18c00044 	addi	r3,r3,1
 4003044:	10800044 	addi	r2,r2,1
 4003048:	41000015 	stw	r4,0(r8)
 400304c:	01000044 	movi	r4,1
 4003050:	41000115 	stw	r4,4(r8)
 4003054:	d8c02015 	stw	r3,128(sp)
 4003058:	d8801f15 	stw	r2,124(sp)
 400305c:	010001c4 	movi	r4,7
 4003060:	20823c16 	blt	r4,r2,4003954 <___vfprintf_internal_r+0x1174>
 4003064:	42000204 	addi	r8,r8,8
 4003068:	d8802b17 	ldw	r2,172(sp)
 400306c:	10000c26 	beq	r2,zero,40030a0 <___vfprintf_internal_r+0x8c0>
 4003070:	d8801f17 	ldw	r2,124(sp)
 4003074:	d9002704 	addi	r4,sp,156
 4003078:	18c00084 	addi	r3,r3,2
 400307c:	10800044 	addi	r2,r2,1
 4003080:	41000015 	stw	r4,0(r8)
 4003084:	01000084 	movi	r4,2
 4003088:	41000115 	stw	r4,4(r8)
 400308c:	d8c02015 	stw	r3,128(sp)
 4003090:	d8801f15 	stw	r2,124(sp)
 4003094:	010001c4 	movi	r4,7
 4003098:	20823616 	blt	r4,r2,4003974 <___vfprintf_internal_r+0x1194>
 400309c:	42000204 	addi	r8,r8,8
 40030a0:	d9003017 	ldw	r4,192(sp)
 40030a4:	00802004 	movi	r2,128
 40030a8:	20819926 	beq	r4,r2,4003710 <___vfprintf_internal_r+0xf30>
 40030ac:	d9402917 	ldw	r5,164(sp)
 40030b0:	d8802e17 	ldw	r2,184(sp)
 40030b4:	28adc83a 	sub	r22,r5,r2
 40030b8:	0580310e 	bge	zero,r22,4003180 <___vfprintf_internal_r+0x9a0>
 40030bc:	07000404 	movi	fp,16
 40030c0:	d8801f17 	ldw	r2,124(sp)
 40030c4:	e584140e 	bge	fp,r22,4004118 <___vfprintf_internal_r+0x1938>
 40030c8:	01410074 	movhi	r5,1025
 40030cc:	2940bc84 	addi	r5,r5,754
 40030d0:	dc402915 	stw	r17,164(sp)
 40030d4:	d9402b15 	stw	r5,172(sp)
 40030d8:	b023883a 	mov	r17,r22
 40030dc:	04c001c4 	movi	r19,7
 40030e0:	a82d883a 	mov	r22,r21
 40030e4:	902b883a 	mov	r21,r18
 40030e8:	8025883a 	mov	r18,r16
 40030ec:	dc002c17 	ldw	r16,176(sp)
 40030f0:	00000306 	br	4003100 <___vfprintf_internal_r+0x920>
 40030f4:	8c7ffc04 	addi	r17,r17,-16
 40030f8:	42000204 	addi	r8,r8,8
 40030fc:	e440110e 	bge	fp,r17,4003144 <___vfprintf_internal_r+0x964>
 4003100:	18c00404 	addi	r3,r3,16
 4003104:	10800044 	addi	r2,r2,1
 4003108:	45000015 	stw	r20,0(r8)
 400310c:	47000115 	stw	fp,4(r8)
 4003110:	d8c02015 	stw	r3,128(sp)
 4003114:	d8801f15 	stw	r2,124(sp)
 4003118:	98bff60e 	bge	r19,r2,40030f4 <__alt_data_end+0xfc0030f4>
 400311c:	d9801e04 	addi	r6,sp,120
 4003120:	b80b883a 	mov	r5,r23
 4003124:	8009883a 	mov	r4,r16
 4003128:	4007c300 	call	4007c30 <__sprint_r>
 400312c:	103eae1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003130:	8c7ffc04 	addi	r17,r17,-16
 4003134:	d8c02017 	ldw	r3,128(sp)
 4003138:	d8801f17 	ldw	r2,124(sp)
 400313c:	da000404 	addi	r8,sp,16
 4003140:	e47fef16 	blt	fp,r17,4003100 <__alt_data_end+0xfc003100>
 4003144:	9021883a 	mov	r16,r18
 4003148:	a825883a 	mov	r18,r21
 400314c:	b02b883a 	mov	r21,r22
 4003150:	882d883a 	mov	r22,r17
 4003154:	dc402917 	ldw	r17,164(sp)
 4003158:	d9002b17 	ldw	r4,172(sp)
 400315c:	1d87883a 	add	r3,r3,r22
 4003160:	10800044 	addi	r2,r2,1
 4003164:	41000015 	stw	r4,0(r8)
 4003168:	45800115 	stw	r22,4(r8)
 400316c:	d8c02015 	stw	r3,128(sp)
 4003170:	d8801f15 	stw	r2,124(sp)
 4003174:	010001c4 	movi	r4,7
 4003178:	2081ee16 	blt	r4,r2,4003934 <___vfprintf_internal_r+0x1154>
 400317c:	42000204 	addi	r8,r8,8
 4003180:	9080400c 	andi	r2,r18,256
 4003184:	1001181e 	bne	r2,zero,40035e8 <___vfprintf_internal_r+0xe08>
 4003188:	d9402e17 	ldw	r5,184(sp)
 400318c:	d8801f17 	ldw	r2,124(sp)
 4003190:	44000015 	stw	r16,0(r8)
 4003194:	1947883a 	add	r3,r3,r5
 4003198:	10800044 	addi	r2,r2,1
 400319c:	41400115 	stw	r5,4(r8)
 40031a0:	d8c02015 	stw	r3,128(sp)
 40031a4:	d8801f15 	stw	r2,124(sp)
 40031a8:	010001c4 	movi	r4,7
 40031ac:	2081d316 	blt	r4,r2,40038fc <___vfprintf_internal_r+0x111c>
 40031b0:	42000204 	addi	r8,r8,8
 40031b4:	9480010c 	andi	r18,r18,4
 40031b8:	90003226 	beq	r18,zero,4003284 <___vfprintf_internal_r+0xaa4>
 40031bc:	d9403117 	ldw	r5,196(sp)
 40031c0:	d8802a17 	ldw	r2,168(sp)
 40031c4:	28a1c83a 	sub	r16,r5,r2
 40031c8:	04002e0e 	bge	zero,r16,4003284 <___vfprintf_internal_r+0xaa4>
 40031cc:	04400404 	movi	r17,16
 40031d0:	d8801f17 	ldw	r2,124(sp)
 40031d4:	8c04a20e 	bge	r17,r16,4004460 <___vfprintf_internal_r+0x1c80>
 40031d8:	01410074 	movhi	r5,1025
 40031dc:	2940c084 	addi	r5,r5,770
 40031e0:	d9403515 	stw	r5,212(sp)
 40031e4:	048001c4 	movi	r18,7
 40031e8:	dcc02c17 	ldw	r19,176(sp)
 40031ec:	00000306 	br	40031fc <___vfprintf_internal_r+0xa1c>
 40031f0:	843ffc04 	addi	r16,r16,-16
 40031f4:	42000204 	addi	r8,r8,8
 40031f8:	8c00130e 	bge	r17,r16,4003248 <___vfprintf_internal_r+0xa68>
 40031fc:	01010074 	movhi	r4,1025
 4003200:	18c00404 	addi	r3,r3,16
 4003204:	10800044 	addi	r2,r2,1
 4003208:	2100c084 	addi	r4,r4,770
 400320c:	41000015 	stw	r4,0(r8)
 4003210:	44400115 	stw	r17,4(r8)
 4003214:	d8c02015 	stw	r3,128(sp)
 4003218:	d8801f15 	stw	r2,124(sp)
 400321c:	90bff40e 	bge	r18,r2,40031f0 <__alt_data_end+0xfc0031f0>
 4003220:	d9801e04 	addi	r6,sp,120
 4003224:	b80b883a 	mov	r5,r23
 4003228:	9809883a 	mov	r4,r19
 400322c:	4007c300 	call	4007c30 <__sprint_r>
 4003230:	103e6d1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003234:	843ffc04 	addi	r16,r16,-16
 4003238:	d8c02017 	ldw	r3,128(sp)
 400323c:	d8801f17 	ldw	r2,124(sp)
 4003240:	da000404 	addi	r8,sp,16
 4003244:	8c3fed16 	blt	r17,r16,40031fc <__alt_data_end+0xfc0031fc>
 4003248:	d9403517 	ldw	r5,212(sp)
 400324c:	1c07883a 	add	r3,r3,r16
 4003250:	10800044 	addi	r2,r2,1
 4003254:	41400015 	stw	r5,0(r8)
 4003258:	44000115 	stw	r16,4(r8)
 400325c:	d8c02015 	stw	r3,128(sp)
 4003260:	d8801f15 	stw	r2,124(sp)
 4003264:	010001c4 	movi	r4,7
 4003268:	2080060e 	bge	r4,r2,4003284 <___vfprintf_internal_r+0xaa4>
 400326c:	d9002c17 	ldw	r4,176(sp)
 4003270:	d9801e04 	addi	r6,sp,120
 4003274:	b80b883a 	mov	r5,r23
 4003278:	4007c300 	call	4007c30 <__sprint_r>
 400327c:	103e5a1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003280:	d8c02017 	ldw	r3,128(sp)
 4003284:	d8803117 	ldw	r2,196(sp)
 4003288:	d9002a17 	ldw	r4,168(sp)
 400328c:	1100010e 	bge	r2,r4,4003294 <___vfprintf_internal_r+0xab4>
 4003290:	2005883a 	mov	r2,r4
 4003294:	d9402f17 	ldw	r5,188(sp)
 4003298:	288b883a 	add	r5,r5,r2
 400329c:	d9402f15 	stw	r5,188(sp)
 40032a0:	18019e1e 	bne	r3,zero,400391c <___vfprintf_internal_r+0x113c>
 40032a4:	a8800007 	ldb	r2,0(r21)
 40032a8:	d8001f15 	stw	zero,124(sp)
 40032ac:	da000404 	addi	r8,sp,16
 40032b0:	103d851e 	bne	r2,zero,40028c8 <__alt_data_end+0xfc0028c8>
 40032b4:	a821883a 	mov	r16,r21
 40032b8:	003d9b06 	br	4002928 <__alt_data_end+0xfc002928>
 40032bc:	18c03fcc 	andi	r3,r3,255
 40032c0:	1805c11e 	bne	r3,zero,40049c8 <___vfprintf_internal_r+0x21e8>
 40032c4:	94800414 	ori	r18,r18,16
 40032c8:	9080080c 	andi	r2,r18,32
 40032cc:	10020c26 	beq	r2,zero,4003b00 <___vfprintf_internal_r+0x1320>
 40032d0:	d8802d17 	ldw	r2,180(sp)
 40032d4:	d9002917 	ldw	r4,164(sp)
 40032d8:	d8002785 	stb	zero,158(sp)
 40032dc:	10c00204 	addi	r3,r2,8
 40032e0:	14c00017 	ldw	r19,0(r2)
 40032e4:	15800117 	ldw	r22,4(r2)
 40032e8:	20040f16 	blt	r4,zero,4004328 <___vfprintf_internal_r+0x1b48>
 40032ec:	013fdfc4 	movi	r4,-129
 40032f0:	9d84b03a 	or	r2,r19,r22
 40032f4:	d8c02d15 	stw	r3,180(sp)
 40032f8:	9124703a 	and	r18,r18,r4
 40032fc:	0039883a 	mov	fp,zero
 4003300:	103e891e 	bne	r2,zero,4002d28 <__alt_data_end+0xfc002d28>
 4003304:	d9002917 	ldw	r4,164(sp)
 4003308:	2002c11e 	bne	r4,zero,4003e10 <___vfprintf_internal_r+0x1630>
 400330c:	d8002915 	stw	zero,164(sp)
 4003310:	d8002e15 	stw	zero,184(sp)
 4003314:	dc001e04 	addi	r16,sp,120
 4003318:	003ef806 	br	4002efc <__alt_data_end+0xfc002efc>
 400331c:	18c03fcc 	andi	r3,r3,255
 4003320:	18059d1e 	bne	r3,zero,4004998 <___vfprintf_internal_r+0x21b8>
 4003324:	01410074 	movhi	r5,1025
 4003328:	2940b004 	addi	r5,r5,704
 400332c:	d9403915 	stw	r5,228(sp)
 4003330:	9080080c 	andi	r2,r18,32
 4003334:	10005226 	beq	r2,zero,4003480 <___vfprintf_internal_r+0xca0>
 4003338:	d8802d17 	ldw	r2,180(sp)
 400333c:	14c00017 	ldw	r19,0(r2)
 4003340:	15800117 	ldw	r22,4(r2)
 4003344:	10800204 	addi	r2,r2,8
 4003348:	d8802d15 	stw	r2,180(sp)
 400334c:	9080004c 	andi	r2,r18,1
 4003350:	10019026 	beq	r2,zero,4003994 <___vfprintf_internal_r+0x11b4>
 4003354:	9d84b03a 	or	r2,r19,r22
 4003358:	10036926 	beq	r2,zero,4004100 <___vfprintf_internal_r+0x1920>
 400335c:	d8c02917 	ldw	r3,164(sp)
 4003360:	00800c04 	movi	r2,48
 4003364:	d8802705 	stb	r2,156(sp)
 4003368:	dc402745 	stb	r17,157(sp)
 400336c:	d8002785 	stb	zero,158(sp)
 4003370:	90800094 	ori	r2,r18,2
 4003374:	18045d16 	blt	r3,zero,40044ec <___vfprintf_internal_r+0x1d0c>
 4003378:	00bfdfc4 	movi	r2,-129
 400337c:	90a4703a 	and	r18,r18,r2
 4003380:	94800094 	ori	r18,r18,2
 4003384:	0039883a 	mov	fp,zero
 4003388:	d9003917 	ldw	r4,228(sp)
 400338c:	dc001e04 	addi	r16,sp,120
 4003390:	988003cc 	andi	r2,r19,15
 4003394:	b006973a 	slli	r3,r22,28
 4003398:	2085883a 	add	r2,r4,r2
 400339c:	9826d13a 	srli	r19,r19,4
 40033a0:	10800003 	ldbu	r2,0(r2)
 40033a4:	b02cd13a 	srli	r22,r22,4
 40033a8:	843fffc4 	addi	r16,r16,-1
 40033ac:	1ce6b03a 	or	r19,r3,r19
 40033b0:	80800005 	stb	r2,0(r16)
 40033b4:	9d84b03a 	or	r2,r19,r22
 40033b8:	103ff51e 	bne	r2,zero,4003390 <__alt_data_end+0xfc003390>
 40033bc:	d8c02817 	ldw	r3,160(sp)
 40033c0:	1c07c83a 	sub	r3,r3,r16
 40033c4:	d8c02e15 	stw	r3,184(sp)
 40033c8:	003ecc06 	br	4002efc <__alt_data_end+0xfc002efc>
 40033cc:	18c03fcc 	andi	r3,r3,255
 40033d0:	183e9f26 	beq	r3,zero,4002e50 <__alt_data_end+0xfc002e50>
 40033d4:	d9c02785 	stb	r7,158(sp)
 40033d8:	003e9d06 	br	4002e50 <__alt_data_end+0xfc002e50>
 40033dc:	00c00044 	movi	r3,1
 40033e0:	01c00ac4 	movi	r7,43
 40033e4:	ac400007 	ldb	r17,0(r21)
 40033e8:	003d5e06 	br	4002964 <__alt_data_end+0xfc002964>
 40033ec:	94800814 	ori	r18,r18,32
 40033f0:	ac400007 	ldb	r17,0(r21)
 40033f4:	003d5b06 	br	4002964 <__alt_data_end+0xfc002964>
 40033f8:	d8c02d17 	ldw	r3,180(sp)
 40033fc:	d8002785 	stb	zero,158(sp)
 4003400:	1c000017 	ldw	r16,0(r3)
 4003404:	1cc00104 	addi	r19,r3,4
 4003408:	80041926 	beq	r16,zero,4004470 <___vfprintf_internal_r+0x1c90>
 400340c:	d9002917 	ldw	r4,164(sp)
 4003410:	2003d016 	blt	r4,zero,4004354 <___vfprintf_internal_r+0x1b74>
 4003414:	200d883a 	mov	r6,r4
 4003418:	000b883a 	mov	r5,zero
 400341c:	8009883a 	mov	r4,r16
 4003420:	da003d15 	stw	r8,244(sp)
 4003424:	40068380 	call	4006838 <memchr>
 4003428:	da003d17 	ldw	r8,244(sp)
 400342c:	10045426 	beq	r2,zero,4004580 <___vfprintf_internal_r+0x1da0>
 4003430:	1405c83a 	sub	r2,r2,r16
 4003434:	d8802e15 	stw	r2,184(sp)
 4003438:	1003cc16 	blt	r2,zero,400436c <___vfprintf_internal_r+0x1b8c>
 400343c:	df002783 	ldbu	fp,158(sp)
 4003440:	d8802a15 	stw	r2,168(sp)
 4003444:	dcc02d15 	stw	r19,180(sp)
 4003448:	d8002915 	stw	zero,164(sp)
 400344c:	d8003215 	stw	zero,200(sp)
 4003450:	003eb006 	br	4002f14 <__alt_data_end+0xfc002f14>
 4003454:	18c03fcc 	andi	r3,r3,255
 4003458:	183f9b26 	beq	r3,zero,40032c8 <__alt_data_end+0xfc0032c8>
 400345c:	d9c02785 	stb	r7,158(sp)
 4003460:	003f9906 	br	40032c8 <__alt_data_end+0xfc0032c8>
 4003464:	18c03fcc 	andi	r3,r3,255
 4003468:	1805551e 	bne	r3,zero,40049c0 <___vfprintf_internal_r+0x21e0>
 400346c:	01410074 	movhi	r5,1025
 4003470:	2940b504 	addi	r5,r5,724
 4003474:	d9403915 	stw	r5,228(sp)
 4003478:	9080080c 	andi	r2,r18,32
 400347c:	103fae1e 	bne	r2,zero,4003338 <__alt_data_end+0xfc003338>
 4003480:	9080040c 	andi	r2,r18,16
 4003484:	1002de26 	beq	r2,zero,4004000 <___vfprintf_internal_r+0x1820>
 4003488:	d8c02d17 	ldw	r3,180(sp)
 400348c:	002d883a 	mov	r22,zero
 4003490:	1cc00017 	ldw	r19,0(r3)
 4003494:	18c00104 	addi	r3,r3,4
 4003498:	d8c02d15 	stw	r3,180(sp)
 400349c:	003fab06 	br	400334c <__alt_data_end+0xfc00334c>
 40034a0:	38803fcc 	andi	r2,r7,255
 40034a4:	1080201c 	xori	r2,r2,128
 40034a8:	10bfe004 	addi	r2,r2,-128
 40034ac:	1002d21e 	bne	r2,zero,4003ff8 <___vfprintf_internal_r+0x1818>
 40034b0:	00c00044 	movi	r3,1
 40034b4:	01c00804 	movi	r7,32
 40034b8:	ac400007 	ldb	r17,0(r21)
 40034bc:	003d2906 	br	4002964 <__alt_data_end+0xfc002964>
 40034c0:	94800054 	ori	r18,r18,1
 40034c4:	ac400007 	ldb	r17,0(r21)
 40034c8:	003d2606 	br	4002964 <__alt_data_end+0xfc002964>
 40034cc:	18c03fcc 	andi	r3,r3,255
 40034d0:	183e0526 	beq	r3,zero,4002ce8 <__alt_data_end+0xfc002ce8>
 40034d4:	d9c02785 	stb	r7,158(sp)
 40034d8:	003e0306 	br	4002ce8 <__alt_data_end+0xfc002ce8>
 40034dc:	94801014 	ori	r18,r18,64
 40034e0:	ac400007 	ldb	r17,0(r21)
 40034e4:	003d1f06 	br	4002964 <__alt_data_end+0xfc002964>
 40034e8:	ac400007 	ldb	r17,0(r21)
 40034ec:	8a438726 	beq	r17,r9,400430c <___vfprintf_internal_r+0x1b2c>
 40034f0:	94800414 	ori	r18,r18,16
 40034f4:	003d1b06 	br	4002964 <__alt_data_end+0xfc002964>
 40034f8:	18c03fcc 	andi	r3,r3,255
 40034fc:	1805341e 	bne	r3,zero,40049d0 <___vfprintf_internal_r+0x21f0>
 4003500:	9080080c 	andi	r2,r18,32
 4003504:	1002cd26 	beq	r2,zero,400403c <___vfprintf_internal_r+0x185c>
 4003508:	d9402d17 	ldw	r5,180(sp)
 400350c:	d9002f17 	ldw	r4,188(sp)
 4003510:	28800017 	ldw	r2,0(r5)
 4003514:	2007d7fa 	srai	r3,r4,31
 4003518:	29400104 	addi	r5,r5,4
 400351c:	d9402d15 	stw	r5,180(sp)
 4003520:	11000015 	stw	r4,0(r2)
 4003524:	10c00115 	stw	r3,4(r2)
 4003528:	003ce506 	br	40028c0 <__alt_data_end+0xfc0028c0>
 400352c:	d8c02d17 	ldw	r3,180(sp)
 4003530:	d9002d17 	ldw	r4,180(sp)
 4003534:	d8002785 	stb	zero,158(sp)
 4003538:	18800017 	ldw	r2,0(r3)
 400353c:	21000104 	addi	r4,r4,4
 4003540:	00c00044 	movi	r3,1
 4003544:	d8c02a15 	stw	r3,168(sp)
 4003548:	d8801405 	stb	r2,80(sp)
 400354c:	d9002d15 	stw	r4,180(sp)
 4003550:	d8c02e15 	stw	r3,184(sp)
 4003554:	d8002915 	stw	zero,164(sp)
 4003558:	d8003215 	stw	zero,200(sp)
 400355c:	dc001404 	addi	r16,sp,80
 4003560:	0039883a 	mov	fp,zero
 4003564:	003e7206 	br	4002f30 <__alt_data_end+0xfc002f30>
 4003568:	01010074 	movhi	r4,1025
 400356c:	2100b504 	addi	r4,r4,724
 4003570:	0039883a 	mov	fp,zero
 4003574:	d9003915 	stw	r4,228(sp)
 4003578:	04401e04 	movi	r17,120
 400357c:	003f8206 	br	4003388 <__alt_data_end+0xfc003388>
 4003580:	18c03fcc 	andi	r3,r3,255
 4003584:	1805061e 	bne	r3,zero,40049a0 <___vfprintf_internal_r+0x21c0>
 4003588:	883d9126 	beq	r17,zero,4002bd0 <__alt_data_end+0xfc002bd0>
 400358c:	00c00044 	movi	r3,1
 4003590:	d8c02a15 	stw	r3,168(sp)
 4003594:	dc401405 	stb	r17,80(sp)
 4003598:	d8002785 	stb	zero,158(sp)
 400359c:	003fec06 	br	4003550 <__alt_data_end+0xfc003550>
 40035a0:	01410074 	movhi	r5,1025
 40035a4:	2940b504 	addi	r5,r5,724
 40035a8:	d9403915 	stw	r5,228(sp)
 40035ac:	d8c02d15 	stw	r3,180(sp)
 40035b0:	1025883a 	mov	r18,r2
 40035b4:	04401e04 	movi	r17,120
 40035b8:	9d84b03a 	or	r2,r19,r22
 40035bc:	1000fc1e 	bne	r2,zero,40039b0 <___vfprintf_internal_r+0x11d0>
 40035c0:	0039883a 	mov	fp,zero
 40035c4:	00800084 	movi	r2,2
 40035c8:	10803fcc 	andi	r2,r2,255
 40035cc:	00c00044 	movi	r3,1
 40035d0:	10c20f26 	beq	r2,r3,4003e10 <___vfprintf_internal_r+0x1630>
 40035d4:	00c00084 	movi	r3,2
 40035d8:	10fd6326 	beq	r2,r3,4002b68 <__alt_data_end+0xfc002b68>
 40035dc:	003e2d06 	br	4002e94 <__alt_data_end+0xfc002e94>
 40035e0:	d8c02017 	ldw	r3,128(sp)
 40035e4:	003e9306 	br	4003034 <__alt_data_end+0xfc003034>
 40035e8:	00801944 	movi	r2,101
 40035ec:	14407e0e 	bge	r2,r17,40037e8 <___vfprintf_internal_r+0x1008>
 40035f0:	d9003617 	ldw	r4,216(sp)
 40035f4:	d9403817 	ldw	r5,224(sp)
 40035f8:	000d883a 	mov	r6,zero
 40035fc:	000f883a 	mov	r7,zero
 4003600:	d8c03c15 	stw	r3,240(sp)
 4003604:	da003d15 	stw	r8,244(sp)
 4003608:	400c1ac0 	call	400c1ac <__eqdf2>
 400360c:	d8c03c17 	ldw	r3,240(sp)
 4003610:	da003d17 	ldw	r8,244(sp)
 4003614:	1000f71e 	bne	r2,zero,40039f4 <___vfprintf_internal_r+0x1214>
 4003618:	d8801f17 	ldw	r2,124(sp)
 400361c:	01010074 	movhi	r4,1025
 4003620:	2100bc04 	addi	r4,r4,752
 4003624:	18c00044 	addi	r3,r3,1
 4003628:	10800044 	addi	r2,r2,1
 400362c:	41000015 	stw	r4,0(r8)
 4003630:	01000044 	movi	r4,1
 4003634:	41000115 	stw	r4,4(r8)
 4003638:	d8c02015 	stw	r3,128(sp)
 400363c:	d8801f15 	stw	r2,124(sp)
 4003640:	010001c4 	movi	r4,7
 4003644:	2082b816 	blt	r4,r2,4004128 <___vfprintf_internal_r+0x1948>
 4003648:	42000204 	addi	r8,r8,8
 400364c:	d8802617 	ldw	r2,152(sp)
 4003650:	d9403317 	ldw	r5,204(sp)
 4003654:	11400216 	blt	r2,r5,4003660 <___vfprintf_internal_r+0xe80>
 4003658:	9080004c 	andi	r2,r18,1
 400365c:	103ed526 	beq	r2,zero,40031b4 <__alt_data_end+0xfc0031b4>
 4003660:	d8803717 	ldw	r2,220(sp)
 4003664:	d9003417 	ldw	r4,208(sp)
 4003668:	d9403717 	ldw	r5,220(sp)
 400366c:	1887883a 	add	r3,r3,r2
 4003670:	d8801f17 	ldw	r2,124(sp)
 4003674:	41000015 	stw	r4,0(r8)
 4003678:	41400115 	stw	r5,4(r8)
 400367c:	10800044 	addi	r2,r2,1
 4003680:	d8c02015 	stw	r3,128(sp)
 4003684:	d8801f15 	stw	r2,124(sp)
 4003688:	010001c4 	movi	r4,7
 400368c:	20832916 	blt	r4,r2,4004334 <___vfprintf_internal_r+0x1b54>
 4003690:	42000204 	addi	r8,r8,8
 4003694:	d8803317 	ldw	r2,204(sp)
 4003698:	143fffc4 	addi	r16,r2,-1
 400369c:	043ec50e 	bge	zero,r16,40031b4 <__alt_data_end+0xfc0031b4>
 40036a0:	04400404 	movi	r17,16
 40036a4:	d8801f17 	ldw	r2,124(sp)
 40036a8:	8c00880e 	bge	r17,r16,40038cc <___vfprintf_internal_r+0x10ec>
 40036ac:	01410074 	movhi	r5,1025
 40036b0:	2940bc84 	addi	r5,r5,754
 40036b4:	d9402b15 	stw	r5,172(sp)
 40036b8:	058001c4 	movi	r22,7
 40036bc:	dcc02c17 	ldw	r19,176(sp)
 40036c0:	00000306 	br	40036d0 <___vfprintf_internal_r+0xef0>
 40036c4:	42000204 	addi	r8,r8,8
 40036c8:	843ffc04 	addi	r16,r16,-16
 40036cc:	8c00820e 	bge	r17,r16,40038d8 <___vfprintf_internal_r+0x10f8>
 40036d0:	18c00404 	addi	r3,r3,16
 40036d4:	10800044 	addi	r2,r2,1
 40036d8:	45000015 	stw	r20,0(r8)
 40036dc:	44400115 	stw	r17,4(r8)
 40036e0:	d8c02015 	stw	r3,128(sp)
 40036e4:	d8801f15 	stw	r2,124(sp)
 40036e8:	b0bff60e 	bge	r22,r2,40036c4 <__alt_data_end+0xfc0036c4>
 40036ec:	d9801e04 	addi	r6,sp,120
 40036f0:	b80b883a 	mov	r5,r23
 40036f4:	9809883a 	mov	r4,r19
 40036f8:	4007c300 	call	4007c30 <__sprint_r>
 40036fc:	103d3a1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003700:	d8c02017 	ldw	r3,128(sp)
 4003704:	d8801f17 	ldw	r2,124(sp)
 4003708:	da000404 	addi	r8,sp,16
 400370c:	003fee06 	br	40036c8 <__alt_data_end+0xfc0036c8>
 4003710:	d9403117 	ldw	r5,196(sp)
 4003714:	d8802a17 	ldw	r2,168(sp)
 4003718:	28adc83a 	sub	r22,r5,r2
 400371c:	05be630e 	bge	zero,r22,40030ac <__alt_data_end+0xfc0030ac>
 4003720:	07000404 	movi	fp,16
 4003724:	d8801f17 	ldw	r2,124(sp)
 4003728:	e5838f0e 	bge	fp,r22,4004568 <___vfprintf_internal_r+0x1d88>
 400372c:	01410074 	movhi	r5,1025
 4003730:	2940bc84 	addi	r5,r5,754
 4003734:	dc403015 	stw	r17,192(sp)
 4003738:	d9402b15 	stw	r5,172(sp)
 400373c:	b023883a 	mov	r17,r22
 4003740:	04c001c4 	movi	r19,7
 4003744:	a82d883a 	mov	r22,r21
 4003748:	902b883a 	mov	r21,r18
 400374c:	8025883a 	mov	r18,r16
 4003750:	dc002c17 	ldw	r16,176(sp)
 4003754:	00000306 	br	4003764 <___vfprintf_internal_r+0xf84>
 4003758:	8c7ffc04 	addi	r17,r17,-16
 400375c:	42000204 	addi	r8,r8,8
 4003760:	e440110e 	bge	fp,r17,40037a8 <___vfprintf_internal_r+0xfc8>
 4003764:	18c00404 	addi	r3,r3,16
 4003768:	10800044 	addi	r2,r2,1
 400376c:	45000015 	stw	r20,0(r8)
 4003770:	47000115 	stw	fp,4(r8)
 4003774:	d8c02015 	stw	r3,128(sp)
 4003778:	d8801f15 	stw	r2,124(sp)
 400377c:	98bff60e 	bge	r19,r2,4003758 <__alt_data_end+0xfc003758>
 4003780:	d9801e04 	addi	r6,sp,120
 4003784:	b80b883a 	mov	r5,r23
 4003788:	8009883a 	mov	r4,r16
 400378c:	4007c300 	call	4007c30 <__sprint_r>
 4003790:	103d151e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003794:	8c7ffc04 	addi	r17,r17,-16
 4003798:	d8c02017 	ldw	r3,128(sp)
 400379c:	d8801f17 	ldw	r2,124(sp)
 40037a0:	da000404 	addi	r8,sp,16
 40037a4:	e47fef16 	blt	fp,r17,4003764 <__alt_data_end+0xfc003764>
 40037a8:	9021883a 	mov	r16,r18
 40037ac:	a825883a 	mov	r18,r21
 40037b0:	b02b883a 	mov	r21,r22
 40037b4:	882d883a 	mov	r22,r17
 40037b8:	dc403017 	ldw	r17,192(sp)
 40037bc:	d9002b17 	ldw	r4,172(sp)
 40037c0:	1d87883a 	add	r3,r3,r22
 40037c4:	10800044 	addi	r2,r2,1
 40037c8:	41000015 	stw	r4,0(r8)
 40037cc:	45800115 	stw	r22,4(r8)
 40037d0:	d8c02015 	stw	r3,128(sp)
 40037d4:	d8801f15 	stw	r2,124(sp)
 40037d8:	010001c4 	movi	r4,7
 40037dc:	20818e16 	blt	r4,r2,4003e18 <___vfprintf_internal_r+0x1638>
 40037e0:	42000204 	addi	r8,r8,8
 40037e4:	003e3106 	br	40030ac <__alt_data_end+0xfc0030ac>
 40037e8:	d9403317 	ldw	r5,204(sp)
 40037ec:	00800044 	movi	r2,1
 40037f0:	18c00044 	addi	r3,r3,1
 40037f4:	1141530e 	bge	r2,r5,4003d44 <___vfprintf_internal_r+0x1564>
 40037f8:	dc401f17 	ldw	r17,124(sp)
 40037fc:	00800044 	movi	r2,1
 4003800:	40800115 	stw	r2,4(r8)
 4003804:	8c400044 	addi	r17,r17,1
 4003808:	44000015 	stw	r16,0(r8)
 400380c:	d8c02015 	stw	r3,128(sp)
 4003810:	dc401f15 	stw	r17,124(sp)
 4003814:	008001c4 	movi	r2,7
 4003818:	14416b16 	blt	r2,r17,4003dc8 <___vfprintf_internal_r+0x15e8>
 400381c:	42000204 	addi	r8,r8,8
 4003820:	d8803717 	ldw	r2,220(sp)
 4003824:	d9003417 	ldw	r4,208(sp)
 4003828:	8c400044 	addi	r17,r17,1
 400382c:	10c7883a 	add	r3,r2,r3
 4003830:	40800115 	stw	r2,4(r8)
 4003834:	41000015 	stw	r4,0(r8)
 4003838:	d8c02015 	stw	r3,128(sp)
 400383c:	dc401f15 	stw	r17,124(sp)
 4003840:	008001c4 	movi	r2,7
 4003844:	14416916 	blt	r2,r17,4003dec <___vfprintf_internal_r+0x160c>
 4003848:	45800204 	addi	r22,r8,8
 400384c:	d9003617 	ldw	r4,216(sp)
 4003850:	d9403817 	ldw	r5,224(sp)
 4003854:	000d883a 	mov	r6,zero
 4003858:	000f883a 	mov	r7,zero
 400385c:	d8c03c15 	stw	r3,240(sp)
 4003860:	400c1ac0 	call	400c1ac <__eqdf2>
 4003864:	d8c03c17 	ldw	r3,240(sp)
 4003868:	1000bc26 	beq	r2,zero,4003b5c <___vfprintf_internal_r+0x137c>
 400386c:	d9403317 	ldw	r5,204(sp)
 4003870:	84000044 	addi	r16,r16,1
 4003874:	8c400044 	addi	r17,r17,1
 4003878:	28bfffc4 	addi	r2,r5,-1
 400387c:	1887883a 	add	r3,r3,r2
 4003880:	b0800115 	stw	r2,4(r22)
 4003884:	b4000015 	stw	r16,0(r22)
 4003888:	d8c02015 	stw	r3,128(sp)
 400388c:	dc401f15 	stw	r17,124(sp)
 4003890:	008001c4 	movi	r2,7
 4003894:	14414316 	blt	r2,r17,4003da4 <___vfprintf_internal_r+0x15c4>
 4003898:	b5800204 	addi	r22,r22,8
 400389c:	d9003a17 	ldw	r4,232(sp)
 40038a0:	df0022c4 	addi	fp,sp,139
 40038a4:	8c400044 	addi	r17,r17,1
 40038a8:	20c7883a 	add	r3,r4,r3
 40038ac:	b7000015 	stw	fp,0(r22)
 40038b0:	b1000115 	stw	r4,4(r22)
 40038b4:	d8c02015 	stw	r3,128(sp)
 40038b8:	dc401f15 	stw	r17,124(sp)
 40038bc:	008001c4 	movi	r2,7
 40038c0:	14400e16 	blt	r2,r17,40038fc <___vfprintf_internal_r+0x111c>
 40038c4:	b2000204 	addi	r8,r22,8
 40038c8:	003e3a06 	br	40031b4 <__alt_data_end+0xfc0031b4>
 40038cc:	01010074 	movhi	r4,1025
 40038d0:	2100bc84 	addi	r4,r4,754
 40038d4:	d9002b15 	stw	r4,172(sp)
 40038d8:	d9002b17 	ldw	r4,172(sp)
 40038dc:	1c07883a 	add	r3,r3,r16
 40038e0:	44000115 	stw	r16,4(r8)
 40038e4:	41000015 	stw	r4,0(r8)
 40038e8:	10800044 	addi	r2,r2,1
 40038ec:	d8c02015 	stw	r3,128(sp)
 40038f0:	d8801f15 	stw	r2,124(sp)
 40038f4:	010001c4 	movi	r4,7
 40038f8:	20be2d0e 	bge	r4,r2,40031b0 <__alt_data_end+0xfc0031b0>
 40038fc:	d9002c17 	ldw	r4,176(sp)
 4003900:	d9801e04 	addi	r6,sp,120
 4003904:	b80b883a 	mov	r5,r23
 4003908:	4007c300 	call	4007c30 <__sprint_r>
 400390c:	103cb61e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003910:	d8c02017 	ldw	r3,128(sp)
 4003914:	da000404 	addi	r8,sp,16
 4003918:	003e2606 	br	40031b4 <__alt_data_end+0xfc0031b4>
 400391c:	d9002c17 	ldw	r4,176(sp)
 4003920:	d9801e04 	addi	r6,sp,120
 4003924:	b80b883a 	mov	r5,r23
 4003928:	4007c300 	call	4007c30 <__sprint_r>
 400392c:	103e5d26 	beq	r2,zero,40032a4 <__alt_data_end+0xfc0032a4>
 4003930:	003cad06 	br	4002be8 <__alt_data_end+0xfc002be8>
 4003934:	d9002c17 	ldw	r4,176(sp)
 4003938:	d9801e04 	addi	r6,sp,120
 400393c:	b80b883a 	mov	r5,r23
 4003940:	4007c300 	call	4007c30 <__sprint_r>
 4003944:	103ca81e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003948:	d8c02017 	ldw	r3,128(sp)
 400394c:	da000404 	addi	r8,sp,16
 4003950:	003e0b06 	br	4003180 <__alt_data_end+0xfc003180>
 4003954:	d9002c17 	ldw	r4,176(sp)
 4003958:	d9801e04 	addi	r6,sp,120
 400395c:	b80b883a 	mov	r5,r23
 4003960:	4007c300 	call	4007c30 <__sprint_r>
 4003964:	103ca01e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003968:	d8c02017 	ldw	r3,128(sp)
 400396c:	da000404 	addi	r8,sp,16
 4003970:	003dbd06 	br	4003068 <__alt_data_end+0xfc003068>
 4003974:	d9002c17 	ldw	r4,176(sp)
 4003978:	d9801e04 	addi	r6,sp,120
 400397c:	b80b883a 	mov	r5,r23
 4003980:	4007c300 	call	4007c30 <__sprint_r>
 4003984:	103c981e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003988:	d8c02017 	ldw	r3,128(sp)
 400398c:	da000404 	addi	r8,sp,16
 4003990:	003dc306 	br	40030a0 <__alt_data_end+0xfc0030a0>
 4003994:	d8802917 	ldw	r2,164(sp)
 4003998:	d8002785 	stb	zero,158(sp)
 400399c:	103f0616 	blt	r2,zero,40035b8 <__alt_data_end+0xfc0035b8>
 40039a0:	00ffdfc4 	movi	r3,-129
 40039a4:	9d84b03a 	or	r2,r19,r22
 40039a8:	90e4703a 	and	r18,r18,r3
 40039ac:	103c6b26 	beq	r2,zero,4002b5c <__alt_data_end+0xfc002b5c>
 40039b0:	0039883a 	mov	fp,zero
 40039b4:	003e7406 	br	4003388 <__alt_data_end+0xfc003388>
 40039b8:	9080040c 	andi	r2,r18,16
 40039bc:	1001b326 	beq	r2,zero,400408c <___vfprintf_internal_r+0x18ac>
 40039c0:	d9002d17 	ldw	r4,180(sp)
 40039c4:	d9402917 	ldw	r5,164(sp)
 40039c8:	d8002785 	stb	zero,158(sp)
 40039cc:	20800104 	addi	r2,r4,4
 40039d0:	24c00017 	ldw	r19,0(r4)
 40039d4:	002d883a 	mov	r22,zero
 40039d8:	2801b516 	blt	r5,zero,40040b0 <___vfprintf_internal_r+0x18d0>
 40039dc:	00ffdfc4 	movi	r3,-129
 40039e0:	d8802d15 	stw	r2,180(sp)
 40039e4:	90e4703a 	and	r18,r18,r3
 40039e8:	983d2726 	beq	r19,zero,4002e88 <__alt_data_end+0xfc002e88>
 40039ec:	0039883a 	mov	fp,zero
 40039f0:	003d2a06 	br	4002e9c <__alt_data_end+0xfc002e9c>
 40039f4:	dc402617 	ldw	r17,152(sp)
 40039f8:	0441d30e 	bge	zero,r17,4004148 <___vfprintf_internal_r+0x1968>
 40039fc:	dc403217 	ldw	r17,200(sp)
 4003a00:	d8803317 	ldw	r2,204(sp)
 4003a04:	1440010e 	bge	r2,r17,4003a0c <___vfprintf_internal_r+0x122c>
 4003a08:	1023883a 	mov	r17,r2
 4003a0c:	04400a0e 	bge	zero,r17,4003a38 <___vfprintf_internal_r+0x1258>
 4003a10:	d8801f17 	ldw	r2,124(sp)
 4003a14:	1c47883a 	add	r3,r3,r17
 4003a18:	44000015 	stw	r16,0(r8)
 4003a1c:	10800044 	addi	r2,r2,1
 4003a20:	44400115 	stw	r17,4(r8)
 4003a24:	d8c02015 	stw	r3,128(sp)
 4003a28:	d8801f15 	stw	r2,124(sp)
 4003a2c:	010001c4 	movi	r4,7
 4003a30:	20826516 	blt	r4,r2,40043c8 <___vfprintf_internal_r+0x1be8>
 4003a34:	42000204 	addi	r8,r8,8
 4003a38:	88026116 	blt	r17,zero,40043c0 <___vfprintf_internal_r+0x1be0>
 4003a3c:	d9003217 	ldw	r4,200(sp)
 4003a40:	2463c83a 	sub	r17,r4,r17
 4003a44:	04407b0e 	bge	zero,r17,4003c34 <___vfprintf_internal_r+0x1454>
 4003a48:	05800404 	movi	r22,16
 4003a4c:	d8801f17 	ldw	r2,124(sp)
 4003a50:	b4419d0e 	bge	r22,r17,40040c8 <___vfprintf_internal_r+0x18e8>
 4003a54:	01010074 	movhi	r4,1025
 4003a58:	2100bc84 	addi	r4,r4,754
 4003a5c:	d9002b15 	stw	r4,172(sp)
 4003a60:	070001c4 	movi	fp,7
 4003a64:	dcc02c17 	ldw	r19,176(sp)
 4003a68:	00000306 	br	4003a78 <___vfprintf_internal_r+0x1298>
 4003a6c:	42000204 	addi	r8,r8,8
 4003a70:	8c7ffc04 	addi	r17,r17,-16
 4003a74:	b441970e 	bge	r22,r17,40040d4 <___vfprintf_internal_r+0x18f4>
 4003a78:	18c00404 	addi	r3,r3,16
 4003a7c:	10800044 	addi	r2,r2,1
 4003a80:	45000015 	stw	r20,0(r8)
 4003a84:	45800115 	stw	r22,4(r8)
 4003a88:	d8c02015 	stw	r3,128(sp)
 4003a8c:	d8801f15 	stw	r2,124(sp)
 4003a90:	e0bff60e 	bge	fp,r2,4003a6c <__alt_data_end+0xfc003a6c>
 4003a94:	d9801e04 	addi	r6,sp,120
 4003a98:	b80b883a 	mov	r5,r23
 4003a9c:	9809883a 	mov	r4,r19
 4003aa0:	4007c300 	call	4007c30 <__sprint_r>
 4003aa4:	103c501e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003aa8:	d8c02017 	ldw	r3,128(sp)
 4003aac:	d8801f17 	ldw	r2,124(sp)
 4003ab0:	da000404 	addi	r8,sp,16
 4003ab4:	003fee06 	br	4003a70 <__alt_data_end+0xfc003a70>
 4003ab8:	d9002c17 	ldw	r4,176(sp)
 4003abc:	d9801e04 	addi	r6,sp,120
 4003ac0:	b80b883a 	mov	r5,r23
 4003ac4:	4007c300 	call	4007c30 <__sprint_r>
 4003ac8:	103c471e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003acc:	d8c02017 	ldw	r3,128(sp)
 4003ad0:	df002787 	ldb	fp,158(sp)
 4003ad4:	da000404 	addi	r8,sp,16
 4003ad8:	003d5606 	br	4003034 <__alt_data_end+0xfc003034>
 4003adc:	9080040c 	andi	r2,r18,16
 4003ae0:	10016126 	beq	r2,zero,4004068 <___vfprintf_internal_r+0x1888>
 4003ae4:	d8802d17 	ldw	r2,180(sp)
 4003ae8:	14c00017 	ldw	r19,0(r2)
 4003aec:	10800104 	addi	r2,r2,4
 4003af0:	d8802d15 	stw	r2,180(sp)
 4003af4:	982dd7fa 	srai	r22,r19,31
 4003af8:	b005883a 	mov	r2,r22
 4003afc:	003c8206 	br	4002d08 <__alt_data_end+0xfc002d08>
 4003b00:	9080040c 	andi	r2,r18,16
 4003b04:	10003526 	beq	r2,zero,4003bdc <___vfprintf_internal_r+0x13fc>
 4003b08:	d9402d17 	ldw	r5,180(sp)
 4003b0c:	d8c02917 	ldw	r3,164(sp)
 4003b10:	d8002785 	stb	zero,158(sp)
 4003b14:	28800104 	addi	r2,r5,4
 4003b18:	2cc00017 	ldw	r19,0(r5)
 4003b1c:	002d883a 	mov	r22,zero
 4003b20:	18003716 	blt	r3,zero,4003c00 <___vfprintf_internal_r+0x1420>
 4003b24:	00ffdfc4 	movi	r3,-129
 4003b28:	d8802d15 	stw	r2,180(sp)
 4003b2c:	90e4703a 	and	r18,r18,r3
 4003b30:	0039883a 	mov	fp,zero
 4003b34:	983df326 	beq	r19,zero,4003304 <__alt_data_end+0xfc003304>
 4003b38:	00800244 	movi	r2,9
 4003b3c:	14fc7b36 	bltu	r2,r19,4002d2c <__alt_data_end+0xfc002d2c>
 4003b40:	d8c02817 	ldw	r3,160(sp)
 4003b44:	dc001dc4 	addi	r16,sp,119
 4003b48:	9cc00c04 	addi	r19,r19,48
 4003b4c:	1c07c83a 	sub	r3,r3,r16
 4003b50:	dcc01dc5 	stb	r19,119(sp)
 4003b54:	d8c02e15 	stw	r3,184(sp)
 4003b58:	003ce806 	br	4002efc <__alt_data_end+0xfc002efc>
 4003b5c:	d8803317 	ldw	r2,204(sp)
 4003b60:	143fffc4 	addi	r16,r2,-1
 4003b64:	043f4d0e 	bge	zero,r16,400389c <__alt_data_end+0xfc00389c>
 4003b68:	07000404 	movi	fp,16
 4003b6c:	e400810e 	bge	fp,r16,4003d74 <___vfprintf_internal_r+0x1594>
 4003b70:	01410074 	movhi	r5,1025
 4003b74:	2940bc84 	addi	r5,r5,754
 4003b78:	d9402b15 	stw	r5,172(sp)
 4003b7c:	01c001c4 	movi	r7,7
 4003b80:	dcc02c17 	ldw	r19,176(sp)
 4003b84:	00000306 	br	4003b94 <___vfprintf_internal_r+0x13b4>
 4003b88:	b5800204 	addi	r22,r22,8
 4003b8c:	843ffc04 	addi	r16,r16,-16
 4003b90:	e4007b0e 	bge	fp,r16,4003d80 <___vfprintf_internal_r+0x15a0>
 4003b94:	18c00404 	addi	r3,r3,16
 4003b98:	8c400044 	addi	r17,r17,1
 4003b9c:	b5000015 	stw	r20,0(r22)
 4003ba0:	b7000115 	stw	fp,4(r22)
 4003ba4:	d8c02015 	stw	r3,128(sp)
 4003ba8:	dc401f15 	stw	r17,124(sp)
 4003bac:	3c7ff60e 	bge	r7,r17,4003b88 <__alt_data_end+0xfc003b88>
 4003bb0:	d9801e04 	addi	r6,sp,120
 4003bb4:	b80b883a 	mov	r5,r23
 4003bb8:	9809883a 	mov	r4,r19
 4003bbc:	d9c03c15 	stw	r7,240(sp)
 4003bc0:	4007c300 	call	4007c30 <__sprint_r>
 4003bc4:	d9c03c17 	ldw	r7,240(sp)
 4003bc8:	103c071e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003bcc:	d8c02017 	ldw	r3,128(sp)
 4003bd0:	dc401f17 	ldw	r17,124(sp)
 4003bd4:	dd800404 	addi	r22,sp,16
 4003bd8:	003fec06 	br	4003b8c <__alt_data_end+0xfc003b8c>
 4003bdc:	9080100c 	andi	r2,r18,64
 4003be0:	d8002785 	stb	zero,158(sp)
 4003be4:	10010e26 	beq	r2,zero,4004020 <___vfprintf_internal_r+0x1840>
 4003be8:	d9002d17 	ldw	r4,180(sp)
 4003bec:	d9402917 	ldw	r5,164(sp)
 4003bf0:	002d883a 	mov	r22,zero
 4003bf4:	20800104 	addi	r2,r4,4
 4003bf8:	24c0000b 	ldhu	r19,0(r4)
 4003bfc:	283fc90e 	bge	r5,zero,4003b24 <__alt_data_end+0xfc003b24>
 4003c00:	d8802d15 	stw	r2,180(sp)
 4003c04:	0039883a 	mov	fp,zero
 4003c08:	9d84b03a 	or	r2,r19,r22
 4003c0c:	103c461e 	bne	r2,zero,4002d28 <__alt_data_end+0xfc002d28>
 4003c10:	00800044 	movi	r2,1
 4003c14:	003e6c06 	br	40035c8 <__alt_data_end+0xfc0035c8>
 4003c18:	d9002c17 	ldw	r4,176(sp)
 4003c1c:	d9801e04 	addi	r6,sp,120
 4003c20:	b80b883a 	mov	r5,r23
 4003c24:	4007c300 	call	4007c30 <__sprint_r>
 4003c28:	103bef1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003c2c:	d8c02017 	ldw	r3,128(sp)
 4003c30:	da000404 	addi	r8,sp,16
 4003c34:	d9003217 	ldw	r4,200(sp)
 4003c38:	d8802617 	ldw	r2,152(sp)
 4003c3c:	d9403317 	ldw	r5,204(sp)
 4003c40:	8123883a 	add	r17,r16,r4
 4003c44:	11400216 	blt	r2,r5,4003c50 <___vfprintf_internal_r+0x1470>
 4003c48:	9100004c 	andi	r4,r18,1
 4003c4c:	20000d26 	beq	r4,zero,4003c84 <___vfprintf_internal_r+0x14a4>
 4003c50:	d9003717 	ldw	r4,220(sp)
 4003c54:	d9403417 	ldw	r5,208(sp)
 4003c58:	1907883a 	add	r3,r3,r4
 4003c5c:	d9001f17 	ldw	r4,124(sp)
 4003c60:	41400015 	stw	r5,0(r8)
 4003c64:	d9403717 	ldw	r5,220(sp)
 4003c68:	21000044 	addi	r4,r4,1
 4003c6c:	d8c02015 	stw	r3,128(sp)
 4003c70:	41400115 	stw	r5,4(r8)
 4003c74:	d9001f15 	stw	r4,124(sp)
 4003c78:	014001c4 	movi	r5,7
 4003c7c:	2901e816 	blt	r5,r4,4004420 <___vfprintf_internal_r+0x1c40>
 4003c80:	42000204 	addi	r8,r8,8
 4003c84:	d9003317 	ldw	r4,204(sp)
 4003c88:	8121883a 	add	r16,r16,r4
 4003c8c:	2085c83a 	sub	r2,r4,r2
 4003c90:	8461c83a 	sub	r16,r16,r17
 4003c94:	1400010e 	bge	r2,r16,4003c9c <___vfprintf_internal_r+0x14bc>
 4003c98:	1021883a 	mov	r16,r2
 4003c9c:	04000a0e 	bge	zero,r16,4003cc8 <___vfprintf_internal_r+0x14e8>
 4003ca0:	d9001f17 	ldw	r4,124(sp)
 4003ca4:	1c07883a 	add	r3,r3,r16
 4003ca8:	44400015 	stw	r17,0(r8)
 4003cac:	21000044 	addi	r4,r4,1
 4003cb0:	44000115 	stw	r16,4(r8)
 4003cb4:	d8c02015 	stw	r3,128(sp)
 4003cb8:	d9001f15 	stw	r4,124(sp)
 4003cbc:	014001c4 	movi	r5,7
 4003cc0:	2901fb16 	blt	r5,r4,40044b0 <___vfprintf_internal_r+0x1cd0>
 4003cc4:	42000204 	addi	r8,r8,8
 4003cc8:	8001f716 	blt	r16,zero,40044a8 <___vfprintf_internal_r+0x1cc8>
 4003ccc:	1421c83a 	sub	r16,r2,r16
 4003cd0:	043d380e 	bge	zero,r16,40031b4 <__alt_data_end+0xfc0031b4>
 4003cd4:	04400404 	movi	r17,16
 4003cd8:	d8801f17 	ldw	r2,124(sp)
 4003cdc:	8c3efb0e 	bge	r17,r16,40038cc <__alt_data_end+0xfc0038cc>
 4003ce0:	01410074 	movhi	r5,1025
 4003ce4:	2940bc84 	addi	r5,r5,754
 4003ce8:	d9402b15 	stw	r5,172(sp)
 4003cec:	058001c4 	movi	r22,7
 4003cf0:	dcc02c17 	ldw	r19,176(sp)
 4003cf4:	00000306 	br	4003d04 <___vfprintf_internal_r+0x1524>
 4003cf8:	42000204 	addi	r8,r8,8
 4003cfc:	843ffc04 	addi	r16,r16,-16
 4003d00:	8c3ef50e 	bge	r17,r16,40038d8 <__alt_data_end+0xfc0038d8>
 4003d04:	18c00404 	addi	r3,r3,16
 4003d08:	10800044 	addi	r2,r2,1
 4003d0c:	45000015 	stw	r20,0(r8)
 4003d10:	44400115 	stw	r17,4(r8)
 4003d14:	d8c02015 	stw	r3,128(sp)
 4003d18:	d8801f15 	stw	r2,124(sp)
 4003d1c:	b0bff60e 	bge	r22,r2,4003cf8 <__alt_data_end+0xfc003cf8>
 4003d20:	d9801e04 	addi	r6,sp,120
 4003d24:	b80b883a 	mov	r5,r23
 4003d28:	9809883a 	mov	r4,r19
 4003d2c:	4007c300 	call	4007c30 <__sprint_r>
 4003d30:	103bad1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003d34:	d8c02017 	ldw	r3,128(sp)
 4003d38:	d8801f17 	ldw	r2,124(sp)
 4003d3c:	da000404 	addi	r8,sp,16
 4003d40:	003fee06 	br	4003cfc <__alt_data_end+0xfc003cfc>
 4003d44:	9088703a 	and	r4,r18,r2
 4003d48:	203eab1e 	bne	r4,zero,40037f8 <__alt_data_end+0xfc0037f8>
 4003d4c:	dc401f17 	ldw	r17,124(sp)
 4003d50:	40800115 	stw	r2,4(r8)
 4003d54:	44000015 	stw	r16,0(r8)
 4003d58:	8c400044 	addi	r17,r17,1
 4003d5c:	d8c02015 	stw	r3,128(sp)
 4003d60:	dc401f15 	stw	r17,124(sp)
 4003d64:	008001c4 	movi	r2,7
 4003d68:	14400e16 	blt	r2,r17,4003da4 <___vfprintf_internal_r+0x15c4>
 4003d6c:	45800204 	addi	r22,r8,8
 4003d70:	003eca06 	br	400389c <__alt_data_end+0xfc00389c>
 4003d74:	01010074 	movhi	r4,1025
 4003d78:	2100bc84 	addi	r4,r4,754
 4003d7c:	d9002b15 	stw	r4,172(sp)
 4003d80:	d8802b17 	ldw	r2,172(sp)
 4003d84:	1c07883a 	add	r3,r3,r16
 4003d88:	8c400044 	addi	r17,r17,1
 4003d8c:	b0800015 	stw	r2,0(r22)
 4003d90:	b4000115 	stw	r16,4(r22)
 4003d94:	d8c02015 	stw	r3,128(sp)
 4003d98:	dc401f15 	stw	r17,124(sp)
 4003d9c:	008001c4 	movi	r2,7
 4003da0:	147ebd0e 	bge	r2,r17,4003898 <__alt_data_end+0xfc003898>
 4003da4:	d9002c17 	ldw	r4,176(sp)
 4003da8:	d9801e04 	addi	r6,sp,120
 4003dac:	b80b883a 	mov	r5,r23
 4003db0:	4007c300 	call	4007c30 <__sprint_r>
 4003db4:	103b8c1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003db8:	d8c02017 	ldw	r3,128(sp)
 4003dbc:	dc401f17 	ldw	r17,124(sp)
 4003dc0:	dd800404 	addi	r22,sp,16
 4003dc4:	003eb506 	br	400389c <__alt_data_end+0xfc00389c>
 4003dc8:	d9002c17 	ldw	r4,176(sp)
 4003dcc:	d9801e04 	addi	r6,sp,120
 4003dd0:	b80b883a 	mov	r5,r23
 4003dd4:	4007c300 	call	4007c30 <__sprint_r>
 4003dd8:	103b831e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003ddc:	d8c02017 	ldw	r3,128(sp)
 4003de0:	dc401f17 	ldw	r17,124(sp)
 4003de4:	da000404 	addi	r8,sp,16
 4003de8:	003e8d06 	br	4003820 <__alt_data_end+0xfc003820>
 4003dec:	d9002c17 	ldw	r4,176(sp)
 4003df0:	d9801e04 	addi	r6,sp,120
 4003df4:	b80b883a 	mov	r5,r23
 4003df8:	4007c300 	call	4007c30 <__sprint_r>
 4003dfc:	103b7a1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003e00:	d8c02017 	ldw	r3,128(sp)
 4003e04:	dc401f17 	ldw	r17,124(sp)
 4003e08:	dd800404 	addi	r22,sp,16
 4003e0c:	003e8f06 	br	400384c <__alt_data_end+0xfc00384c>
 4003e10:	0027883a 	mov	r19,zero
 4003e14:	003f4a06 	br	4003b40 <__alt_data_end+0xfc003b40>
 4003e18:	d9002c17 	ldw	r4,176(sp)
 4003e1c:	d9801e04 	addi	r6,sp,120
 4003e20:	b80b883a 	mov	r5,r23
 4003e24:	4007c300 	call	4007c30 <__sprint_r>
 4003e28:	103b6f1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4003e2c:	d8c02017 	ldw	r3,128(sp)
 4003e30:	da000404 	addi	r8,sp,16
 4003e34:	003c9d06 	br	40030ac <__alt_data_end+0xfc0030ac>
 4003e38:	04e7c83a 	sub	r19,zero,r19
 4003e3c:	9804c03a 	cmpne	r2,r19,zero
 4003e40:	05adc83a 	sub	r22,zero,r22
 4003e44:	b0adc83a 	sub	r22,r22,r2
 4003e48:	d8802917 	ldw	r2,164(sp)
 4003e4c:	07000b44 	movi	fp,45
 4003e50:	df002785 	stb	fp,158(sp)
 4003e54:	10017b16 	blt	r2,zero,4004444 <___vfprintf_internal_r+0x1c64>
 4003e58:	00bfdfc4 	movi	r2,-129
 4003e5c:	90a4703a 	and	r18,r18,r2
 4003e60:	003bb106 	br	4002d28 <__alt_data_end+0xfc002d28>
 4003e64:	d9003617 	ldw	r4,216(sp)
 4003e68:	d9403817 	ldw	r5,224(sp)
 4003e6c:	da003d15 	stw	r8,244(sp)
 4003e70:	4007ac00 	call	4007ac0 <__fpclassifyd>
 4003e74:	da003d17 	ldw	r8,244(sp)
 4003e78:	1000f026 	beq	r2,zero,400423c <___vfprintf_internal_r+0x1a5c>
 4003e7c:	d9002917 	ldw	r4,164(sp)
 4003e80:	05bff7c4 	movi	r22,-33
 4003e84:	00bfffc4 	movi	r2,-1
 4003e88:	8dac703a 	and	r22,r17,r22
 4003e8c:	20820026 	beq	r4,r2,4004690 <___vfprintf_internal_r+0x1eb0>
 4003e90:	008011c4 	movi	r2,71
 4003e94:	b081f726 	beq	r22,r2,4004674 <___vfprintf_internal_r+0x1e94>
 4003e98:	d9003817 	ldw	r4,224(sp)
 4003e9c:	90c04014 	ori	r3,r18,256
 4003ea0:	d8c02b15 	stw	r3,172(sp)
 4003ea4:	20021516 	blt	r4,zero,40046fc <___vfprintf_internal_r+0x1f1c>
 4003ea8:	dcc03817 	ldw	r19,224(sp)
 4003eac:	d8002a05 	stb	zero,168(sp)
 4003eb0:	00801984 	movi	r2,102
 4003eb4:	8881f926 	beq	r17,r2,400469c <___vfprintf_internal_r+0x1ebc>
 4003eb8:	00801184 	movi	r2,70
 4003ebc:	88821c26 	beq	r17,r2,4004730 <___vfprintf_internal_r+0x1f50>
 4003ec0:	00801144 	movi	r2,69
 4003ec4:	b081ef26 	beq	r22,r2,4004684 <___vfprintf_internal_r+0x1ea4>
 4003ec8:	d8c02917 	ldw	r3,164(sp)
 4003ecc:	d8802104 	addi	r2,sp,132
 4003ed0:	d8800315 	stw	r2,12(sp)
 4003ed4:	d9403617 	ldw	r5,216(sp)
 4003ed8:	d8802504 	addi	r2,sp,148
 4003edc:	d9002c17 	ldw	r4,176(sp)
 4003ee0:	d8800215 	stw	r2,8(sp)
 4003ee4:	d8802604 	addi	r2,sp,152
 4003ee8:	d8c00015 	stw	r3,0(sp)
 4003eec:	d8800115 	stw	r2,4(sp)
 4003ef0:	01c00084 	movi	r7,2
 4003ef4:	980d883a 	mov	r6,r19
 4003ef8:	d8c03c15 	stw	r3,240(sp)
 4003efc:	da003d15 	stw	r8,244(sp)
 4003f00:	4004eb80 	call	4004eb8 <_dtoa_r>
 4003f04:	1021883a 	mov	r16,r2
 4003f08:	008019c4 	movi	r2,103
 4003f0c:	d8c03c17 	ldw	r3,240(sp)
 4003f10:	da003d17 	ldw	r8,244(sp)
 4003f14:	88817126 	beq	r17,r2,40044dc <___vfprintf_internal_r+0x1cfc>
 4003f18:	008011c4 	movi	r2,71
 4003f1c:	88829226 	beq	r17,r2,4004968 <___vfprintf_internal_r+0x2188>
 4003f20:	80f9883a 	add	fp,r16,r3
 4003f24:	d9003617 	ldw	r4,216(sp)
 4003f28:	000d883a 	mov	r6,zero
 4003f2c:	000f883a 	mov	r7,zero
 4003f30:	980b883a 	mov	r5,r19
 4003f34:	da003d15 	stw	r8,244(sp)
 4003f38:	400c1ac0 	call	400c1ac <__eqdf2>
 4003f3c:	da003d17 	ldw	r8,244(sp)
 4003f40:	10018d26 	beq	r2,zero,4004578 <___vfprintf_internal_r+0x1d98>
 4003f44:	d8802117 	ldw	r2,132(sp)
 4003f48:	1700062e 	bgeu	r2,fp,4003f64 <___vfprintf_internal_r+0x1784>
 4003f4c:	01000c04 	movi	r4,48
 4003f50:	10c00044 	addi	r3,r2,1
 4003f54:	d8c02115 	stw	r3,132(sp)
 4003f58:	11000005 	stb	r4,0(r2)
 4003f5c:	d8802117 	ldw	r2,132(sp)
 4003f60:	173ffb36 	bltu	r2,fp,4003f50 <__alt_data_end+0xfc003f50>
 4003f64:	1405c83a 	sub	r2,r2,r16
 4003f68:	d8803315 	stw	r2,204(sp)
 4003f6c:	008011c4 	movi	r2,71
 4003f70:	b0817626 	beq	r22,r2,400454c <___vfprintf_internal_r+0x1d6c>
 4003f74:	00801944 	movi	r2,101
 4003f78:	1442810e 	bge	r2,r17,4004980 <___vfprintf_internal_r+0x21a0>
 4003f7c:	d8c02617 	ldw	r3,152(sp)
 4003f80:	00801984 	movi	r2,102
 4003f84:	d8c03215 	stw	r3,200(sp)
 4003f88:	8881fe26 	beq	r17,r2,4004784 <___vfprintf_internal_r+0x1fa4>
 4003f8c:	d8c03217 	ldw	r3,200(sp)
 4003f90:	d9003317 	ldw	r4,204(sp)
 4003f94:	1901dd16 	blt	r3,r4,400470c <___vfprintf_internal_r+0x1f2c>
 4003f98:	9480004c 	andi	r18,r18,1
 4003f9c:	90022b1e 	bne	r18,zero,400484c <___vfprintf_internal_r+0x206c>
 4003fa0:	1805883a 	mov	r2,r3
 4003fa4:	18028016 	blt	r3,zero,40049a8 <___vfprintf_internal_r+0x21c8>
 4003fa8:	d8c03217 	ldw	r3,200(sp)
 4003fac:	044019c4 	movi	r17,103
 4003fb0:	d8c02e15 	stw	r3,184(sp)
 4003fb4:	df002a07 	ldb	fp,168(sp)
 4003fb8:	e001531e 	bne	fp,zero,4004508 <___vfprintf_internal_r+0x1d28>
 4003fbc:	df002783 	ldbu	fp,158(sp)
 4003fc0:	d8802a15 	stw	r2,168(sp)
 4003fc4:	dc802b17 	ldw	r18,172(sp)
 4003fc8:	d8002915 	stw	zero,164(sp)
 4003fcc:	003bd106 	br	4002f14 <__alt_data_end+0xfc002f14>
 4003fd0:	d8802d17 	ldw	r2,180(sp)
 4003fd4:	d8c02d17 	ldw	r3,180(sp)
 4003fd8:	d9002d17 	ldw	r4,180(sp)
 4003fdc:	10800017 	ldw	r2,0(r2)
 4003fe0:	18c00117 	ldw	r3,4(r3)
 4003fe4:	21000204 	addi	r4,r4,8
 4003fe8:	d8803615 	stw	r2,216(sp)
 4003fec:	d8c03815 	stw	r3,224(sp)
 4003ff0:	d9002d15 	stw	r4,180(sp)
 4003ff4:	003b7506 	br	4002dcc <__alt_data_end+0xfc002dcc>
 4003ff8:	ac400007 	ldb	r17,0(r21)
 4003ffc:	003a5906 	br	4002964 <__alt_data_end+0xfc002964>
 4004000:	9080100c 	andi	r2,r18,64
 4004004:	1000a826 	beq	r2,zero,40042a8 <___vfprintf_internal_r+0x1ac8>
 4004008:	d9002d17 	ldw	r4,180(sp)
 400400c:	002d883a 	mov	r22,zero
 4004010:	24c0000b 	ldhu	r19,0(r4)
 4004014:	21000104 	addi	r4,r4,4
 4004018:	d9002d15 	stw	r4,180(sp)
 400401c:	003ccb06 	br	400334c <__alt_data_end+0xfc00334c>
 4004020:	d8c02d17 	ldw	r3,180(sp)
 4004024:	d9002917 	ldw	r4,164(sp)
 4004028:	002d883a 	mov	r22,zero
 400402c:	18800104 	addi	r2,r3,4
 4004030:	1cc00017 	ldw	r19,0(r3)
 4004034:	203ebb0e 	bge	r4,zero,4003b24 <__alt_data_end+0xfc003b24>
 4004038:	003ef106 	br	4003c00 <__alt_data_end+0xfc003c00>
 400403c:	9080040c 	andi	r2,r18,16
 4004040:	1000921e 	bne	r2,zero,400428c <___vfprintf_internal_r+0x1aac>
 4004044:	9480100c 	andi	r18,r18,64
 4004048:	90013926 	beq	r18,zero,4004530 <___vfprintf_internal_r+0x1d50>
 400404c:	d9002d17 	ldw	r4,180(sp)
 4004050:	d9402f17 	ldw	r5,188(sp)
 4004054:	20800017 	ldw	r2,0(r4)
 4004058:	21000104 	addi	r4,r4,4
 400405c:	d9002d15 	stw	r4,180(sp)
 4004060:	1140000d 	sth	r5,0(r2)
 4004064:	003a1606 	br	40028c0 <__alt_data_end+0xfc0028c0>
 4004068:	9080100c 	andi	r2,r18,64
 400406c:	10008026 	beq	r2,zero,4004270 <___vfprintf_internal_r+0x1a90>
 4004070:	d8c02d17 	ldw	r3,180(sp)
 4004074:	1cc0000f 	ldh	r19,0(r3)
 4004078:	18c00104 	addi	r3,r3,4
 400407c:	d8c02d15 	stw	r3,180(sp)
 4004080:	982dd7fa 	srai	r22,r19,31
 4004084:	b005883a 	mov	r2,r22
 4004088:	003b1f06 	br	4002d08 <__alt_data_end+0xfc002d08>
 400408c:	9080100c 	andi	r2,r18,64
 4004090:	d8002785 	stb	zero,158(sp)
 4004094:	10008a1e 	bne	r2,zero,40042c0 <___vfprintf_internal_r+0x1ae0>
 4004098:	d9402d17 	ldw	r5,180(sp)
 400409c:	d8c02917 	ldw	r3,164(sp)
 40040a0:	002d883a 	mov	r22,zero
 40040a4:	28800104 	addi	r2,r5,4
 40040a8:	2cc00017 	ldw	r19,0(r5)
 40040ac:	183e4b0e 	bge	r3,zero,40039dc <__alt_data_end+0xfc0039dc>
 40040b0:	9d86b03a 	or	r3,r19,r22
 40040b4:	d8802d15 	stw	r2,180(sp)
 40040b8:	183e4c1e 	bne	r3,zero,40039ec <__alt_data_end+0xfc0039ec>
 40040bc:	0039883a 	mov	fp,zero
 40040c0:	0005883a 	mov	r2,zero
 40040c4:	003d4006 	br	40035c8 <__alt_data_end+0xfc0035c8>
 40040c8:	01410074 	movhi	r5,1025
 40040cc:	2940bc84 	addi	r5,r5,754
 40040d0:	d9402b15 	stw	r5,172(sp)
 40040d4:	d9402b17 	ldw	r5,172(sp)
 40040d8:	1c47883a 	add	r3,r3,r17
 40040dc:	10800044 	addi	r2,r2,1
 40040e0:	41400015 	stw	r5,0(r8)
 40040e4:	44400115 	stw	r17,4(r8)
 40040e8:	d8c02015 	stw	r3,128(sp)
 40040ec:	d8801f15 	stw	r2,124(sp)
 40040f0:	010001c4 	movi	r4,7
 40040f4:	20bec816 	blt	r4,r2,4003c18 <__alt_data_end+0xfc003c18>
 40040f8:	42000204 	addi	r8,r8,8
 40040fc:	003ecd06 	br	4003c34 <__alt_data_end+0xfc003c34>
 4004100:	d9002917 	ldw	r4,164(sp)
 4004104:	d8002785 	stb	zero,158(sp)
 4004108:	203d2d16 	blt	r4,zero,40035c0 <__alt_data_end+0xfc0035c0>
 400410c:	00bfdfc4 	movi	r2,-129
 4004110:	90a4703a 	and	r18,r18,r2
 4004114:	003a9106 	br	4002b5c <__alt_data_end+0xfc002b5c>
 4004118:	01010074 	movhi	r4,1025
 400411c:	2100bc84 	addi	r4,r4,754
 4004120:	d9002b15 	stw	r4,172(sp)
 4004124:	003c0c06 	br	4003158 <__alt_data_end+0xfc003158>
 4004128:	d9002c17 	ldw	r4,176(sp)
 400412c:	d9801e04 	addi	r6,sp,120
 4004130:	b80b883a 	mov	r5,r23
 4004134:	4007c300 	call	4007c30 <__sprint_r>
 4004138:	103aab1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 400413c:	d8c02017 	ldw	r3,128(sp)
 4004140:	da000404 	addi	r8,sp,16
 4004144:	003d4106 	br	400364c <__alt_data_end+0xfc00364c>
 4004148:	d8801f17 	ldw	r2,124(sp)
 400414c:	01410074 	movhi	r5,1025
 4004150:	01000044 	movi	r4,1
 4004154:	18c00044 	addi	r3,r3,1
 4004158:	10800044 	addi	r2,r2,1
 400415c:	2940bc04 	addi	r5,r5,752
 4004160:	41000115 	stw	r4,4(r8)
 4004164:	41400015 	stw	r5,0(r8)
 4004168:	d8c02015 	stw	r3,128(sp)
 400416c:	d8801f15 	stw	r2,124(sp)
 4004170:	010001c4 	movi	r4,7
 4004174:	20805c16 	blt	r4,r2,40042e8 <___vfprintf_internal_r+0x1b08>
 4004178:	42000204 	addi	r8,r8,8
 400417c:	8800041e 	bne	r17,zero,4004190 <___vfprintf_internal_r+0x19b0>
 4004180:	d8803317 	ldw	r2,204(sp)
 4004184:	1000021e 	bne	r2,zero,4004190 <___vfprintf_internal_r+0x19b0>
 4004188:	9080004c 	andi	r2,r18,1
 400418c:	103c0926 	beq	r2,zero,40031b4 <__alt_data_end+0xfc0031b4>
 4004190:	d9003717 	ldw	r4,220(sp)
 4004194:	d8801f17 	ldw	r2,124(sp)
 4004198:	d9403417 	ldw	r5,208(sp)
 400419c:	20c7883a 	add	r3,r4,r3
 40041a0:	10800044 	addi	r2,r2,1
 40041a4:	41000115 	stw	r4,4(r8)
 40041a8:	41400015 	stw	r5,0(r8)
 40041ac:	d8c02015 	stw	r3,128(sp)
 40041b0:	d8801f15 	stw	r2,124(sp)
 40041b4:	010001c4 	movi	r4,7
 40041b8:	20812116 	blt	r4,r2,4004640 <___vfprintf_internal_r+0x1e60>
 40041bc:	42000204 	addi	r8,r8,8
 40041c0:	0463c83a 	sub	r17,zero,r17
 40041c4:	0440730e 	bge	zero,r17,4004394 <___vfprintf_internal_r+0x1bb4>
 40041c8:	05800404 	movi	r22,16
 40041cc:	b440860e 	bge	r22,r17,40043e8 <___vfprintf_internal_r+0x1c08>
 40041d0:	01410074 	movhi	r5,1025
 40041d4:	2940bc84 	addi	r5,r5,754
 40041d8:	d9402b15 	stw	r5,172(sp)
 40041dc:	070001c4 	movi	fp,7
 40041e0:	dcc02c17 	ldw	r19,176(sp)
 40041e4:	00000306 	br	40041f4 <___vfprintf_internal_r+0x1a14>
 40041e8:	42000204 	addi	r8,r8,8
 40041ec:	8c7ffc04 	addi	r17,r17,-16
 40041f0:	b440800e 	bge	r22,r17,40043f4 <___vfprintf_internal_r+0x1c14>
 40041f4:	18c00404 	addi	r3,r3,16
 40041f8:	10800044 	addi	r2,r2,1
 40041fc:	45000015 	stw	r20,0(r8)
 4004200:	45800115 	stw	r22,4(r8)
 4004204:	d8c02015 	stw	r3,128(sp)
 4004208:	d8801f15 	stw	r2,124(sp)
 400420c:	e0bff60e 	bge	fp,r2,40041e8 <__alt_data_end+0xfc0041e8>
 4004210:	d9801e04 	addi	r6,sp,120
 4004214:	b80b883a 	mov	r5,r23
 4004218:	9809883a 	mov	r4,r19
 400421c:	4007c300 	call	4007c30 <__sprint_r>
 4004220:	103a711e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4004224:	d8c02017 	ldw	r3,128(sp)
 4004228:	d8801f17 	ldw	r2,124(sp)
 400422c:	da000404 	addi	r8,sp,16
 4004230:	003fee06 	br	40041ec <__alt_data_end+0xfc0041ec>
 4004234:	00bfffc4 	movi	r2,-1
 4004238:	003a6f06 	br	4002bf8 <__alt_data_end+0xfc002bf8>
 400423c:	008011c4 	movi	r2,71
 4004240:	1440b816 	blt	r2,r17,4004524 <___vfprintf_internal_r+0x1d44>
 4004244:	04010074 	movhi	r16,1025
 4004248:	8400ae04 	addi	r16,r16,696
 400424c:	00c000c4 	movi	r3,3
 4004250:	00bfdfc4 	movi	r2,-129
 4004254:	d8c02a15 	stw	r3,168(sp)
 4004258:	90a4703a 	and	r18,r18,r2
 400425c:	df002783 	ldbu	fp,158(sp)
 4004260:	d8c02e15 	stw	r3,184(sp)
 4004264:	d8002915 	stw	zero,164(sp)
 4004268:	d8003215 	stw	zero,200(sp)
 400426c:	003b2906 	br	4002f14 <__alt_data_end+0xfc002f14>
 4004270:	d9002d17 	ldw	r4,180(sp)
 4004274:	24c00017 	ldw	r19,0(r4)
 4004278:	21000104 	addi	r4,r4,4
 400427c:	d9002d15 	stw	r4,180(sp)
 4004280:	982dd7fa 	srai	r22,r19,31
 4004284:	b005883a 	mov	r2,r22
 4004288:	003a9f06 	br	4002d08 <__alt_data_end+0xfc002d08>
 400428c:	d9402d17 	ldw	r5,180(sp)
 4004290:	d8c02f17 	ldw	r3,188(sp)
 4004294:	28800017 	ldw	r2,0(r5)
 4004298:	29400104 	addi	r5,r5,4
 400429c:	d9402d15 	stw	r5,180(sp)
 40042a0:	10c00015 	stw	r3,0(r2)
 40042a4:	00398606 	br	40028c0 <__alt_data_end+0xfc0028c0>
 40042a8:	d9402d17 	ldw	r5,180(sp)
 40042ac:	002d883a 	mov	r22,zero
 40042b0:	2cc00017 	ldw	r19,0(r5)
 40042b4:	29400104 	addi	r5,r5,4
 40042b8:	d9402d15 	stw	r5,180(sp)
 40042bc:	003c2306 	br	400334c <__alt_data_end+0xfc00334c>
 40042c0:	d8c02d17 	ldw	r3,180(sp)
 40042c4:	d9002917 	ldw	r4,164(sp)
 40042c8:	002d883a 	mov	r22,zero
 40042cc:	18800104 	addi	r2,r3,4
 40042d0:	1cc0000b 	ldhu	r19,0(r3)
 40042d4:	203dc10e 	bge	r4,zero,40039dc <__alt_data_end+0xfc0039dc>
 40042d8:	003f7506 	br	40040b0 <__alt_data_end+0xfc0040b0>
 40042dc:	04010074 	movhi	r16,1025
 40042e0:	8400ac04 	addi	r16,r16,688
 40042e4:	003acc06 	br	4002e18 <__alt_data_end+0xfc002e18>
 40042e8:	d9002c17 	ldw	r4,176(sp)
 40042ec:	d9801e04 	addi	r6,sp,120
 40042f0:	b80b883a 	mov	r5,r23
 40042f4:	4007c300 	call	4007c30 <__sprint_r>
 40042f8:	103a3b1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 40042fc:	dc402617 	ldw	r17,152(sp)
 4004300:	d8c02017 	ldw	r3,128(sp)
 4004304:	da000404 	addi	r8,sp,16
 4004308:	003f9c06 	br	400417c <__alt_data_end+0xfc00417c>
 400430c:	ac400043 	ldbu	r17,1(r21)
 4004310:	94800814 	ori	r18,r18,32
 4004314:	ad400044 	addi	r21,r21,1
 4004318:	8c403fcc 	andi	r17,r17,255
 400431c:	8c40201c 	xori	r17,r17,128
 4004320:	8c7fe004 	addi	r17,r17,-128
 4004324:	00398f06 	br	4002964 <__alt_data_end+0xfc002964>
 4004328:	d8c02d15 	stw	r3,180(sp)
 400432c:	0039883a 	mov	fp,zero
 4004330:	003e3506 	br	4003c08 <__alt_data_end+0xfc003c08>
 4004334:	d9002c17 	ldw	r4,176(sp)
 4004338:	d9801e04 	addi	r6,sp,120
 400433c:	b80b883a 	mov	r5,r23
 4004340:	4007c300 	call	4007c30 <__sprint_r>
 4004344:	103a281e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4004348:	d8c02017 	ldw	r3,128(sp)
 400434c:	da000404 	addi	r8,sp,16
 4004350:	003cd006 	br	4003694 <__alt_data_end+0xfc003694>
 4004354:	8009883a 	mov	r4,r16
 4004358:	da003d15 	stw	r8,244(sp)
 400435c:	40024f40 	call	40024f4 <strlen>
 4004360:	d8802e15 	stw	r2,184(sp)
 4004364:	da003d17 	ldw	r8,244(sp)
 4004368:	103c340e 	bge	r2,zero,400343c <__alt_data_end+0xfc00343c>
 400436c:	0005883a 	mov	r2,zero
 4004370:	003c3206 	br	400343c <__alt_data_end+0xfc00343c>
 4004374:	d9002c17 	ldw	r4,176(sp)
 4004378:	d9801e04 	addi	r6,sp,120
 400437c:	b80b883a 	mov	r5,r23
 4004380:	4007c300 	call	4007c30 <__sprint_r>
 4004384:	103a181e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4004388:	d8c02017 	ldw	r3,128(sp)
 400438c:	d8801f17 	ldw	r2,124(sp)
 4004390:	da000404 	addi	r8,sp,16
 4004394:	d9403317 	ldw	r5,204(sp)
 4004398:	10800044 	addi	r2,r2,1
 400439c:	44000015 	stw	r16,0(r8)
 40043a0:	28c7883a 	add	r3,r5,r3
 40043a4:	003b7d06 	br	400319c <__alt_data_end+0xfc00319c>
 40043a8:	01010074 	movhi	r4,1025
 40043ac:	2100c084 	addi	r4,r4,770
 40043b0:	d9003515 	stw	r4,212(sp)
 40043b4:	003b1406 	br	4003008 <__alt_data_end+0xfc003008>
 40043b8:	013fffc4 	movi	r4,-1
 40043bc:	003a3506 	br	4002c94 <__alt_data_end+0xfc002c94>
 40043c0:	0023883a 	mov	r17,zero
 40043c4:	003d9d06 	br	4003a3c <__alt_data_end+0xfc003a3c>
 40043c8:	d9002c17 	ldw	r4,176(sp)
 40043cc:	d9801e04 	addi	r6,sp,120
 40043d0:	b80b883a 	mov	r5,r23
 40043d4:	4007c300 	call	4007c30 <__sprint_r>
 40043d8:	103a031e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 40043dc:	d8c02017 	ldw	r3,128(sp)
 40043e0:	da000404 	addi	r8,sp,16
 40043e4:	003d9406 	br	4003a38 <__alt_data_end+0xfc003a38>
 40043e8:	01010074 	movhi	r4,1025
 40043ec:	2100bc84 	addi	r4,r4,754
 40043f0:	d9002b15 	stw	r4,172(sp)
 40043f4:	d9002b17 	ldw	r4,172(sp)
 40043f8:	1c47883a 	add	r3,r3,r17
 40043fc:	10800044 	addi	r2,r2,1
 4004400:	41000015 	stw	r4,0(r8)
 4004404:	44400115 	stw	r17,4(r8)
 4004408:	d8c02015 	stw	r3,128(sp)
 400440c:	d8801f15 	stw	r2,124(sp)
 4004410:	010001c4 	movi	r4,7
 4004414:	20bfd716 	blt	r4,r2,4004374 <__alt_data_end+0xfc004374>
 4004418:	42000204 	addi	r8,r8,8
 400441c:	003fdd06 	br	4004394 <__alt_data_end+0xfc004394>
 4004420:	d9002c17 	ldw	r4,176(sp)
 4004424:	d9801e04 	addi	r6,sp,120
 4004428:	b80b883a 	mov	r5,r23
 400442c:	4007c300 	call	4007c30 <__sprint_r>
 4004430:	1039ed1e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4004434:	d8802617 	ldw	r2,152(sp)
 4004438:	d8c02017 	ldw	r3,128(sp)
 400443c:	da000404 	addi	r8,sp,16
 4004440:	003e1006 	br	4003c84 <__alt_data_end+0xfc003c84>
 4004444:	00800044 	movi	r2,1
 4004448:	10803fcc 	andi	r2,r2,255
 400444c:	00c00044 	movi	r3,1
 4004450:	10fa3526 	beq	r2,r3,4002d28 <__alt_data_end+0xfc002d28>
 4004454:	00c00084 	movi	r3,2
 4004458:	10fbcb26 	beq	r2,r3,4003388 <__alt_data_end+0xfc003388>
 400445c:	003a8f06 	br	4002e9c <__alt_data_end+0xfc002e9c>
 4004460:	01010074 	movhi	r4,1025
 4004464:	2100c084 	addi	r4,r4,770
 4004468:	d9003515 	stw	r4,212(sp)
 400446c:	003b7606 	br	4003248 <__alt_data_end+0xfc003248>
 4004470:	d8802917 	ldw	r2,164(sp)
 4004474:	00c00184 	movi	r3,6
 4004478:	1880012e 	bgeu	r3,r2,4004480 <___vfprintf_internal_r+0x1ca0>
 400447c:	1805883a 	mov	r2,r3
 4004480:	d8802e15 	stw	r2,184(sp)
 4004484:	1000ef16 	blt	r2,zero,4004844 <___vfprintf_internal_r+0x2064>
 4004488:	04010074 	movhi	r16,1025
 400448c:	d8802a15 	stw	r2,168(sp)
 4004490:	dcc02d15 	stw	r19,180(sp)
 4004494:	d8002915 	stw	zero,164(sp)
 4004498:	d8003215 	stw	zero,200(sp)
 400449c:	8400ba04 	addi	r16,r16,744
 40044a0:	0039883a 	mov	fp,zero
 40044a4:	003aa206 	br	4002f30 <__alt_data_end+0xfc002f30>
 40044a8:	0021883a 	mov	r16,zero
 40044ac:	003e0706 	br	4003ccc <__alt_data_end+0xfc003ccc>
 40044b0:	d9002c17 	ldw	r4,176(sp)
 40044b4:	d9801e04 	addi	r6,sp,120
 40044b8:	b80b883a 	mov	r5,r23
 40044bc:	4007c300 	call	4007c30 <__sprint_r>
 40044c0:	1039c91e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 40044c4:	d8802617 	ldw	r2,152(sp)
 40044c8:	d9403317 	ldw	r5,204(sp)
 40044cc:	d8c02017 	ldw	r3,128(sp)
 40044d0:	da000404 	addi	r8,sp,16
 40044d4:	2885c83a 	sub	r2,r5,r2
 40044d8:	003dfb06 	br	4003cc8 <__alt_data_end+0xfc003cc8>
 40044dc:	9080004c 	andi	r2,r18,1
 40044e0:	103e8f1e 	bne	r2,zero,4003f20 <__alt_data_end+0xfc003f20>
 40044e4:	d8802117 	ldw	r2,132(sp)
 40044e8:	003e9e06 	br	4003f64 <__alt_data_end+0xfc003f64>
 40044ec:	1025883a 	mov	r18,r2
 40044f0:	0039883a 	mov	fp,zero
 40044f4:	00800084 	movi	r2,2
 40044f8:	003fd306 	br	4004448 <__alt_data_end+0xfc004448>
 40044fc:	07000b44 	movi	fp,45
 4004500:	df002785 	stb	fp,158(sp)
 4004504:	003a4006 	br	4002e08 <__alt_data_end+0xfc002e08>
 4004508:	00c00b44 	movi	r3,45
 400450c:	d8c02785 	stb	r3,158(sp)
 4004510:	d8802a15 	stw	r2,168(sp)
 4004514:	dc802b17 	ldw	r18,172(sp)
 4004518:	d8002915 	stw	zero,164(sp)
 400451c:	07000b44 	movi	fp,45
 4004520:	003a8006 	br	4002f24 <__alt_data_end+0xfc002f24>
 4004524:	04010074 	movhi	r16,1025
 4004528:	8400af04 	addi	r16,r16,700
 400452c:	003f4706 	br	400424c <__alt_data_end+0xfc00424c>
 4004530:	d8c02d17 	ldw	r3,180(sp)
 4004534:	d9002f17 	ldw	r4,188(sp)
 4004538:	18800017 	ldw	r2,0(r3)
 400453c:	18c00104 	addi	r3,r3,4
 4004540:	d8c02d15 	stw	r3,180(sp)
 4004544:	11000015 	stw	r4,0(r2)
 4004548:	0038dd06 	br	40028c0 <__alt_data_end+0xfc0028c0>
 400454c:	dd802617 	ldw	r22,152(sp)
 4004550:	00bfff44 	movi	r2,-3
 4004554:	b0801c16 	blt	r22,r2,40045c8 <___vfprintf_internal_r+0x1de8>
 4004558:	d9402917 	ldw	r5,164(sp)
 400455c:	2d801a16 	blt	r5,r22,40045c8 <___vfprintf_internal_r+0x1de8>
 4004560:	dd803215 	stw	r22,200(sp)
 4004564:	003e8906 	br	4003f8c <__alt_data_end+0xfc003f8c>
 4004568:	01010074 	movhi	r4,1025
 400456c:	2100bc84 	addi	r4,r4,754
 4004570:	d9002b15 	stw	r4,172(sp)
 4004574:	003c9106 	br	40037bc <__alt_data_end+0xfc0037bc>
 4004578:	e005883a 	mov	r2,fp
 400457c:	003e7906 	br	4003f64 <__alt_data_end+0xfc003f64>
 4004580:	d9402917 	ldw	r5,164(sp)
 4004584:	df002783 	ldbu	fp,158(sp)
 4004588:	dcc02d15 	stw	r19,180(sp)
 400458c:	d9402a15 	stw	r5,168(sp)
 4004590:	d9402e15 	stw	r5,184(sp)
 4004594:	d8002915 	stw	zero,164(sp)
 4004598:	d8003215 	stw	zero,200(sp)
 400459c:	003a5d06 	br	4002f14 <__alt_data_end+0xfc002f14>
 40045a0:	9080004c 	andi	r2,r18,1
 40045a4:	0039883a 	mov	fp,zero
 40045a8:	10000426 	beq	r2,zero,40045bc <___vfprintf_internal_r+0x1ddc>
 40045ac:	00800c04 	movi	r2,48
 40045b0:	dc001dc4 	addi	r16,sp,119
 40045b4:	d8801dc5 	stb	r2,119(sp)
 40045b8:	003b8006 	br	40033bc <__alt_data_end+0xfc0033bc>
 40045bc:	d8002e15 	stw	zero,184(sp)
 40045c0:	dc001e04 	addi	r16,sp,120
 40045c4:	003a4d06 	br	4002efc <__alt_data_end+0xfc002efc>
 40045c8:	8c7fff84 	addi	r17,r17,-2
 40045cc:	b5bfffc4 	addi	r22,r22,-1
 40045d0:	dd802615 	stw	r22,152(sp)
 40045d4:	dc4022c5 	stb	r17,139(sp)
 40045d8:	b000bf16 	blt	r22,zero,40048d8 <___vfprintf_internal_r+0x20f8>
 40045dc:	00800ac4 	movi	r2,43
 40045e0:	d8802305 	stb	r2,140(sp)
 40045e4:	00800244 	movi	r2,9
 40045e8:	15807016 	blt	r2,r22,40047ac <___vfprintf_internal_r+0x1fcc>
 40045ec:	00800c04 	movi	r2,48
 40045f0:	b5800c04 	addi	r22,r22,48
 40045f4:	d8802345 	stb	r2,141(sp)
 40045f8:	dd802385 	stb	r22,142(sp)
 40045fc:	d88023c4 	addi	r2,sp,143
 4004600:	df0022c4 	addi	fp,sp,139
 4004604:	d8c03317 	ldw	r3,204(sp)
 4004608:	1739c83a 	sub	fp,r2,fp
 400460c:	d9003317 	ldw	r4,204(sp)
 4004610:	e0c7883a 	add	r3,fp,r3
 4004614:	df003a15 	stw	fp,232(sp)
 4004618:	d8c02e15 	stw	r3,184(sp)
 400461c:	00800044 	movi	r2,1
 4004620:	1100b30e 	bge	r2,r4,40048f0 <___vfprintf_internal_r+0x2110>
 4004624:	d8c02e17 	ldw	r3,184(sp)
 4004628:	18c00044 	addi	r3,r3,1
 400462c:	d8c02e15 	stw	r3,184(sp)
 4004630:	1805883a 	mov	r2,r3
 4004634:	1800ac16 	blt	r3,zero,40048e8 <___vfprintf_internal_r+0x2108>
 4004638:	d8003215 	stw	zero,200(sp)
 400463c:	003e5d06 	br	4003fb4 <__alt_data_end+0xfc003fb4>
 4004640:	d9002c17 	ldw	r4,176(sp)
 4004644:	d9801e04 	addi	r6,sp,120
 4004648:	b80b883a 	mov	r5,r23
 400464c:	4007c300 	call	4007c30 <__sprint_r>
 4004650:	1039651e 	bne	r2,zero,4002be8 <__alt_data_end+0xfc002be8>
 4004654:	dc402617 	ldw	r17,152(sp)
 4004658:	d8c02017 	ldw	r3,128(sp)
 400465c:	d8801f17 	ldw	r2,124(sp)
 4004660:	da000404 	addi	r8,sp,16
 4004664:	003ed606 	br	40041c0 <__alt_data_end+0xfc0041c0>
 4004668:	582b883a 	mov	r21,r11
 400466c:	d8002915 	stw	zero,164(sp)
 4004670:	0038bd06 	br	4002968 <__alt_data_end+0xfc002968>
 4004674:	d8802917 	ldw	r2,164(sp)
 4004678:	103e071e 	bne	r2,zero,4003e98 <__alt_data_end+0xfc003e98>
 400467c:	dc002915 	stw	r16,164(sp)
 4004680:	003e0506 	br	4003e98 <__alt_data_end+0xfc003e98>
 4004684:	d9002917 	ldw	r4,164(sp)
 4004688:	20c00044 	addi	r3,r4,1
 400468c:	003e0f06 	br	4003ecc <__alt_data_end+0xfc003ecc>
 4004690:	01400184 	movi	r5,6
 4004694:	d9402915 	stw	r5,164(sp)
 4004698:	003dff06 	br	4003e98 <__alt_data_end+0xfc003e98>
 400469c:	d8802104 	addi	r2,sp,132
 40046a0:	d8800315 	stw	r2,12(sp)
 40046a4:	d8802504 	addi	r2,sp,148
 40046a8:	d8800215 	stw	r2,8(sp)
 40046ac:	d8802604 	addi	r2,sp,152
 40046b0:	d8800115 	stw	r2,4(sp)
 40046b4:	d8802917 	ldw	r2,164(sp)
 40046b8:	d9403617 	ldw	r5,216(sp)
 40046bc:	d9002c17 	ldw	r4,176(sp)
 40046c0:	d8800015 	stw	r2,0(sp)
 40046c4:	01c000c4 	movi	r7,3
 40046c8:	980d883a 	mov	r6,r19
 40046cc:	da003d15 	stw	r8,244(sp)
 40046d0:	4004eb80 	call	4004eb8 <_dtoa_r>
 40046d4:	d8c02917 	ldw	r3,164(sp)
 40046d8:	da003d17 	ldw	r8,244(sp)
 40046dc:	1021883a 	mov	r16,r2
 40046e0:	10f9883a 	add	fp,r2,r3
 40046e4:	81000007 	ldb	r4,0(r16)
 40046e8:	00800c04 	movi	r2,48
 40046ec:	20805e26 	beq	r4,r2,4004868 <___vfprintf_internal_r+0x2088>
 40046f0:	d8c02617 	ldw	r3,152(sp)
 40046f4:	e0f9883a 	add	fp,fp,r3
 40046f8:	003e0a06 	br	4003f24 <__alt_data_end+0xfc003f24>
 40046fc:	00c00b44 	movi	r3,45
 4004700:	24e0003c 	xorhi	r19,r4,32768
 4004704:	d8c02a05 	stb	r3,168(sp)
 4004708:	003de906 	br	4003eb0 <__alt_data_end+0xfc003eb0>
 400470c:	d8c03217 	ldw	r3,200(sp)
 4004710:	00c07a0e 	bge	zero,r3,40048fc <___vfprintf_internal_r+0x211c>
 4004714:	00800044 	movi	r2,1
 4004718:	d9003317 	ldw	r4,204(sp)
 400471c:	1105883a 	add	r2,r2,r4
 4004720:	d8802e15 	stw	r2,184(sp)
 4004724:	10004e16 	blt	r2,zero,4004860 <___vfprintf_internal_r+0x2080>
 4004728:	044019c4 	movi	r17,103
 400472c:	003e2106 	br	4003fb4 <__alt_data_end+0xfc003fb4>
 4004730:	d9002917 	ldw	r4,164(sp)
 4004734:	d8802104 	addi	r2,sp,132
 4004738:	d8800315 	stw	r2,12(sp)
 400473c:	d9000015 	stw	r4,0(sp)
 4004740:	d8802504 	addi	r2,sp,148
 4004744:	d9403617 	ldw	r5,216(sp)
 4004748:	d9002c17 	ldw	r4,176(sp)
 400474c:	d8800215 	stw	r2,8(sp)
 4004750:	d8802604 	addi	r2,sp,152
 4004754:	d8800115 	stw	r2,4(sp)
 4004758:	01c000c4 	movi	r7,3
 400475c:	980d883a 	mov	r6,r19
 4004760:	da003d15 	stw	r8,244(sp)
 4004764:	4004eb80 	call	4004eb8 <_dtoa_r>
 4004768:	d8c02917 	ldw	r3,164(sp)
 400476c:	da003d17 	ldw	r8,244(sp)
 4004770:	1021883a 	mov	r16,r2
 4004774:	00801184 	movi	r2,70
 4004778:	80f9883a 	add	fp,r16,r3
 400477c:	88bfd926 	beq	r17,r2,40046e4 <__alt_data_end+0xfc0046e4>
 4004780:	003de806 	br	4003f24 <__alt_data_end+0xfc003f24>
 4004784:	d9002917 	ldw	r4,164(sp)
 4004788:	00c04d0e 	bge	zero,r3,40048c0 <___vfprintf_internal_r+0x20e0>
 400478c:	2000441e 	bne	r4,zero,40048a0 <___vfprintf_internal_r+0x20c0>
 4004790:	9480004c 	andi	r18,r18,1
 4004794:	9000421e 	bne	r18,zero,40048a0 <___vfprintf_internal_r+0x20c0>
 4004798:	1805883a 	mov	r2,r3
 400479c:	18007016 	blt	r3,zero,4004960 <___vfprintf_internal_r+0x2180>
 40047a0:	d8c03217 	ldw	r3,200(sp)
 40047a4:	d8c02e15 	stw	r3,184(sp)
 40047a8:	003e0206 	br	4003fb4 <__alt_data_end+0xfc003fb4>
 40047ac:	df0022c4 	addi	fp,sp,139
 40047b0:	dc002915 	stw	r16,164(sp)
 40047b4:	4027883a 	mov	r19,r8
 40047b8:	e021883a 	mov	r16,fp
 40047bc:	b009883a 	mov	r4,r22
 40047c0:	01400284 	movi	r5,10
 40047c4:	400aee80 	call	400aee8 <__modsi3>
 40047c8:	10800c04 	addi	r2,r2,48
 40047cc:	843fffc4 	addi	r16,r16,-1
 40047d0:	b009883a 	mov	r4,r22
 40047d4:	01400284 	movi	r5,10
 40047d8:	80800005 	stb	r2,0(r16)
 40047dc:	400ae640 	call	400ae64 <__divsi3>
 40047e0:	102d883a 	mov	r22,r2
 40047e4:	00800244 	movi	r2,9
 40047e8:	15bff416 	blt	r2,r22,40047bc <__alt_data_end+0xfc0047bc>
 40047ec:	9811883a 	mov	r8,r19
 40047f0:	b0800c04 	addi	r2,r22,48
 40047f4:	8027883a 	mov	r19,r16
 40047f8:	997fffc4 	addi	r5,r19,-1
 40047fc:	98bfffc5 	stb	r2,-1(r19)
 4004800:	dc002917 	ldw	r16,164(sp)
 4004804:	2f006a2e 	bgeu	r5,fp,40049b0 <___vfprintf_internal_r+0x21d0>
 4004808:	d9c02384 	addi	r7,sp,142
 400480c:	3ccfc83a 	sub	r7,r7,r19
 4004810:	d9002344 	addi	r4,sp,141
 4004814:	e1cf883a 	add	r7,fp,r7
 4004818:	00000106 	br	4004820 <___vfprintf_internal_r+0x2040>
 400481c:	28800003 	ldbu	r2,0(r5)
 4004820:	20800005 	stb	r2,0(r4)
 4004824:	21000044 	addi	r4,r4,1
 4004828:	29400044 	addi	r5,r5,1
 400482c:	393ffb1e 	bne	r7,r4,400481c <__alt_data_end+0xfc00481c>
 4004830:	d8802304 	addi	r2,sp,140
 4004834:	14c5c83a 	sub	r2,r2,r19
 4004838:	d8c02344 	addi	r3,sp,141
 400483c:	1885883a 	add	r2,r3,r2
 4004840:	003f7006 	br	4004604 <__alt_data_end+0xfc004604>
 4004844:	0005883a 	mov	r2,zero
 4004848:	003f0f06 	br	4004488 <__alt_data_end+0xfc004488>
 400484c:	d8c03217 	ldw	r3,200(sp)
 4004850:	18c00044 	addi	r3,r3,1
 4004854:	d8c02e15 	stw	r3,184(sp)
 4004858:	1805883a 	mov	r2,r3
 400485c:	183fb20e 	bge	r3,zero,4004728 <__alt_data_end+0xfc004728>
 4004860:	0005883a 	mov	r2,zero
 4004864:	003fb006 	br	4004728 <__alt_data_end+0xfc004728>
 4004868:	d9003617 	ldw	r4,216(sp)
 400486c:	000d883a 	mov	r6,zero
 4004870:	000f883a 	mov	r7,zero
 4004874:	980b883a 	mov	r5,r19
 4004878:	d8c03c15 	stw	r3,240(sp)
 400487c:	da003d15 	stw	r8,244(sp)
 4004880:	400c1ac0 	call	400c1ac <__eqdf2>
 4004884:	d8c03c17 	ldw	r3,240(sp)
 4004888:	da003d17 	ldw	r8,244(sp)
 400488c:	103f9826 	beq	r2,zero,40046f0 <__alt_data_end+0xfc0046f0>
 4004890:	00800044 	movi	r2,1
 4004894:	10c7c83a 	sub	r3,r2,r3
 4004898:	d8c02615 	stw	r3,152(sp)
 400489c:	003f9506 	br	40046f4 <__alt_data_end+0xfc0046f4>
 40048a0:	d9002917 	ldw	r4,164(sp)
 40048a4:	d8c03217 	ldw	r3,200(sp)
 40048a8:	20800044 	addi	r2,r4,1
 40048ac:	1885883a 	add	r2,r3,r2
 40048b0:	d8802e15 	stw	r2,184(sp)
 40048b4:	103dbf0e 	bge	r2,zero,4003fb4 <__alt_data_end+0xfc003fb4>
 40048b8:	0005883a 	mov	r2,zero
 40048bc:	003dbd06 	br	4003fb4 <__alt_data_end+0xfc003fb4>
 40048c0:	2000211e 	bne	r4,zero,4004948 <___vfprintf_internal_r+0x2168>
 40048c4:	9480004c 	andi	r18,r18,1
 40048c8:	90001f1e 	bne	r18,zero,4004948 <___vfprintf_internal_r+0x2168>
 40048cc:	00800044 	movi	r2,1
 40048d0:	d8802e15 	stw	r2,184(sp)
 40048d4:	003db706 	br	4003fb4 <__alt_data_end+0xfc003fb4>
 40048d8:	00800b44 	movi	r2,45
 40048dc:	05adc83a 	sub	r22,zero,r22
 40048e0:	d8802305 	stb	r2,140(sp)
 40048e4:	003f3f06 	br	40045e4 <__alt_data_end+0xfc0045e4>
 40048e8:	0005883a 	mov	r2,zero
 40048ec:	003f5206 	br	4004638 <__alt_data_end+0xfc004638>
 40048f0:	90a4703a 	and	r18,r18,r2
 40048f4:	903f4e26 	beq	r18,zero,4004630 <__alt_data_end+0xfc004630>
 40048f8:	003f4a06 	br	4004624 <__alt_data_end+0xfc004624>
 40048fc:	00800084 	movi	r2,2
 4004900:	10c5c83a 	sub	r2,r2,r3
 4004904:	003f8406 	br	4004718 <__alt_data_end+0xfc004718>
 4004908:	d8802d17 	ldw	r2,180(sp)
 400490c:	d9002d17 	ldw	r4,180(sp)
 4004910:	ac400043 	ldbu	r17,1(r21)
 4004914:	10800017 	ldw	r2,0(r2)
 4004918:	582b883a 	mov	r21,r11
 400491c:	d8802915 	stw	r2,164(sp)
 4004920:	20800104 	addi	r2,r4,4
 4004924:	d9002917 	ldw	r4,164(sp)
 4004928:	d8802d15 	stw	r2,180(sp)
 400492c:	203e7a0e 	bge	r4,zero,4004318 <__alt_data_end+0xfc004318>
 4004930:	8c403fcc 	andi	r17,r17,255
 4004934:	00bfffc4 	movi	r2,-1
 4004938:	8c40201c 	xori	r17,r17,128
 400493c:	d8802915 	stw	r2,164(sp)
 4004940:	8c7fe004 	addi	r17,r17,-128
 4004944:	00380706 	br	4002964 <__alt_data_end+0xfc002964>
 4004948:	d8c02917 	ldw	r3,164(sp)
 400494c:	18c00084 	addi	r3,r3,2
 4004950:	d8c02e15 	stw	r3,184(sp)
 4004954:	1805883a 	mov	r2,r3
 4004958:	183d960e 	bge	r3,zero,4003fb4 <__alt_data_end+0xfc003fb4>
 400495c:	003fd606 	br	40048b8 <__alt_data_end+0xfc0048b8>
 4004960:	0005883a 	mov	r2,zero
 4004964:	003f8e06 	br	40047a0 <__alt_data_end+0xfc0047a0>
 4004968:	9080004c 	andi	r2,r18,1
 400496c:	103f811e 	bne	r2,zero,4004774 <__alt_data_end+0xfc004774>
 4004970:	d8802117 	ldw	r2,132(sp)
 4004974:	1405c83a 	sub	r2,r2,r16
 4004978:	d8803315 	stw	r2,204(sp)
 400497c:	b47ef326 	beq	r22,r17,400454c <__alt_data_end+0xfc00454c>
 4004980:	dd802617 	ldw	r22,152(sp)
 4004984:	003f1106 	br	40045cc <__alt_data_end+0xfc0045cc>
 4004988:	d9c02785 	stb	r7,158(sp)
 400498c:	00390406 	br	4002da0 <__alt_data_end+0xfc002da0>
 4004990:	d9c02785 	stb	r7,158(sp)
 4004994:	0038d306 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4004998:	d9c02785 	stb	r7,158(sp)
 400499c:	003a6106 	br	4003324 <__alt_data_end+0xfc003324>
 40049a0:	d9c02785 	stb	r7,158(sp)
 40049a4:	003af806 	br	4003588 <__alt_data_end+0xfc003588>
 40049a8:	0005883a 	mov	r2,zero
 40049ac:	003d7e06 	br	4003fa8 <__alt_data_end+0xfc003fa8>
 40049b0:	d8802344 	addi	r2,sp,141
 40049b4:	003f1306 	br	4004604 <__alt_data_end+0xfc004604>
 40049b8:	d9c02785 	stb	r7,158(sp)
 40049bc:	00392306 	br	4002e4c <__alt_data_end+0xfc002e4c>
 40049c0:	d9c02785 	stb	r7,158(sp)
 40049c4:	003aa906 	br	400346c <__alt_data_end+0xfc00346c>
 40049c8:	d9c02785 	stb	r7,158(sp)
 40049cc:	003a3d06 	br	40032c4 <__alt_data_end+0xfc0032c4>
 40049d0:	d9c02785 	stb	r7,158(sp)
 40049d4:	003aca06 	br	4003500 <__alt_data_end+0xfc003500>

040049d8 <__vfprintf_internal>:
 40049d8:	00810074 	movhi	r2,1025
 40049dc:	1088c504 	addi	r2,r2,8980
 40049e0:	300f883a 	mov	r7,r6
 40049e4:	280d883a 	mov	r6,r5
 40049e8:	200b883a 	mov	r5,r4
 40049ec:	11000017 	ldw	r4,0(r2)
 40049f0:	40027e01 	jmpi	40027e0 <___vfprintf_internal_r>

040049f4 <__sbprintf>:
 40049f4:	2880030b 	ldhu	r2,12(r5)
 40049f8:	2ac01917 	ldw	r11,100(r5)
 40049fc:	2a80038b 	ldhu	r10,14(r5)
 4004a00:	2a400717 	ldw	r9,28(r5)
 4004a04:	2a000917 	ldw	r8,36(r5)
 4004a08:	defee204 	addi	sp,sp,-1144
 4004a0c:	00c10004 	movi	r3,1024
 4004a10:	dc011a15 	stw	r16,1128(sp)
 4004a14:	10bfff4c 	andi	r2,r2,65533
 4004a18:	2821883a 	mov	r16,r5
 4004a1c:	d8cb883a 	add	r5,sp,r3
 4004a20:	dc811c15 	stw	r18,1136(sp)
 4004a24:	dc411b15 	stw	r17,1132(sp)
 4004a28:	dfc11d15 	stw	ra,1140(sp)
 4004a2c:	2025883a 	mov	r18,r4
 4004a30:	d881030d 	sth	r2,1036(sp)
 4004a34:	dac11915 	stw	r11,1124(sp)
 4004a38:	da81038d 	sth	r10,1038(sp)
 4004a3c:	da410715 	stw	r9,1052(sp)
 4004a40:	da010915 	stw	r8,1060(sp)
 4004a44:	dec10015 	stw	sp,1024(sp)
 4004a48:	dec10415 	stw	sp,1040(sp)
 4004a4c:	d8c10215 	stw	r3,1032(sp)
 4004a50:	d8c10515 	stw	r3,1044(sp)
 4004a54:	d8010615 	stw	zero,1048(sp)
 4004a58:	40027e00 	call	40027e0 <___vfprintf_internal_r>
 4004a5c:	1023883a 	mov	r17,r2
 4004a60:	10000416 	blt	r2,zero,4004a74 <__sbprintf+0x80>
 4004a64:	d9410004 	addi	r5,sp,1024
 4004a68:	9009883a 	mov	r4,r18
 4004a6c:	4000e700 	call	4000e70 <_fflush_r>
 4004a70:	10000d1e 	bne	r2,zero,4004aa8 <__sbprintf+0xb4>
 4004a74:	d881030b 	ldhu	r2,1036(sp)
 4004a78:	1080100c 	andi	r2,r2,64
 4004a7c:	10000326 	beq	r2,zero,4004a8c <__sbprintf+0x98>
 4004a80:	8080030b 	ldhu	r2,12(r16)
 4004a84:	10801014 	ori	r2,r2,64
 4004a88:	8080030d 	sth	r2,12(r16)
 4004a8c:	8805883a 	mov	r2,r17
 4004a90:	dfc11d17 	ldw	ra,1140(sp)
 4004a94:	dc811c17 	ldw	r18,1136(sp)
 4004a98:	dc411b17 	ldw	r17,1132(sp)
 4004a9c:	dc011a17 	ldw	r16,1128(sp)
 4004aa0:	dec11e04 	addi	sp,sp,1144
 4004aa4:	f800283a 	ret
 4004aa8:	047fffc4 	movi	r17,-1
 4004aac:	003ff106 	br	4004a74 <__alt_data_end+0xfc004a74>

04004ab0 <_write_r>:
 4004ab0:	defffd04 	addi	sp,sp,-12
 4004ab4:	2805883a 	mov	r2,r5
 4004ab8:	dc000015 	stw	r16,0(sp)
 4004abc:	04010074 	movhi	r16,1025
 4004ac0:	dc400115 	stw	r17,4(sp)
 4004ac4:	300b883a 	mov	r5,r6
 4004ac8:	840fa304 	addi	r16,r16,16012
 4004acc:	2023883a 	mov	r17,r4
 4004ad0:	380d883a 	mov	r6,r7
 4004ad4:	1009883a 	mov	r4,r2
 4004ad8:	dfc00215 	stw	ra,8(sp)
 4004adc:	80000015 	stw	zero,0(r16)
 4004ae0:	400e1780 	call	400e178 <write>
 4004ae4:	00ffffc4 	movi	r3,-1
 4004ae8:	10c00526 	beq	r2,r3,4004b00 <_write_r+0x50>
 4004aec:	dfc00217 	ldw	ra,8(sp)
 4004af0:	dc400117 	ldw	r17,4(sp)
 4004af4:	dc000017 	ldw	r16,0(sp)
 4004af8:	dec00304 	addi	sp,sp,12
 4004afc:	f800283a 	ret
 4004b00:	80c00017 	ldw	r3,0(r16)
 4004b04:	183ff926 	beq	r3,zero,4004aec <__alt_data_end+0xfc004aec>
 4004b08:	88c00015 	stw	r3,0(r17)
 4004b0c:	003ff706 	br	4004aec <__alt_data_end+0xfc004aec>

04004b10 <__swsetup_r>:
 4004b10:	00810074 	movhi	r2,1025
 4004b14:	defffd04 	addi	sp,sp,-12
 4004b18:	1088c504 	addi	r2,r2,8980
 4004b1c:	dc400115 	stw	r17,4(sp)
 4004b20:	2023883a 	mov	r17,r4
 4004b24:	11000017 	ldw	r4,0(r2)
 4004b28:	dc000015 	stw	r16,0(sp)
 4004b2c:	dfc00215 	stw	ra,8(sp)
 4004b30:	2821883a 	mov	r16,r5
 4004b34:	20000226 	beq	r4,zero,4004b40 <__swsetup_r+0x30>
 4004b38:	20800e17 	ldw	r2,56(r4)
 4004b3c:	10003126 	beq	r2,zero,4004c04 <__swsetup_r+0xf4>
 4004b40:	8080030b 	ldhu	r2,12(r16)
 4004b44:	10c0020c 	andi	r3,r2,8
 4004b48:	1009883a 	mov	r4,r2
 4004b4c:	18000f26 	beq	r3,zero,4004b8c <__swsetup_r+0x7c>
 4004b50:	80c00417 	ldw	r3,16(r16)
 4004b54:	18001526 	beq	r3,zero,4004bac <__swsetup_r+0x9c>
 4004b58:	1100004c 	andi	r4,r2,1
 4004b5c:	20001c1e 	bne	r4,zero,4004bd0 <__swsetup_r+0xc0>
 4004b60:	1080008c 	andi	r2,r2,2
 4004b64:	1000291e 	bne	r2,zero,4004c0c <__swsetup_r+0xfc>
 4004b68:	80800517 	ldw	r2,20(r16)
 4004b6c:	80800215 	stw	r2,8(r16)
 4004b70:	18001c26 	beq	r3,zero,4004be4 <__swsetup_r+0xd4>
 4004b74:	0005883a 	mov	r2,zero
 4004b78:	dfc00217 	ldw	ra,8(sp)
 4004b7c:	dc400117 	ldw	r17,4(sp)
 4004b80:	dc000017 	ldw	r16,0(sp)
 4004b84:	dec00304 	addi	sp,sp,12
 4004b88:	f800283a 	ret
 4004b8c:	2080040c 	andi	r2,r4,16
 4004b90:	10002e26 	beq	r2,zero,4004c4c <__swsetup_r+0x13c>
 4004b94:	2080010c 	andi	r2,r4,4
 4004b98:	10001e1e 	bne	r2,zero,4004c14 <__swsetup_r+0x104>
 4004b9c:	80c00417 	ldw	r3,16(r16)
 4004ba0:	20800214 	ori	r2,r4,8
 4004ba4:	8080030d 	sth	r2,12(r16)
 4004ba8:	183feb1e 	bne	r3,zero,4004b58 <__alt_data_end+0xfc004b58>
 4004bac:	1100a00c 	andi	r4,r2,640
 4004bb0:	01408004 	movi	r5,512
 4004bb4:	217fe826 	beq	r4,r5,4004b58 <__alt_data_end+0xfc004b58>
 4004bb8:	800b883a 	mov	r5,r16
 4004bbc:	8809883a 	mov	r4,r17
 4004bc0:	400667c0 	call	400667c <__smakebuf_r>
 4004bc4:	8080030b 	ldhu	r2,12(r16)
 4004bc8:	80c00417 	ldw	r3,16(r16)
 4004bcc:	003fe206 	br	4004b58 <__alt_data_end+0xfc004b58>
 4004bd0:	80800517 	ldw	r2,20(r16)
 4004bd4:	80000215 	stw	zero,8(r16)
 4004bd8:	0085c83a 	sub	r2,zero,r2
 4004bdc:	80800615 	stw	r2,24(r16)
 4004be0:	183fe41e 	bne	r3,zero,4004b74 <__alt_data_end+0xfc004b74>
 4004be4:	80c0030b 	ldhu	r3,12(r16)
 4004be8:	0005883a 	mov	r2,zero
 4004bec:	1900200c 	andi	r4,r3,128
 4004bf0:	203fe126 	beq	r4,zero,4004b78 <__alt_data_end+0xfc004b78>
 4004bf4:	18c01014 	ori	r3,r3,64
 4004bf8:	80c0030d 	sth	r3,12(r16)
 4004bfc:	00bfffc4 	movi	r2,-1
 4004c00:	003fdd06 	br	4004b78 <__alt_data_end+0xfc004b78>
 4004c04:	400124c0 	call	400124c <__sinit>
 4004c08:	003fcd06 	br	4004b40 <__alt_data_end+0xfc004b40>
 4004c0c:	0005883a 	mov	r2,zero
 4004c10:	003fd606 	br	4004b6c <__alt_data_end+0xfc004b6c>
 4004c14:	81400c17 	ldw	r5,48(r16)
 4004c18:	28000626 	beq	r5,zero,4004c34 <__swsetup_r+0x124>
 4004c1c:	80801004 	addi	r2,r16,64
 4004c20:	28800326 	beq	r5,r2,4004c30 <__swsetup_r+0x120>
 4004c24:	8809883a 	mov	r4,r17
 4004c28:	40013c00 	call	40013c0 <_free_r>
 4004c2c:	8100030b 	ldhu	r4,12(r16)
 4004c30:	80000c15 	stw	zero,48(r16)
 4004c34:	80c00417 	ldw	r3,16(r16)
 4004c38:	00bff6c4 	movi	r2,-37
 4004c3c:	1108703a 	and	r4,r2,r4
 4004c40:	80000115 	stw	zero,4(r16)
 4004c44:	80c00015 	stw	r3,0(r16)
 4004c48:	003fd506 	br	4004ba0 <__alt_data_end+0xfc004ba0>
 4004c4c:	00800244 	movi	r2,9
 4004c50:	88800015 	stw	r2,0(r17)
 4004c54:	20801014 	ori	r2,r4,64
 4004c58:	8080030d 	sth	r2,12(r16)
 4004c5c:	00bfffc4 	movi	r2,-1
 4004c60:	003fc506 	br	4004b78 <__alt_data_end+0xfc004b78>

04004c64 <_close_r>:
 4004c64:	defffd04 	addi	sp,sp,-12
 4004c68:	dc000015 	stw	r16,0(sp)
 4004c6c:	04010074 	movhi	r16,1025
 4004c70:	dc400115 	stw	r17,4(sp)
 4004c74:	840fa304 	addi	r16,r16,16012
 4004c78:	2023883a 	mov	r17,r4
 4004c7c:	2809883a 	mov	r4,r5
 4004c80:	dfc00215 	stw	ra,8(sp)
 4004c84:	80000015 	stw	zero,0(r16)
 4004c88:	400d6bc0 	call	400d6bc <close>
 4004c8c:	00ffffc4 	movi	r3,-1
 4004c90:	10c00526 	beq	r2,r3,4004ca8 <_close_r+0x44>
 4004c94:	dfc00217 	ldw	ra,8(sp)
 4004c98:	dc400117 	ldw	r17,4(sp)
 4004c9c:	dc000017 	ldw	r16,0(sp)
 4004ca0:	dec00304 	addi	sp,sp,12
 4004ca4:	f800283a 	ret
 4004ca8:	80c00017 	ldw	r3,0(r16)
 4004cac:	183ff926 	beq	r3,zero,4004c94 <__alt_data_end+0xfc004c94>
 4004cb0:	88c00015 	stw	r3,0(r17)
 4004cb4:	003ff706 	br	4004c94 <__alt_data_end+0xfc004c94>

04004cb8 <quorem>:
 4004cb8:	defff704 	addi	sp,sp,-36
 4004cbc:	dc800215 	stw	r18,8(sp)
 4004cc0:	20800417 	ldw	r2,16(r4)
 4004cc4:	2c800417 	ldw	r18,16(r5)
 4004cc8:	dfc00815 	stw	ra,32(sp)
 4004ccc:	ddc00715 	stw	r23,28(sp)
 4004cd0:	dd800615 	stw	r22,24(sp)
 4004cd4:	dd400515 	stw	r21,20(sp)
 4004cd8:	dd000415 	stw	r20,16(sp)
 4004cdc:	dcc00315 	stw	r19,12(sp)
 4004ce0:	dc400115 	stw	r17,4(sp)
 4004ce4:	dc000015 	stw	r16,0(sp)
 4004ce8:	14807116 	blt	r2,r18,4004eb0 <quorem+0x1f8>
 4004cec:	94bfffc4 	addi	r18,r18,-1
 4004cf0:	94ad883a 	add	r22,r18,r18
 4004cf4:	b5ad883a 	add	r22,r22,r22
 4004cf8:	2c400504 	addi	r17,r5,20
 4004cfc:	8da9883a 	add	r20,r17,r22
 4004d00:	25400504 	addi	r21,r4,20
 4004d04:	282f883a 	mov	r23,r5
 4004d08:	adad883a 	add	r22,r21,r22
 4004d0c:	a1400017 	ldw	r5,0(r20)
 4004d10:	2021883a 	mov	r16,r4
 4004d14:	b1000017 	ldw	r4,0(r22)
 4004d18:	29400044 	addi	r5,r5,1
 4004d1c:	400af5c0 	call	400af5c <__udivsi3>
 4004d20:	1027883a 	mov	r19,r2
 4004d24:	10002c26 	beq	r2,zero,4004dd8 <quorem+0x120>
 4004d28:	a813883a 	mov	r9,r21
 4004d2c:	880b883a 	mov	r5,r17
 4004d30:	0009883a 	mov	r4,zero
 4004d34:	000d883a 	mov	r6,zero
 4004d38:	2a000017 	ldw	r8,0(r5)
 4004d3c:	49c00017 	ldw	r7,0(r9)
 4004d40:	29400104 	addi	r5,r5,4
 4004d44:	40bfffcc 	andi	r2,r8,65535
 4004d48:	14c5383a 	mul	r2,r2,r19
 4004d4c:	4010d43a 	srli	r8,r8,16
 4004d50:	38ffffcc 	andi	r3,r7,65535
 4004d54:	1105883a 	add	r2,r2,r4
 4004d58:	1008d43a 	srli	r4,r2,16
 4004d5c:	44d1383a 	mul	r8,r8,r19
 4004d60:	198d883a 	add	r6,r3,r6
 4004d64:	10ffffcc 	andi	r3,r2,65535
 4004d68:	30c7c83a 	sub	r3,r6,r3
 4004d6c:	380ed43a 	srli	r7,r7,16
 4004d70:	4105883a 	add	r2,r8,r4
 4004d74:	180dd43a 	srai	r6,r3,16
 4004d78:	113fffcc 	andi	r4,r2,65535
 4004d7c:	390fc83a 	sub	r7,r7,r4
 4004d80:	398d883a 	add	r6,r7,r6
 4004d84:	300e943a 	slli	r7,r6,16
 4004d88:	18ffffcc 	andi	r3,r3,65535
 4004d8c:	1008d43a 	srli	r4,r2,16
 4004d90:	38ceb03a 	or	r7,r7,r3
 4004d94:	49c00015 	stw	r7,0(r9)
 4004d98:	300dd43a 	srai	r6,r6,16
 4004d9c:	4a400104 	addi	r9,r9,4
 4004da0:	a17fe52e 	bgeu	r20,r5,4004d38 <__alt_data_end+0xfc004d38>
 4004da4:	b0800017 	ldw	r2,0(r22)
 4004da8:	10000b1e 	bne	r2,zero,4004dd8 <quorem+0x120>
 4004dac:	b0bfff04 	addi	r2,r22,-4
 4004db0:	a880082e 	bgeu	r21,r2,4004dd4 <quorem+0x11c>
 4004db4:	b0ffff17 	ldw	r3,-4(r22)
 4004db8:	18000326 	beq	r3,zero,4004dc8 <quorem+0x110>
 4004dbc:	00000506 	br	4004dd4 <quorem+0x11c>
 4004dc0:	10c00017 	ldw	r3,0(r2)
 4004dc4:	1800031e 	bne	r3,zero,4004dd4 <quorem+0x11c>
 4004dc8:	10bfff04 	addi	r2,r2,-4
 4004dcc:	94bfffc4 	addi	r18,r18,-1
 4004dd0:	a8bffb36 	bltu	r21,r2,4004dc0 <__alt_data_end+0xfc004dc0>
 4004dd4:	84800415 	stw	r18,16(r16)
 4004dd8:	b80b883a 	mov	r5,r23
 4004ddc:	8009883a 	mov	r4,r16
 4004de0:	400732c0 	call	400732c <__mcmp>
 4004de4:	10002616 	blt	r2,zero,4004e80 <quorem+0x1c8>
 4004de8:	9cc00044 	addi	r19,r19,1
 4004dec:	a805883a 	mov	r2,r21
 4004df0:	000b883a 	mov	r5,zero
 4004df4:	11000017 	ldw	r4,0(r2)
 4004df8:	89800017 	ldw	r6,0(r17)
 4004dfc:	10800104 	addi	r2,r2,4
 4004e00:	20ffffcc 	andi	r3,r4,65535
 4004e04:	194b883a 	add	r5,r3,r5
 4004e08:	30ffffcc 	andi	r3,r6,65535
 4004e0c:	28c7c83a 	sub	r3,r5,r3
 4004e10:	300cd43a 	srli	r6,r6,16
 4004e14:	2008d43a 	srli	r4,r4,16
 4004e18:	180bd43a 	srai	r5,r3,16
 4004e1c:	18ffffcc 	andi	r3,r3,65535
 4004e20:	2189c83a 	sub	r4,r4,r6
 4004e24:	2149883a 	add	r4,r4,r5
 4004e28:	200c943a 	slli	r6,r4,16
 4004e2c:	8c400104 	addi	r17,r17,4
 4004e30:	200bd43a 	srai	r5,r4,16
 4004e34:	30c6b03a 	or	r3,r6,r3
 4004e38:	10ffff15 	stw	r3,-4(r2)
 4004e3c:	a47fed2e 	bgeu	r20,r17,4004df4 <__alt_data_end+0xfc004df4>
 4004e40:	9485883a 	add	r2,r18,r18
 4004e44:	1085883a 	add	r2,r2,r2
 4004e48:	a887883a 	add	r3,r21,r2
 4004e4c:	18800017 	ldw	r2,0(r3)
 4004e50:	10000b1e 	bne	r2,zero,4004e80 <quorem+0x1c8>
 4004e54:	18bfff04 	addi	r2,r3,-4
 4004e58:	a880082e 	bgeu	r21,r2,4004e7c <quorem+0x1c4>
 4004e5c:	18ffff17 	ldw	r3,-4(r3)
 4004e60:	18000326 	beq	r3,zero,4004e70 <quorem+0x1b8>
 4004e64:	00000506 	br	4004e7c <quorem+0x1c4>
 4004e68:	10c00017 	ldw	r3,0(r2)
 4004e6c:	1800031e 	bne	r3,zero,4004e7c <quorem+0x1c4>
 4004e70:	10bfff04 	addi	r2,r2,-4
 4004e74:	94bfffc4 	addi	r18,r18,-1
 4004e78:	a8bffb36 	bltu	r21,r2,4004e68 <__alt_data_end+0xfc004e68>
 4004e7c:	84800415 	stw	r18,16(r16)
 4004e80:	9805883a 	mov	r2,r19
 4004e84:	dfc00817 	ldw	ra,32(sp)
 4004e88:	ddc00717 	ldw	r23,28(sp)
 4004e8c:	dd800617 	ldw	r22,24(sp)
 4004e90:	dd400517 	ldw	r21,20(sp)
 4004e94:	dd000417 	ldw	r20,16(sp)
 4004e98:	dcc00317 	ldw	r19,12(sp)
 4004e9c:	dc800217 	ldw	r18,8(sp)
 4004ea0:	dc400117 	ldw	r17,4(sp)
 4004ea4:	dc000017 	ldw	r16,0(sp)
 4004ea8:	dec00904 	addi	sp,sp,36
 4004eac:	f800283a 	ret
 4004eb0:	0005883a 	mov	r2,zero
 4004eb4:	003ff306 	br	4004e84 <__alt_data_end+0xfc004e84>

04004eb8 <_dtoa_r>:
 4004eb8:	20801017 	ldw	r2,64(r4)
 4004ebc:	deffde04 	addi	sp,sp,-136
 4004ec0:	df002015 	stw	fp,128(sp)
 4004ec4:	dcc01b15 	stw	r19,108(sp)
 4004ec8:	dc801a15 	stw	r18,104(sp)
 4004ecc:	dc401915 	stw	r17,100(sp)
 4004ed0:	dc001815 	stw	r16,96(sp)
 4004ed4:	dfc02115 	stw	ra,132(sp)
 4004ed8:	ddc01f15 	stw	r23,124(sp)
 4004edc:	dd801e15 	stw	r22,120(sp)
 4004ee0:	dd401d15 	stw	r21,116(sp)
 4004ee4:	dd001c15 	stw	r20,112(sp)
 4004ee8:	d9c00315 	stw	r7,12(sp)
 4004eec:	2039883a 	mov	fp,r4
 4004ef0:	3023883a 	mov	r17,r6
 4004ef4:	2825883a 	mov	r18,r5
 4004ef8:	dc002417 	ldw	r16,144(sp)
 4004efc:	3027883a 	mov	r19,r6
 4004f00:	10000826 	beq	r2,zero,4004f24 <_dtoa_r+0x6c>
 4004f04:	21801117 	ldw	r6,68(r4)
 4004f08:	00c00044 	movi	r3,1
 4004f0c:	100b883a 	mov	r5,r2
 4004f10:	1986983a 	sll	r3,r3,r6
 4004f14:	11800115 	stw	r6,4(r2)
 4004f18:	10c00215 	stw	r3,8(r2)
 4004f1c:	4006b0c0 	call	4006b0c <_Bfree>
 4004f20:	e0001015 	stw	zero,64(fp)
 4004f24:	88002e16 	blt	r17,zero,4004fe0 <_dtoa_r+0x128>
 4004f28:	80000015 	stw	zero,0(r16)
 4004f2c:	889ffc2c 	andhi	r2,r17,32752
 4004f30:	00dffc34 	movhi	r3,32752
 4004f34:	10c01c26 	beq	r2,r3,4004fa8 <_dtoa_r+0xf0>
 4004f38:	000d883a 	mov	r6,zero
 4004f3c:	000f883a 	mov	r7,zero
 4004f40:	9009883a 	mov	r4,r18
 4004f44:	980b883a 	mov	r5,r19
 4004f48:	400c1ac0 	call	400c1ac <__eqdf2>
 4004f4c:	10002b1e 	bne	r2,zero,4004ffc <_dtoa_r+0x144>
 4004f50:	d9c02317 	ldw	r7,140(sp)
 4004f54:	00800044 	movi	r2,1
 4004f58:	38800015 	stw	r2,0(r7)
 4004f5c:	d8802517 	ldw	r2,148(sp)
 4004f60:	10019e26 	beq	r2,zero,40055dc <_dtoa_r+0x724>
 4004f64:	d8c02517 	ldw	r3,148(sp)
 4004f68:	00810074 	movhi	r2,1025
 4004f6c:	1080bc44 	addi	r2,r2,753
 4004f70:	18800015 	stw	r2,0(r3)
 4004f74:	10bfffc4 	addi	r2,r2,-1
 4004f78:	dfc02117 	ldw	ra,132(sp)
 4004f7c:	df002017 	ldw	fp,128(sp)
 4004f80:	ddc01f17 	ldw	r23,124(sp)
 4004f84:	dd801e17 	ldw	r22,120(sp)
 4004f88:	dd401d17 	ldw	r21,116(sp)
 4004f8c:	dd001c17 	ldw	r20,112(sp)
 4004f90:	dcc01b17 	ldw	r19,108(sp)
 4004f94:	dc801a17 	ldw	r18,104(sp)
 4004f98:	dc401917 	ldw	r17,100(sp)
 4004f9c:	dc001817 	ldw	r16,96(sp)
 4004fa0:	dec02204 	addi	sp,sp,136
 4004fa4:	f800283a 	ret
 4004fa8:	d8c02317 	ldw	r3,140(sp)
 4004fac:	0089c3c4 	movi	r2,9999
 4004fb0:	18800015 	stw	r2,0(r3)
 4004fb4:	90017726 	beq	r18,zero,4005594 <_dtoa_r+0x6dc>
 4004fb8:	00810074 	movhi	r2,1025
 4004fbc:	10816804 	addi	r2,r2,1440
 4004fc0:	d9002517 	ldw	r4,148(sp)
 4004fc4:	203fec26 	beq	r4,zero,4004f78 <__alt_data_end+0xfc004f78>
 4004fc8:	10c000c7 	ldb	r3,3(r2)
 4004fcc:	1801781e 	bne	r3,zero,40055b0 <_dtoa_r+0x6f8>
 4004fd0:	10c000c4 	addi	r3,r2,3
 4004fd4:	d9802517 	ldw	r6,148(sp)
 4004fd8:	30c00015 	stw	r3,0(r6)
 4004fdc:	003fe606 	br	4004f78 <__alt_data_end+0xfc004f78>
 4004fe0:	04e00034 	movhi	r19,32768
 4004fe4:	9cffffc4 	addi	r19,r19,-1
 4004fe8:	00800044 	movi	r2,1
 4004fec:	8ce6703a 	and	r19,r17,r19
 4004ff0:	80800015 	stw	r2,0(r16)
 4004ff4:	9823883a 	mov	r17,r19
 4004ff8:	003fcc06 	br	4004f2c <__alt_data_end+0xfc004f2c>
 4004ffc:	d8800204 	addi	r2,sp,8
 4005000:	d8800015 	stw	r2,0(sp)
 4005004:	d9c00104 	addi	r7,sp,4
 4005008:	900b883a 	mov	r5,r18
 400500c:	980d883a 	mov	r6,r19
 4005010:	e009883a 	mov	r4,fp
 4005014:	8820d53a 	srli	r16,r17,20
 4005018:	40076f80 	call	40076f8 <__d2b>
 400501c:	d8800915 	stw	r2,36(sp)
 4005020:	8001651e 	bne	r16,zero,40055b8 <_dtoa_r+0x700>
 4005024:	dd800217 	ldw	r22,8(sp)
 4005028:	dc000117 	ldw	r16,4(sp)
 400502c:	00800804 	movi	r2,32
 4005030:	b421883a 	add	r16,r22,r16
 4005034:	80c10c84 	addi	r3,r16,1074
 4005038:	10c2d10e 	bge	r2,r3,4005b80 <_dtoa_r+0xcc8>
 400503c:	00801004 	movi	r2,64
 4005040:	81010484 	addi	r4,r16,1042
 4005044:	10c7c83a 	sub	r3,r2,r3
 4005048:	9108d83a 	srl	r4,r18,r4
 400504c:	88e2983a 	sll	r17,r17,r3
 4005050:	2448b03a 	or	r4,r4,r17
 4005054:	400d5740 	call	400d574 <__floatunsidf>
 4005058:	017f8434 	movhi	r5,65040
 400505c:	01800044 	movi	r6,1
 4005060:	1009883a 	mov	r4,r2
 4005064:	194b883a 	add	r5,r3,r5
 4005068:	843fffc4 	addi	r16,r16,-1
 400506c:	d9801115 	stw	r6,68(sp)
 4005070:	000d883a 	mov	r6,zero
 4005074:	01cffe34 	movhi	r7,16376
 4005078:	400cb1c0 	call	400cb1c <__subdf3>
 400507c:	0198dbf4 	movhi	r6,25455
 4005080:	01cff4f4 	movhi	r7,16339
 4005084:	3190d844 	addi	r6,r6,17249
 4005088:	39e1e9c4 	addi	r7,r7,-30809
 400508c:	1009883a 	mov	r4,r2
 4005090:	180b883a 	mov	r5,r3
 4005094:	400c4040 	call	400c404 <__muldf3>
 4005098:	01a2d874 	movhi	r6,35681
 400509c:	01cff1f4 	movhi	r7,16327
 40050a0:	31b22cc4 	addi	r6,r6,-14157
 40050a4:	39e28a04 	addi	r7,r7,-30168
 40050a8:	180b883a 	mov	r5,r3
 40050ac:	1009883a 	mov	r4,r2
 40050b0:	400b0180 	call	400b018 <__adddf3>
 40050b4:	8009883a 	mov	r4,r16
 40050b8:	1029883a 	mov	r20,r2
 40050bc:	1823883a 	mov	r17,r3
 40050c0:	400d4980 	call	400d498 <__floatsidf>
 40050c4:	019427f4 	movhi	r6,20639
 40050c8:	01cff4f4 	movhi	r7,16339
 40050cc:	319e7ec4 	addi	r6,r6,31227
 40050d0:	39d104c4 	addi	r7,r7,17427
 40050d4:	1009883a 	mov	r4,r2
 40050d8:	180b883a 	mov	r5,r3
 40050dc:	400c4040 	call	400c404 <__muldf3>
 40050e0:	100d883a 	mov	r6,r2
 40050e4:	180f883a 	mov	r7,r3
 40050e8:	a009883a 	mov	r4,r20
 40050ec:	880b883a 	mov	r5,r17
 40050f0:	400b0180 	call	400b018 <__adddf3>
 40050f4:	1009883a 	mov	r4,r2
 40050f8:	180b883a 	mov	r5,r3
 40050fc:	1029883a 	mov	r20,r2
 4005100:	1823883a 	mov	r17,r3
 4005104:	400d4180 	call	400d418 <__fixdfsi>
 4005108:	000d883a 	mov	r6,zero
 400510c:	000f883a 	mov	r7,zero
 4005110:	a009883a 	mov	r4,r20
 4005114:	880b883a 	mov	r5,r17
 4005118:	d8800515 	stw	r2,20(sp)
 400511c:	400c3100 	call	400c310 <__ledf2>
 4005120:	10028716 	blt	r2,zero,4005b40 <_dtoa_r+0xc88>
 4005124:	d8c00517 	ldw	r3,20(sp)
 4005128:	00800584 	movi	r2,22
 400512c:	10c27536 	bltu	r2,r3,4005b04 <_dtoa_r+0xc4c>
 4005130:	180490fa 	slli	r2,r3,3
 4005134:	00c10074 	movhi	r3,1025
 4005138:	18c18304 	addi	r3,r3,1548
 400513c:	1885883a 	add	r2,r3,r2
 4005140:	11000017 	ldw	r4,0(r2)
 4005144:	11400117 	ldw	r5,4(r2)
 4005148:	900d883a 	mov	r6,r18
 400514c:	980f883a 	mov	r7,r19
 4005150:	400c2340 	call	400c234 <__gedf2>
 4005154:	00828d0e 	bge	zero,r2,4005b8c <_dtoa_r+0xcd4>
 4005158:	d9000517 	ldw	r4,20(sp)
 400515c:	d8000e15 	stw	zero,56(sp)
 4005160:	213fffc4 	addi	r4,r4,-1
 4005164:	d9000515 	stw	r4,20(sp)
 4005168:	b42dc83a 	sub	r22,r22,r16
 400516c:	b5bfffc4 	addi	r22,r22,-1
 4005170:	b0026f16 	blt	r22,zero,4005b30 <_dtoa_r+0xc78>
 4005174:	d8000815 	stw	zero,32(sp)
 4005178:	d9c00517 	ldw	r7,20(sp)
 400517c:	38026416 	blt	r7,zero,4005b10 <_dtoa_r+0xc58>
 4005180:	b1ed883a 	add	r22,r22,r7
 4005184:	d9c00d15 	stw	r7,52(sp)
 4005188:	d8000a15 	stw	zero,40(sp)
 400518c:	d9800317 	ldw	r6,12(sp)
 4005190:	00800244 	movi	r2,9
 4005194:	11811436 	bltu	r2,r6,40055e8 <_dtoa_r+0x730>
 4005198:	00800144 	movi	r2,5
 400519c:	1184e10e 	bge	r2,r6,4006524 <_dtoa_r+0x166c>
 40051a0:	31bfff04 	addi	r6,r6,-4
 40051a4:	d9800315 	stw	r6,12(sp)
 40051a8:	0023883a 	mov	r17,zero
 40051ac:	d9800317 	ldw	r6,12(sp)
 40051b0:	008000c4 	movi	r2,3
 40051b4:	30836726 	beq	r6,r2,4005f54 <_dtoa_r+0x109c>
 40051b8:	1183410e 	bge	r2,r6,4005ec0 <_dtoa_r+0x1008>
 40051bc:	d9c00317 	ldw	r7,12(sp)
 40051c0:	00800104 	movi	r2,4
 40051c4:	38827c26 	beq	r7,r2,4005bb8 <_dtoa_r+0xd00>
 40051c8:	00800144 	movi	r2,5
 40051cc:	3884c41e 	bne	r7,r2,40064e0 <_dtoa_r+0x1628>
 40051d0:	00800044 	movi	r2,1
 40051d4:	d8800b15 	stw	r2,44(sp)
 40051d8:	d8c00517 	ldw	r3,20(sp)
 40051dc:	d9002217 	ldw	r4,136(sp)
 40051e0:	1907883a 	add	r3,r3,r4
 40051e4:	19800044 	addi	r6,r3,1
 40051e8:	d8c00c15 	stw	r3,48(sp)
 40051ec:	d9800615 	stw	r6,24(sp)
 40051f0:	0183a40e 	bge	zero,r6,4006084 <_dtoa_r+0x11cc>
 40051f4:	d9800617 	ldw	r6,24(sp)
 40051f8:	3021883a 	mov	r16,r6
 40051fc:	e0001115 	stw	zero,68(fp)
 4005200:	008005c4 	movi	r2,23
 4005204:	1184c92e 	bgeu	r2,r6,400652c <_dtoa_r+0x1674>
 4005208:	00c00044 	movi	r3,1
 400520c:	00800104 	movi	r2,4
 4005210:	1085883a 	add	r2,r2,r2
 4005214:	11000504 	addi	r4,r2,20
 4005218:	180b883a 	mov	r5,r3
 400521c:	18c00044 	addi	r3,r3,1
 4005220:	313ffb2e 	bgeu	r6,r4,4005210 <__alt_data_end+0xfc005210>
 4005224:	e1401115 	stw	r5,68(fp)
 4005228:	e009883a 	mov	r4,fp
 400522c:	4006a640 	call	4006a64 <_Balloc>
 4005230:	d8800715 	stw	r2,28(sp)
 4005234:	e0801015 	stw	r2,64(fp)
 4005238:	00800384 	movi	r2,14
 400523c:	1400f736 	bltu	r2,r16,400561c <_dtoa_r+0x764>
 4005240:	8800f626 	beq	r17,zero,400561c <_dtoa_r+0x764>
 4005244:	d9c00517 	ldw	r7,20(sp)
 4005248:	01c39a0e 	bge	zero,r7,40060b4 <_dtoa_r+0x11fc>
 400524c:	388003cc 	andi	r2,r7,15
 4005250:	100490fa 	slli	r2,r2,3
 4005254:	382bd13a 	srai	r21,r7,4
 4005258:	00c10074 	movhi	r3,1025
 400525c:	18c18304 	addi	r3,r3,1548
 4005260:	1885883a 	add	r2,r3,r2
 4005264:	a8c0040c 	andi	r3,r21,16
 4005268:	12400017 	ldw	r9,0(r2)
 400526c:	12000117 	ldw	r8,4(r2)
 4005270:	18037926 	beq	r3,zero,4006058 <_dtoa_r+0x11a0>
 4005274:	00810074 	movhi	r2,1025
 4005278:	10817904 	addi	r2,r2,1508
 400527c:	11800817 	ldw	r6,32(r2)
 4005280:	11c00917 	ldw	r7,36(r2)
 4005284:	9009883a 	mov	r4,r18
 4005288:	980b883a 	mov	r5,r19
 400528c:	da001715 	stw	r8,92(sp)
 4005290:	da401615 	stw	r9,88(sp)
 4005294:	400b8c40 	call	400b8c4 <__divdf3>
 4005298:	da001717 	ldw	r8,92(sp)
 400529c:	da401617 	ldw	r9,88(sp)
 40052a0:	ad4003cc 	andi	r21,r21,15
 40052a4:	040000c4 	movi	r16,3
 40052a8:	1023883a 	mov	r17,r2
 40052ac:	1829883a 	mov	r20,r3
 40052b0:	a8001126 	beq	r21,zero,40052f8 <_dtoa_r+0x440>
 40052b4:	05c10074 	movhi	r23,1025
 40052b8:	bdc17904 	addi	r23,r23,1508
 40052bc:	4805883a 	mov	r2,r9
 40052c0:	4007883a 	mov	r3,r8
 40052c4:	a980004c 	andi	r6,r21,1
 40052c8:	1009883a 	mov	r4,r2
 40052cc:	a82bd07a 	srai	r21,r21,1
 40052d0:	180b883a 	mov	r5,r3
 40052d4:	30000426 	beq	r6,zero,40052e8 <_dtoa_r+0x430>
 40052d8:	b9800017 	ldw	r6,0(r23)
 40052dc:	b9c00117 	ldw	r7,4(r23)
 40052e0:	84000044 	addi	r16,r16,1
 40052e4:	400c4040 	call	400c404 <__muldf3>
 40052e8:	bdc00204 	addi	r23,r23,8
 40052ec:	a83ff51e 	bne	r21,zero,40052c4 <__alt_data_end+0xfc0052c4>
 40052f0:	1013883a 	mov	r9,r2
 40052f4:	1811883a 	mov	r8,r3
 40052f8:	480d883a 	mov	r6,r9
 40052fc:	400f883a 	mov	r7,r8
 4005300:	8809883a 	mov	r4,r17
 4005304:	a00b883a 	mov	r5,r20
 4005308:	400b8c40 	call	400b8c4 <__divdf3>
 400530c:	d8800f15 	stw	r2,60(sp)
 4005310:	d8c01015 	stw	r3,64(sp)
 4005314:	d8c00e17 	ldw	r3,56(sp)
 4005318:	18000626 	beq	r3,zero,4005334 <_dtoa_r+0x47c>
 400531c:	d9000f17 	ldw	r4,60(sp)
 4005320:	d9401017 	ldw	r5,64(sp)
 4005324:	000d883a 	mov	r6,zero
 4005328:	01cffc34 	movhi	r7,16368
 400532c:	400c3100 	call	400c310 <__ledf2>
 4005330:	10040b16 	blt	r2,zero,4006360 <_dtoa_r+0x14a8>
 4005334:	8009883a 	mov	r4,r16
 4005338:	400d4980 	call	400d498 <__floatsidf>
 400533c:	d9800f17 	ldw	r6,60(sp)
 4005340:	d9c01017 	ldw	r7,64(sp)
 4005344:	1009883a 	mov	r4,r2
 4005348:	180b883a 	mov	r5,r3
 400534c:	400c4040 	call	400c404 <__muldf3>
 4005350:	000d883a 	mov	r6,zero
 4005354:	01d00734 	movhi	r7,16412
 4005358:	1009883a 	mov	r4,r2
 400535c:	180b883a 	mov	r5,r3
 4005360:	400b0180 	call	400b018 <__adddf3>
 4005364:	1021883a 	mov	r16,r2
 4005368:	d8800617 	ldw	r2,24(sp)
 400536c:	047f3034 	movhi	r17,64704
 4005370:	1c63883a 	add	r17,r3,r17
 4005374:	10031826 	beq	r2,zero,4005fd8 <_dtoa_r+0x1120>
 4005378:	d8c00517 	ldw	r3,20(sp)
 400537c:	db000617 	ldw	r12,24(sp)
 4005380:	d8c01315 	stw	r3,76(sp)
 4005384:	d9000b17 	ldw	r4,44(sp)
 4005388:	20038f26 	beq	r4,zero,40061c8 <_dtoa_r+0x1310>
 400538c:	60bfffc4 	addi	r2,r12,-1
 4005390:	100490fa 	slli	r2,r2,3
 4005394:	00c10074 	movhi	r3,1025
 4005398:	18c18304 	addi	r3,r3,1548
 400539c:	1885883a 	add	r2,r3,r2
 40053a0:	11800017 	ldw	r6,0(r2)
 40053a4:	11c00117 	ldw	r7,4(r2)
 40053a8:	d8800717 	ldw	r2,28(sp)
 40053ac:	0009883a 	mov	r4,zero
 40053b0:	014ff834 	movhi	r5,16352
 40053b4:	db001615 	stw	r12,88(sp)
 40053b8:	15c00044 	addi	r23,r2,1
 40053bc:	400b8c40 	call	400b8c4 <__divdf3>
 40053c0:	800d883a 	mov	r6,r16
 40053c4:	880f883a 	mov	r7,r17
 40053c8:	1009883a 	mov	r4,r2
 40053cc:	180b883a 	mov	r5,r3
 40053d0:	400cb1c0 	call	400cb1c <__subdf3>
 40053d4:	d9401017 	ldw	r5,64(sp)
 40053d8:	d9000f17 	ldw	r4,60(sp)
 40053dc:	102b883a 	mov	r21,r2
 40053e0:	d8c01215 	stw	r3,72(sp)
 40053e4:	400d4180 	call	400d418 <__fixdfsi>
 40053e8:	1009883a 	mov	r4,r2
 40053ec:	1029883a 	mov	r20,r2
 40053f0:	400d4980 	call	400d498 <__floatsidf>
 40053f4:	d9000f17 	ldw	r4,60(sp)
 40053f8:	d9401017 	ldw	r5,64(sp)
 40053fc:	100d883a 	mov	r6,r2
 4005400:	180f883a 	mov	r7,r3
 4005404:	400cb1c0 	call	400cb1c <__subdf3>
 4005408:	1823883a 	mov	r17,r3
 400540c:	d8c00717 	ldw	r3,28(sp)
 4005410:	d9401217 	ldw	r5,72(sp)
 4005414:	a2000c04 	addi	r8,r20,48
 4005418:	1021883a 	mov	r16,r2
 400541c:	1a000005 	stb	r8,0(r3)
 4005420:	800d883a 	mov	r6,r16
 4005424:	880f883a 	mov	r7,r17
 4005428:	a809883a 	mov	r4,r21
 400542c:	4029883a 	mov	r20,r8
 4005430:	400c2340 	call	400c234 <__gedf2>
 4005434:	00841d16 	blt	zero,r2,40064ac <_dtoa_r+0x15f4>
 4005438:	800d883a 	mov	r6,r16
 400543c:	880f883a 	mov	r7,r17
 4005440:	0009883a 	mov	r4,zero
 4005444:	014ffc34 	movhi	r5,16368
 4005448:	400cb1c0 	call	400cb1c <__subdf3>
 400544c:	d9401217 	ldw	r5,72(sp)
 4005450:	100d883a 	mov	r6,r2
 4005454:	180f883a 	mov	r7,r3
 4005458:	a809883a 	mov	r4,r21
 400545c:	400c2340 	call	400c234 <__gedf2>
 4005460:	db001617 	ldw	r12,88(sp)
 4005464:	00840e16 	blt	zero,r2,40064a0 <_dtoa_r+0x15e8>
 4005468:	00800044 	movi	r2,1
 400546c:	13006b0e 	bge	r2,r12,400561c <_dtoa_r+0x764>
 4005470:	d9000717 	ldw	r4,28(sp)
 4005474:	dd800f15 	stw	r22,60(sp)
 4005478:	dcc01015 	stw	r19,64(sp)
 400547c:	2319883a 	add	r12,r4,r12
 4005480:	dcc01217 	ldw	r19,72(sp)
 4005484:	602d883a 	mov	r22,r12
 4005488:	dc801215 	stw	r18,72(sp)
 400548c:	b825883a 	mov	r18,r23
 4005490:	00000906 	br	40054b8 <_dtoa_r+0x600>
 4005494:	400cb1c0 	call	400cb1c <__subdf3>
 4005498:	a80d883a 	mov	r6,r21
 400549c:	980f883a 	mov	r7,r19
 40054a0:	1009883a 	mov	r4,r2
 40054a4:	180b883a 	mov	r5,r3
 40054a8:	400c3100 	call	400c310 <__ledf2>
 40054ac:	1003e816 	blt	r2,zero,4006450 <_dtoa_r+0x1598>
 40054b0:	b825883a 	mov	r18,r23
 40054b4:	bd83e926 	beq	r23,r22,400645c <_dtoa_r+0x15a4>
 40054b8:	a809883a 	mov	r4,r21
 40054bc:	980b883a 	mov	r5,r19
 40054c0:	000d883a 	mov	r6,zero
 40054c4:	01d00934 	movhi	r7,16420
 40054c8:	400c4040 	call	400c404 <__muldf3>
 40054cc:	000d883a 	mov	r6,zero
 40054d0:	01d00934 	movhi	r7,16420
 40054d4:	8009883a 	mov	r4,r16
 40054d8:	880b883a 	mov	r5,r17
 40054dc:	102b883a 	mov	r21,r2
 40054e0:	1827883a 	mov	r19,r3
 40054e4:	400c4040 	call	400c404 <__muldf3>
 40054e8:	180b883a 	mov	r5,r3
 40054ec:	1009883a 	mov	r4,r2
 40054f0:	1821883a 	mov	r16,r3
 40054f4:	1023883a 	mov	r17,r2
 40054f8:	400d4180 	call	400d418 <__fixdfsi>
 40054fc:	1009883a 	mov	r4,r2
 4005500:	1029883a 	mov	r20,r2
 4005504:	400d4980 	call	400d498 <__floatsidf>
 4005508:	8809883a 	mov	r4,r17
 400550c:	800b883a 	mov	r5,r16
 4005510:	100d883a 	mov	r6,r2
 4005514:	180f883a 	mov	r7,r3
 4005518:	400cb1c0 	call	400cb1c <__subdf3>
 400551c:	a5000c04 	addi	r20,r20,48
 4005520:	a80d883a 	mov	r6,r21
 4005524:	980f883a 	mov	r7,r19
 4005528:	1009883a 	mov	r4,r2
 400552c:	180b883a 	mov	r5,r3
 4005530:	95000005 	stb	r20,0(r18)
 4005534:	1021883a 	mov	r16,r2
 4005538:	1823883a 	mov	r17,r3
 400553c:	400c3100 	call	400c310 <__ledf2>
 4005540:	bdc00044 	addi	r23,r23,1
 4005544:	800d883a 	mov	r6,r16
 4005548:	880f883a 	mov	r7,r17
 400554c:	0009883a 	mov	r4,zero
 4005550:	014ffc34 	movhi	r5,16368
 4005554:	103fcf0e 	bge	r2,zero,4005494 <__alt_data_end+0xfc005494>
 4005558:	d8c01317 	ldw	r3,76(sp)
 400555c:	d8c00515 	stw	r3,20(sp)
 4005560:	d9400917 	ldw	r5,36(sp)
 4005564:	e009883a 	mov	r4,fp
 4005568:	4006b0c0 	call	4006b0c <_Bfree>
 400556c:	d9000517 	ldw	r4,20(sp)
 4005570:	d9802317 	ldw	r6,140(sp)
 4005574:	d9c02517 	ldw	r7,148(sp)
 4005578:	b8000005 	stb	zero,0(r23)
 400557c:	20800044 	addi	r2,r4,1
 4005580:	30800015 	stw	r2,0(r6)
 4005584:	3802aa26 	beq	r7,zero,4006030 <_dtoa_r+0x1178>
 4005588:	3dc00015 	stw	r23,0(r7)
 400558c:	d8800717 	ldw	r2,28(sp)
 4005590:	003e7906 	br	4004f78 <__alt_data_end+0xfc004f78>
 4005594:	00800434 	movhi	r2,16
 4005598:	10bfffc4 	addi	r2,r2,-1
 400559c:	88a2703a 	and	r17,r17,r2
 40055a0:	883e851e 	bne	r17,zero,4004fb8 <__alt_data_end+0xfc004fb8>
 40055a4:	00810074 	movhi	r2,1025
 40055a8:	10816504 	addi	r2,r2,1428
 40055ac:	003e8406 	br	4004fc0 <__alt_data_end+0xfc004fc0>
 40055b0:	10c00204 	addi	r3,r2,8
 40055b4:	003e8706 	br	4004fd4 <__alt_data_end+0xfc004fd4>
 40055b8:	01400434 	movhi	r5,16
 40055bc:	297fffc4 	addi	r5,r5,-1
 40055c0:	994a703a 	and	r5,r19,r5
 40055c4:	9009883a 	mov	r4,r18
 40055c8:	843f0044 	addi	r16,r16,-1023
 40055cc:	294ffc34 	orhi	r5,r5,16368
 40055d0:	dd800217 	ldw	r22,8(sp)
 40055d4:	d8001115 	stw	zero,68(sp)
 40055d8:	003ea506 	br	4005070 <__alt_data_end+0xfc005070>
 40055dc:	00810074 	movhi	r2,1025
 40055e0:	1080bc04 	addi	r2,r2,752
 40055e4:	003e6406 	br	4004f78 <__alt_data_end+0xfc004f78>
 40055e8:	e0001115 	stw	zero,68(fp)
 40055ec:	000b883a 	mov	r5,zero
 40055f0:	e009883a 	mov	r4,fp
 40055f4:	4006a640 	call	4006a64 <_Balloc>
 40055f8:	01bfffc4 	movi	r6,-1
 40055fc:	01c00044 	movi	r7,1
 4005600:	d8800715 	stw	r2,28(sp)
 4005604:	d9800c15 	stw	r6,48(sp)
 4005608:	e0801015 	stw	r2,64(fp)
 400560c:	d8000315 	stw	zero,12(sp)
 4005610:	d9c00b15 	stw	r7,44(sp)
 4005614:	d9800615 	stw	r6,24(sp)
 4005618:	d8002215 	stw	zero,136(sp)
 400561c:	d8800117 	ldw	r2,4(sp)
 4005620:	10008916 	blt	r2,zero,4005848 <_dtoa_r+0x990>
 4005624:	d9000517 	ldw	r4,20(sp)
 4005628:	00c00384 	movi	r3,14
 400562c:	19008616 	blt	r3,r4,4005848 <_dtoa_r+0x990>
 4005630:	200490fa 	slli	r2,r4,3
 4005634:	00c10074 	movhi	r3,1025
 4005638:	d9802217 	ldw	r6,136(sp)
 400563c:	18c18304 	addi	r3,r3,1548
 4005640:	1885883a 	add	r2,r3,r2
 4005644:	14000017 	ldw	r16,0(r2)
 4005648:	14400117 	ldw	r17,4(r2)
 400564c:	30016316 	blt	r6,zero,4005bdc <_dtoa_r+0xd24>
 4005650:	800d883a 	mov	r6,r16
 4005654:	880f883a 	mov	r7,r17
 4005658:	9009883a 	mov	r4,r18
 400565c:	980b883a 	mov	r5,r19
 4005660:	400b8c40 	call	400b8c4 <__divdf3>
 4005664:	180b883a 	mov	r5,r3
 4005668:	1009883a 	mov	r4,r2
 400566c:	400d4180 	call	400d418 <__fixdfsi>
 4005670:	1009883a 	mov	r4,r2
 4005674:	102b883a 	mov	r21,r2
 4005678:	400d4980 	call	400d498 <__floatsidf>
 400567c:	800d883a 	mov	r6,r16
 4005680:	880f883a 	mov	r7,r17
 4005684:	1009883a 	mov	r4,r2
 4005688:	180b883a 	mov	r5,r3
 400568c:	400c4040 	call	400c404 <__muldf3>
 4005690:	100d883a 	mov	r6,r2
 4005694:	180f883a 	mov	r7,r3
 4005698:	9009883a 	mov	r4,r18
 400569c:	980b883a 	mov	r5,r19
 40056a0:	400cb1c0 	call	400cb1c <__subdf3>
 40056a4:	d9c00717 	ldw	r7,28(sp)
 40056a8:	1009883a 	mov	r4,r2
 40056ac:	a8800c04 	addi	r2,r21,48
 40056b0:	38800005 	stb	r2,0(r7)
 40056b4:	3dc00044 	addi	r23,r7,1
 40056b8:	d9c00617 	ldw	r7,24(sp)
 40056bc:	01800044 	movi	r6,1
 40056c0:	180b883a 	mov	r5,r3
 40056c4:	2005883a 	mov	r2,r4
 40056c8:	39803826 	beq	r7,r6,40057ac <_dtoa_r+0x8f4>
 40056cc:	000d883a 	mov	r6,zero
 40056d0:	01d00934 	movhi	r7,16420
 40056d4:	400c4040 	call	400c404 <__muldf3>
 40056d8:	000d883a 	mov	r6,zero
 40056dc:	000f883a 	mov	r7,zero
 40056e0:	1009883a 	mov	r4,r2
 40056e4:	180b883a 	mov	r5,r3
 40056e8:	1025883a 	mov	r18,r2
 40056ec:	1827883a 	mov	r19,r3
 40056f0:	400c1ac0 	call	400c1ac <__eqdf2>
 40056f4:	103f9a26 	beq	r2,zero,4005560 <__alt_data_end+0xfc005560>
 40056f8:	d9c00617 	ldw	r7,24(sp)
 40056fc:	d8c00717 	ldw	r3,28(sp)
 4005700:	b829883a 	mov	r20,r23
 4005704:	38bfffc4 	addi	r2,r7,-1
 4005708:	18ad883a 	add	r22,r3,r2
 400570c:	00000a06 	br	4005738 <_dtoa_r+0x880>
 4005710:	400c4040 	call	400c404 <__muldf3>
 4005714:	000d883a 	mov	r6,zero
 4005718:	000f883a 	mov	r7,zero
 400571c:	1009883a 	mov	r4,r2
 4005720:	180b883a 	mov	r5,r3
 4005724:	1025883a 	mov	r18,r2
 4005728:	1827883a 	mov	r19,r3
 400572c:	b829883a 	mov	r20,r23
 4005730:	400c1ac0 	call	400c1ac <__eqdf2>
 4005734:	103f8a26 	beq	r2,zero,4005560 <__alt_data_end+0xfc005560>
 4005738:	800d883a 	mov	r6,r16
 400573c:	880f883a 	mov	r7,r17
 4005740:	9009883a 	mov	r4,r18
 4005744:	980b883a 	mov	r5,r19
 4005748:	400b8c40 	call	400b8c4 <__divdf3>
 400574c:	180b883a 	mov	r5,r3
 4005750:	1009883a 	mov	r4,r2
 4005754:	400d4180 	call	400d418 <__fixdfsi>
 4005758:	1009883a 	mov	r4,r2
 400575c:	102b883a 	mov	r21,r2
 4005760:	400d4980 	call	400d498 <__floatsidf>
 4005764:	800d883a 	mov	r6,r16
 4005768:	880f883a 	mov	r7,r17
 400576c:	1009883a 	mov	r4,r2
 4005770:	180b883a 	mov	r5,r3
 4005774:	400c4040 	call	400c404 <__muldf3>
 4005778:	100d883a 	mov	r6,r2
 400577c:	180f883a 	mov	r7,r3
 4005780:	9009883a 	mov	r4,r18
 4005784:	980b883a 	mov	r5,r19
 4005788:	400cb1c0 	call	400cb1c <__subdf3>
 400578c:	aa000c04 	addi	r8,r21,48
 4005790:	a2000005 	stb	r8,0(r20)
 4005794:	000d883a 	mov	r6,zero
 4005798:	01d00934 	movhi	r7,16420
 400579c:	1009883a 	mov	r4,r2
 40057a0:	180b883a 	mov	r5,r3
 40057a4:	a5c00044 	addi	r23,r20,1
 40057a8:	b53fd91e 	bne	r22,r20,4005710 <__alt_data_end+0xfc005710>
 40057ac:	100d883a 	mov	r6,r2
 40057b0:	180f883a 	mov	r7,r3
 40057b4:	1009883a 	mov	r4,r2
 40057b8:	180b883a 	mov	r5,r3
 40057bc:	400b0180 	call	400b018 <__adddf3>
 40057c0:	100d883a 	mov	r6,r2
 40057c4:	180f883a 	mov	r7,r3
 40057c8:	8009883a 	mov	r4,r16
 40057cc:	880b883a 	mov	r5,r17
 40057d0:	1027883a 	mov	r19,r2
 40057d4:	1825883a 	mov	r18,r3
 40057d8:	400c3100 	call	400c310 <__ledf2>
 40057dc:	10000816 	blt	r2,zero,4005800 <_dtoa_r+0x948>
 40057e0:	980d883a 	mov	r6,r19
 40057e4:	900f883a 	mov	r7,r18
 40057e8:	8009883a 	mov	r4,r16
 40057ec:	880b883a 	mov	r5,r17
 40057f0:	400c1ac0 	call	400c1ac <__eqdf2>
 40057f4:	103f5a1e 	bne	r2,zero,4005560 <__alt_data_end+0xfc005560>
 40057f8:	ad40004c 	andi	r21,r21,1
 40057fc:	a83f5826 	beq	r21,zero,4005560 <__alt_data_end+0xfc005560>
 4005800:	bd3fffc3 	ldbu	r20,-1(r23)
 4005804:	b8bfffc4 	addi	r2,r23,-1
 4005808:	1007883a 	mov	r3,r2
 400580c:	01400e44 	movi	r5,57
 4005810:	d9800717 	ldw	r6,28(sp)
 4005814:	00000506 	br	400582c <_dtoa_r+0x974>
 4005818:	18ffffc4 	addi	r3,r3,-1
 400581c:	11824726 	beq	r2,r6,400613c <_dtoa_r+0x1284>
 4005820:	1d000003 	ldbu	r20,0(r3)
 4005824:	102f883a 	mov	r23,r2
 4005828:	10bfffc4 	addi	r2,r2,-1
 400582c:	a1003fcc 	andi	r4,r20,255
 4005830:	2100201c 	xori	r4,r4,128
 4005834:	213fe004 	addi	r4,r4,-128
 4005838:	217ff726 	beq	r4,r5,4005818 <__alt_data_end+0xfc005818>
 400583c:	a2000044 	addi	r8,r20,1
 4005840:	12000005 	stb	r8,0(r2)
 4005844:	003f4606 	br	4005560 <__alt_data_end+0xfc005560>
 4005848:	d9000b17 	ldw	r4,44(sp)
 400584c:	2000c826 	beq	r4,zero,4005b70 <_dtoa_r+0xcb8>
 4005850:	d9800317 	ldw	r6,12(sp)
 4005854:	00c00044 	movi	r3,1
 4005858:	1980f90e 	bge	r3,r6,4005c40 <_dtoa_r+0xd88>
 400585c:	d8800617 	ldw	r2,24(sp)
 4005860:	d8c00a17 	ldw	r3,40(sp)
 4005864:	157fffc4 	addi	r21,r2,-1
 4005868:	1d41f316 	blt	r3,r21,4006038 <_dtoa_r+0x1180>
 400586c:	1d6bc83a 	sub	r21,r3,r21
 4005870:	d9c00617 	ldw	r7,24(sp)
 4005874:	3802aa16 	blt	r7,zero,4006320 <_dtoa_r+0x1468>
 4005878:	dd000817 	ldw	r20,32(sp)
 400587c:	d8800617 	ldw	r2,24(sp)
 4005880:	d8c00817 	ldw	r3,32(sp)
 4005884:	01400044 	movi	r5,1
 4005888:	e009883a 	mov	r4,fp
 400588c:	1887883a 	add	r3,r3,r2
 4005890:	d8c00815 	stw	r3,32(sp)
 4005894:	b0ad883a 	add	r22,r22,r2
 4005898:	4006e700 	call	4006e70 <__i2b>
 400589c:	1023883a 	mov	r17,r2
 40058a0:	a0000826 	beq	r20,zero,40058c4 <_dtoa_r+0xa0c>
 40058a4:	0580070e 	bge	zero,r22,40058c4 <_dtoa_r+0xa0c>
 40058a8:	a005883a 	mov	r2,r20
 40058ac:	b500b916 	blt	r22,r20,4005b94 <_dtoa_r+0xcdc>
 40058b0:	d9000817 	ldw	r4,32(sp)
 40058b4:	a0a9c83a 	sub	r20,r20,r2
 40058b8:	b0adc83a 	sub	r22,r22,r2
 40058bc:	2089c83a 	sub	r4,r4,r2
 40058c0:	d9000815 	stw	r4,32(sp)
 40058c4:	d9800a17 	ldw	r6,40(sp)
 40058c8:	0181810e 	bge	zero,r6,4005ed0 <_dtoa_r+0x1018>
 40058cc:	d9c00b17 	ldw	r7,44(sp)
 40058d0:	3800b326 	beq	r7,zero,4005ba0 <_dtoa_r+0xce8>
 40058d4:	a800b226 	beq	r21,zero,4005ba0 <_dtoa_r+0xce8>
 40058d8:	880b883a 	mov	r5,r17
 40058dc:	a80d883a 	mov	r6,r21
 40058e0:	e009883a 	mov	r4,fp
 40058e4:	40070a40 	call	40070a4 <__pow5mult>
 40058e8:	d9800917 	ldw	r6,36(sp)
 40058ec:	100b883a 	mov	r5,r2
 40058f0:	e009883a 	mov	r4,fp
 40058f4:	1023883a 	mov	r17,r2
 40058f8:	4006eac0 	call	4006eac <__multiply>
 40058fc:	1021883a 	mov	r16,r2
 4005900:	d8800a17 	ldw	r2,40(sp)
 4005904:	d9400917 	ldw	r5,36(sp)
 4005908:	e009883a 	mov	r4,fp
 400590c:	1545c83a 	sub	r2,r2,r21
 4005910:	d8800a15 	stw	r2,40(sp)
 4005914:	4006b0c0 	call	4006b0c <_Bfree>
 4005918:	d8c00a17 	ldw	r3,40(sp)
 400591c:	18009f1e 	bne	r3,zero,4005b9c <_dtoa_r+0xce4>
 4005920:	05c00044 	movi	r23,1
 4005924:	e009883a 	mov	r4,fp
 4005928:	b80b883a 	mov	r5,r23
 400592c:	4006e700 	call	4006e70 <__i2b>
 4005930:	d9000d17 	ldw	r4,52(sp)
 4005934:	102b883a 	mov	r21,r2
 4005938:	2000ce26 	beq	r4,zero,4005c74 <_dtoa_r+0xdbc>
 400593c:	200d883a 	mov	r6,r4
 4005940:	100b883a 	mov	r5,r2
 4005944:	e009883a 	mov	r4,fp
 4005948:	40070a40 	call	40070a4 <__pow5mult>
 400594c:	d9800317 	ldw	r6,12(sp)
 4005950:	102b883a 	mov	r21,r2
 4005954:	b981810e 	bge	r23,r6,4005f5c <_dtoa_r+0x10a4>
 4005958:	0027883a 	mov	r19,zero
 400595c:	a8800417 	ldw	r2,16(r21)
 4005960:	05c00804 	movi	r23,32
 4005964:	10800104 	addi	r2,r2,4
 4005968:	1085883a 	add	r2,r2,r2
 400596c:	1085883a 	add	r2,r2,r2
 4005970:	a885883a 	add	r2,r21,r2
 4005974:	11000017 	ldw	r4,0(r2)
 4005978:	4006d580 	call	4006d58 <__hi0bits>
 400597c:	b885c83a 	sub	r2,r23,r2
 4005980:	1585883a 	add	r2,r2,r22
 4005984:	108007cc 	andi	r2,r2,31
 4005988:	1000b326 	beq	r2,zero,4005c58 <_dtoa_r+0xda0>
 400598c:	00c00804 	movi	r3,32
 4005990:	1887c83a 	sub	r3,r3,r2
 4005994:	01000104 	movi	r4,4
 4005998:	20c2cd0e 	bge	r4,r3,40064d0 <_dtoa_r+0x1618>
 400599c:	00c00704 	movi	r3,28
 40059a0:	1885c83a 	sub	r2,r3,r2
 40059a4:	d8c00817 	ldw	r3,32(sp)
 40059a8:	a0a9883a 	add	r20,r20,r2
 40059ac:	b0ad883a 	add	r22,r22,r2
 40059b0:	1887883a 	add	r3,r3,r2
 40059b4:	d8c00815 	stw	r3,32(sp)
 40059b8:	d9800817 	ldw	r6,32(sp)
 40059bc:	0180040e 	bge	zero,r6,40059d0 <_dtoa_r+0xb18>
 40059c0:	800b883a 	mov	r5,r16
 40059c4:	e009883a 	mov	r4,fp
 40059c8:	40071e40 	call	40071e4 <__lshift>
 40059cc:	1021883a 	mov	r16,r2
 40059d0:	0580050e 	bge	zero,r22,40059e8 <_dtoa_r+0xb30>
 40059d4:	a80b883a 	mov	r5,r21
 40059d8:	b00d883a 	mov	r6,r22
 40059dc:	e009883a 	mov	r4,fp
 40059e0:	40071e40 	call	40071e4 <__lshift>
 40059e4:	102b883a 	mov	r21,r2
 40059e8:	d9c00e17 	ldw	r7,56(sp)
 40059ec:	3801211e 	bne	r7,zero,4005e74 <_dtoa_r+0xfbc>
 40059f0:	d9800617 	ldw	r6,24(sp)
 40059f4:	0181380e 	bge	zero,r6,4005ed8 <_dtoa_r+0x1020>
 40059f8:	d8c00b17 	ldw	r3,44(sp)
 40059fc:	1800ab1e 	bne	r3,zero,4005cac <_dtoa_r+0xdf4>
 4005a00:	dc800717 	ldw	r18,28(sp)
 4005a04:	dcc00617 	ldw	r19,24(sp)
 4005a08:	9029883a 	mov	r20,r18
 4005a0c:	00000206 	br	4005a18 <_dtoa_r+0xb60>
 4005a10:	4006b340 	call	4006b34 <__multadd>
 4005a14:	1021883a 	mov	r16,r2
 4005a18:	a80b883a 	mov	r5,r21
 4005a1c:	8009883a 	mov	r4,r16
 4005a20:	4004cb80 	call	4004cb8 <quorem>
 4005a24:	10800c04 	addi	r2,r2,48
 4005a28:	90800005 	stb	r2,0(r18)
 4005a2c:	94800044 	addi	r18,r18,1
 4005a30:	9507c83a 	sub	r3,r18,r20
 4005a34:	000f883a 	mov	r7,zero
 4005a38:	01800284 	movi	r6,10
 4005a3c:	800b883a 	mov	r5,r16
 4005a40:	e009883a 	mov	r4,fp
 4005a44:	1cfff216 	blt	r3,r19,4005a10 <__alt_data_end+0xfc005a10>
 4005a48:	1011883a 	mov	r8,r2
 4005a4c:	d8800617 	ldw	r2,24(sp)
 4005a50:	0082370e 	bge	zero,r2,4006330 <_dtoa_r+0x1478>
 4005a54:	d9000717 	ldw	r4,28(sp)
 4005a58:	0025883a 	mov	r18,zero
 4005a5c:	20af883a 	add	r23,r4,r2
 4005a60:	01800044 	movi	r6,1
 4005a64:	800b883a 	mov	r5,r16
 4005a68:	e009883a 	mov	r4,fp
 4005a6c:	da001715 	stw	r8,92(sp)
 4005a70:	40071e40 	call	40071e4 <__lshift>
 4005a74:	a80b883a 	mov	r5,r21
 4005a78:	1009883a 	mov	r4,r2
 4005a7c:	d8800915 	stw	r2,36(sp)
 4005a80:	400732c0 	call	400732c <__mcmp>
 4005a84:	da001717 	ldw	r8,92(sp)
 4005a88:	0081800e 	bge	zero,r2,400608c <_dtoa_r+0x11d4>
 4005a8c:	b93fffc3 	ldbu	r4,-1(r23)
 4005a90:	b8bfffc4 	addi	r2,r23,-1
 4005a94:	1007883a 	mov	r3,r2
 4005a98:	01800e44 	movi	r6,57
 4005a9c:	d9c00717 	ldw	r7,28(sp)
 4005aa0:	00000506 	br	4005ab8 <_dtoa_r+0xc00>
 4005aa4:	18ffffc4 	addi	r3,r3,-1
 4005aa8:	11c12326 	beq	r2,r7,4005f38 <_dtoa_r+0x1080>
 4005aac:	19000003 	ldbu	r4,0(r3)
 4005ab0:	102f883a 	mov	r23,r2
 4005ab4:	10bfffc4 	addi	r2,r2,-1
 4005ab8:	21403fcc 	andi	r5,r4,255
 4005abc:	2940201c 	xori	r5,r5,128
 4005ac0:	297fe004 	addi	r5,r5,-128
 4005ac4:	29bff726 	beq	r5,r6,4005aa4 <__alt_data_end+0xfc005aa4>
 4005ac8:	21000044 	addi	r4,r4,1
 4005acc:	11000005 	stb	r4,0(r2)
 4005ad0:	a80b883a 	mov	r5,r21
 4005ad4:	e009883a 	mov	r4,fp
 4005ad8:	4006b0c0 	call	4006b0c <_Bfree>
 4005adc:	883ea026 	beq	r17,zero,4005560 <__alt_data_end+0xfc005560>
 4005ae0:	90000426 	beq	r18,zero,4005af4 <_dtoa_r+0xc3c>
 4005ae4:	94400326 	beq	r18,r17,4005af4 <_dtoa_r+0xc3c>
 4005ae8:	900b883a 	mov	r5,r18
 4005aec:	e009883a 	mov	r4,fp
 4005af0:	4006b0c0 	call	4006b0c <_Bfree>
 4005af4:	880b883a 	mov	r5,r17
 4005af8:	e009883a 	mov	r4,fp
 4005afc:	4006b0c0 	call	4006b0c <_Bfree>
 4005b00:	003e9706 	br	4005560 <__alt_data_end+0xfc005560>
 4005b04:	01800044 	movi	r6,1
 4005b08:	d9800e15 	stw	r6,56(sp)
 4005b0c:	003d9606 	br	4005168 <__alt_data_end+0xfc005168>
 4005b10:	d8800817 	ldw	r2,32(sp)
 4005b14:	d8c00517 	ldw	r3,20(sp)
 4005b18:	d8000d15 	stw	zero,52(sp)
 4005b1c:	10c5c83a 	sub	r2,r2,r3
 4005b20:	00c9c83a 	sub	r4,zero,r3
 4005b24:	d8800815 	stw	r2,32(sp)
 4005b28:	d9000a15 	stw	r4,40(sp)
 4005b2c:	003d9706 	br	400518c <__alt_data_end+0xfc00518c>
 4005b30:	05adc83a 	sub	r22,zero,r22
 4005b34:	dd800815 	stw	r22,32(sp)
 4005b38:	002d883a 	mov	r22,zero
 4005b3c:	003d8e06 	br	4005178 <__alt_data_end+0xfc005178>
 4005b40:	d9000517 	ldw	r4,20(sp)
 4005b44:	400d4980 	call	400d498 <__floatsidf>
 4005b48:	100d883a 	mov	r6,r2
 4005b4c:	180f883a 	mov	r7,r3
 4005b50:	a009883a 	mov	r4,r20
 4005b54:	880b883a 	mov	r5,r17
 4005b58:	400c1ac0 	call	400c1ac <__eqdf2>
 4005b5c:	103d7126 	beq	r2,zero,4005124 <__alt_data_end+0xfc005124>
 4005b60:	d9c00517 	ldw	r7,20(sp)
 4005b64:	39ffffc4 	addi	r7,r7,-1
 4005b68:	d9c00515 	stw	r7,20(sp)
 4005b6c:	003d6d06 	br	4005124 <__alt_data_end+0xfc005124>
 4005b70:	dd400a17 	ldw	r21,40(sp)
 4005b74:	dd000817 	ldw	r20,32(sp)
 4005b78:	0023883a 	mov	r17,zero
 4005b7c:	003f4806 	br	40058a0 <__alt_data_end+0xfc0058a0>
 4005b80:	10e3c83a 	sub	r17,r2,r3
 4005b84:	9448983a 	sll	r4,r18,r17
 4005b88:	003d3206 	br	4005054 <__alt_data_end+0xfc005054>
 4005b8c:	d8000e15 	stw	zero,56(sp)
 4005b90:	003d7506 	br	4005168 <__alt_data_end+0xfc005168>
 4005b94:	b005883a 	mov	r2,r22
 4005b98:	003f4506 	br	40058b0 <__alt_data_end+0xfc0058b0>
 4005b9c:	dc000915 	stw	r16,36(sp)
 4005ba0:	d9800a17 	ldw	r6,40(sp)
 4005ba4:	d9400917 	ldw	r5,36(sp)
 4005ba8:	e009883a 	mov	r4,fp
 4005bac:	40070a40 	call	40070a4 <__pow5mult>
 4005bb0:	1021883a 	mov	r16,r2
 4005bb4:	003f5a06 	br	4005920 <__alt_data_end+0xfc005920>
 4005bb8:	01c00044 	movi	r7,1
 4005bbc:	d9c00b15 	stw	r7,44(sp)
 4005bc0:	d8802217 	ldw	r2,136(sp)
 4005bc4:	0081280e 	bge	zero,r2,4006068 <_dtoa_r+0x11b0>
 4005bc8:	100d883a 	mov	r6,r2
 4005bcc:	1021883a 	mov	r16,r2
 4005bd0:	d8800c15 	stw	r2,48(sp)
 4005bd4:	d8800615 	stw	r2,24(sp)
 4005bd8:	003d8806 	br	40051fc <__alt_data_end+0xfc0051fc>
 4005bdc:	d8800617 	ldw	r2,24(sp)
 4005be0:	00be9b16 	blt	zero,r2,4005650 <__alt_data_end+0xfc005650>
 4005be4:	10010f1e 	bne	r2,zero,4006024 <_dtoa_r+0x116c>
 4005be8:	880b883a 	mov	r5,r17
 4005bec:	000d883a 	mov	r6,zero
 4005bf0:	01d00534 	movhi	r7,16404
 4005bf4:	8009883a 	mov	r4,r16
 4005bf8:	400c4040 	call	400c404 <__muldf3>
 4005bfc:	900d883a 	mov	r6,r18
 4005c00:	980f883a 	mov	r7,r19
 4005c04:	1009883a 	mov	r4,r2
 4005c08:	180b883a 	mov	r5,r3
 4005c0c:	400c2340 	call	400c234 <__gedf2>
 4005c10:	002b883a 	mov	r21,zero
 4005c14:	0023883a 	mov	r17,zero
 4005c18:	1000bf16 	blt	r2,zero,4005f18 <_dtoa_r+0x1060>
 4005c1c:	d9802217 	ldw	r6,136(sp)
 4005c20:	ddc00717 	ldw	r23,28(sp)
 4005c24:	018c303a 	nor	r6,zero,r6
 4005c28:	d9800515 	stw	r6,20(sp)
 4005c2c:	a80b883a 	mov	r5,r21
 4005c30:	e009883a 	mov	r4,fp
 4005c34:	4006b0c0 	call	4006b0c <_Bfree>
 4005c38:	883e4926 	beq	r17,zero,4005560 <__alt_data_end+0xfc005560>
 4005c3c:	003fad06 	br	4005af4 <__alt_data_end+0xfc005af4>
 4005c40:	d9c01117 	ldw	r7,68(sp)
 4005c44:	3801bc26 	beq	r7,zero,4006338 <_dtoa_r+0x1480>
 4005c48:	10810cc4 	addi	r2,r2,1075
 4005c4c:	dd400a17 	ldw	r21,40(sp)
 4005c50:	dd000817 	ldw	r20,32(sp)
 4005c54:	003f0a06 	br	4005880 <__alt_data_end+0xfc005880>
 4005c58:	00800704 	movi	r2,28
 4005c5c:	d9000817 	ldw	r4,32(sp)
 4005c60:	a0a9883a 	add	r20,r20,r2
 4005c64:	b0ad883a 	add	r22,r22,r2
 4005c68:	2089883a 	add	r4,r4,r2
 4005c6c:	d9000815 	stw	r4,32(sp)
 4005c70:	003f5106 	br	40059b8 <__alt_data_end+0xfc0059b8>
 4005c74:	d8c00317 	ldw	r3,12(sp)
 4005c78:	b8c1fc0e 	bge	r23,r3,400646c <_dtoa_r+0x15b4>
 4005c7c:	0027883a 	mov	r19,zero
 4005c80:	b805883a 	mov	r2,r23
 4005c84:	003f3e06 	br	4005980 <__alt_data_end+0xfc005980>
 4005c88:	880b883a 	mov	r5,r17
 4005c8c:	e009883a 	mov	r4,fp
 4005c90:	000f883a 	mov	r7,zero
 4005c94:	01800284 	movi	r6,10
 4005c98:	4006b340 	call	4006b34 <__multadd>
 4005c9c:	d9000c17 	ldw	r4,48(sp)
 4005ca0:	1023883a 	mov	r17,r2
 4005ca4:	0102040e 	bge	zero,r4,40064b8 <_dtoa_r+0x1600>
 4005ca8:	d9000615 	stw	r4,24(sp)
 4005cac:	0500050e 	bge	zero,r20,4005cc4 <_dtoa_r+0xe0c>
 4005cb0:	880b883a 	mov	r5,r17
 4005cb4:	a00d883a 	mov	r6,r20
 4005cb8:	e009883a 	mov	r4,fp
 4005cbc:	40071e40 	call	40071e4 <__lshift>
 4005cc0:	1023883a 	mov	r17,r2
 4005cc4:	9801241e 	bne	r19,zero,4006158 <_dtoa_r+0x12a0>
 4005cc8:	8829883a 	mov	r20,r17
 4005ccc:	d9000617 	ldw	r4,24(sp)
 4005cd0:	dcc00717 	ldw	r19,28(sp)
 4005cd4:	9480004c 	andi	r18,r18,1
 4005cd8:	20bfffc4 	addi	r2,r4,-1
 4005cdc:	9885883a 	add	r2,r19,r2
 4005ce0:	d8800415 	stw	r2,16(sp)
 4005ce4:	dc800615 	stw	r18,24(sp)
 4005ce8:	a80b883a 	mov	r5,r21
 4005cec:	8009883a 	mov	r4,r16
 4005cf0:	4004cb80 	call	4004cb8 <quorem>
 4005cf4:	880b883a 	mov	r5,r17
 4005cf8:	8009883a 	mov	r4,r16
 4005cfc:	102f883a 	mov	r23,r2
 4005d00:	400732c0 	call	400732c <__mcmp>
 4005d04:	a80b883a 	mov	r5,r21
 4005d08:	a00d883a 	mov	r6,r20
 4005d0c:	e009883a 	mov	r4,fp
 4005d10:	102d883a 	mov	r22,r2
 4005d14:	400738c0 	call	400738c <__mdiff>
 4005d18:	1007883a 	mov	r3,r2
 4005d1c:	10800317 	ldw	r2,12(r2)
 4005d20:	bc800c04 	addi	r18,r23,48
 4005d24:	180b883a 	mov	r5,r3
 4005d28:	10004e1e 	bne	r2,zero,4005e64 <_dtoa_r+0xfac>
 4005d2c:	8009883a 	mov	r4,r16
 4005d30:	d8c01615 	stw	r3,88(sp)
 4005d34:	400732c0 	call	400732c <__mcmp>
 4005d38:	d8c01617 	ldw	r3,88(sp)
 4005d3c:	e009883a 	mov	r4,fp
 4005d40:	d8801615 	stw	r2,88(sp)
 4005d44:	180b883a 	mov	r5,r3
 4005d48:	4006b0c0 	call	4006b0c <_Bfree>
 4005d4c:	d8801617 	ldw	r2,88(sp)
 4005d50:	1000041e 	bne	r2,zero,4005d64 <_dtoa_r+0xeac>
 4005d54:	d9800317 	ldw	r6,12(sp)
 4005d58:	3000021e 	bne	r6,zero,4005d64 <_dtoa_r+0xeac>
 4005d5c:	d8c00617 	ldw	r3,24(sp)
 4005d60:	18003726 	beq	r3,zero,4005e40 <_dtoa_r+0xf88>
 4005d64:	b0002016 	blt	r22,zero,4005de8 <_dtoa_r+0xf30>
 4005d68:	b000041e 	bne	r22,zero,4005d7c <_dtoa_r+0xec4>
 4005d6c:	d9000317 	ldw	r4,12(sp)
 4005d70:	2000021e 	bne	r4,zero,4005d7c <_dtoa_r+0xec4>
 4005d74:	d8c00617 	ldw	r3,24(sp)
 4005d78:	18001b26 	beq	r3,zero,4005de8 <_dtoa_r+0xf30>
 4005d7c:	00810716 	blt	zero,r2,400619c <_dtoa_r+0x12e4>
 4005d80:	d8c00417 	ldw	r3,16(sp)
 4005d84:	9d800044 	addi	r22,r19,1
 4005d88:	9c800005 	stb	r18,0(r19)
 4005d8c:	b02f883a 	mov	r23,r22
 4005d90:	98c10626 	beq	r19,r3,40061ac <_dtoa_r+0x12f4>
 4005d94:	800b883a 	mov	r5,r16
 4005d98:	000f883a 	mov	r7,zero
 4005d9c:	01800284 	movi	r6,10
 4005da0:	e009883a 	mov	r4,fp
 4005da4:	4006b340 	call	4006b34 <__multadd>
 4005da8:	1021883a 	mov	r16,r2
 4005dac:	000f883a 	mov	r7,zero
 4005db0:	01800284 	movi	r6,10
 4005db4:	880b883a 	mov	r5,r17
 4005db8:	e009883a 	mov	r4,fp
 4005dbc:	8d002526 	beq	r17,r20,4005e54 <_dtoa_r+0xf9c>
 4005dc0:	4006b340 	call	4006b34 <__multadd>
 4005dc4:	a00b883a 	mov	r5,r20
 4005dc8:	000f883a 	mov	r7,zero
 4005dcc:	01800284 	movi	r6,10
 4005dd0:	e009883a 	mov	r4,fp
 4005dd4:	1023883a 	mov	r17,r2
 4005dd8:	4006b340 	call	4006b34 <__multadd>
 4005ddc:	1029883a 	mov	r20,r2
 4005de0:	b027883a 	mov	r19,r22
 4005de4:	003fc006 	br	4005ce8 <__alt_data_end+0xfc005ce8>
 4005de8:	9011883a 	mov	r8,r18
 4005dec:	00800e0e 	bge	zero,r2,4005e28 <_dtoa_r+0xf70>
 4005df0:	800b883a 	mov	r5,r16
 4005df4:	01800044 	movi	r6,1
 4005df8:	e009883a 	mov	r4,fp
 4005dfc:	da001715 	stw	r8,92(sp)
 4005e00:	40071e40 	call	40071e4 <__lshift>
 4005e04:	a80b883a 	mov	r5,r21
 4005e08:	1009883a 	mov	r4,r2
 4005e0c:	1021883a 	mov	r16,r2
 4005e10:	400732c0 	call	400732c <__mcmp>
 4005e14:	da001717 	ldw	r8,92(sp)
 4005e18:	0081960e 	bge	zero,r2,4006474 <_dtoa_r+0x15bc>
 4005e1c:	00800e44 	movi	r2,57
 4005e20:	40817026 	beq	r8,r2,40063e4 <_dtoa_r+0x152c>
 4005e24:	ba000c44 	addi	r8,r23,49
 4005e28:	8825883a 	mov	r18,r17
 4005e2c:	9dc00044 	addi	r23,r19,1
 4005e30:	9a000005 	stb	r8,0(r19)
 4005e34:	a023883a 	mov	r17,r20
 4005e38:	dc000915 	stw	r16,36(sp)
 4005e3c:	003f2406 	br	4005ad0 <__alt_data_end+0xfc005ad0>
 4005e40:	00800e44 	movi	r2,57
 4005e44:	9011883a 	mov	r8,r18
 4005e48:	90816626 	beq	r18,r2,40063e4 <_dtoa_r+0x152c>
 4005e4c:	05bff516 	blt	zero,r22,4005e24 <__alt_data_end+0xfc005e24>
 4005e50:	003ff506 	br	4005e28 <__alt_data_end+0xfc005e28>
 4005e54:	4006b340 	call	4006b34 <__multadd>
 4005e58:	1023883a 	mov	r17,r2
 4005e5c:	1029883a 	mov	r20,r2
 4005e60:	003fdf06 	br	4005de0 <__alt_data_end+0xfc005de0>
 4005e64:	e009883a 	mov	r4,fp
 4005e68:	4006b0c0 	call	4006b0c <_Bfree>
 4005e6c:	00800044 	movi	r2,1
 4005e70:	003fbc06 	br	4005d64 <__alt_data_end+0xfc005d64>
 4005e74:	a80b883a 	mov	r5,r21
 4005e78:	8009883a 	mov	r4,r16
 4005e7c:	400732c0 	call	400732c <__mcmp>
 4005e80:	103edb0e 	bge	r2,zero,40059f0 <__alt_data_end+0xfc0059f0>
 4005e84:	800b883a 	mov	r5,r16
 4005e88:	000f883a 	mov	r7,zero
 4005e8c:	01800284 	movi	r6,10
 4005e90:	e009883a 	mov	r4,fp
 4005e94:	4006b340 	call	4006b34 <__multadd>
 4005e98:	1021883a 	mov	r16,r2
 4005e9c:	d8800517 	ldw	r2,20(sp)
 4005ea0:	d8c00b17 	ldw	r3,44(sp)
 4005ea4:	10bfffc4 	addi	r2,r2,-1
 4005ea8:	d8800515 	stw	r2,20(sp)
 4005eac:	183f761e 	bne	r3,zero,4005c88 <__alt_data_end+0xfc005c88>
 4005eb0:	d9000c17 	ldw	r4,48(sp)
 4005eb4:	0101730e 	bge	zero,r4,4006484 <_dtoa_r+0x15cc>
 4005eb8:	d9000615 	stw	r4,24(sp)
 4005ebc:	003ed006 	br	4005a00 <__alt_data_end+0xfc005a00>
 4005ec0:	00800084 	movi	r2,2
 4005ec4:	3081861e 	bne	r6,r2,40064e0 <_dtoa_r+0x1628>
 4005ec8:	d8000b15 	stw	zero,44(sp)
 4005ecc:	003f3c06 	br	4005bc0 <__alt_data_end+0xfc005bc0>
 4005ed0:	dc000917 	ldw	r16,36(sp)
 4005ed4:	003e9206 	br	4005920 <__alt_data_end+0xfc005920>
 4005ed8:	d9c00317 	ldw	r7,12(sp)
 4005edc:	00800084 	movi	r2,2
 4005ee0:	11fec50e 	bge	r2,r7,40059f8 <__alt_data_end+0xfc0059f8>
 4005ee4:	d9000617 	ldw	r4,24(sp)
 4005ee8:	20013c1e 	bne	r4,zero,40063dc <_dtoa_r+0x1524>
 4005eec:	a80b883a 	mov	r5,r21
 4005ef0:	000f883a 	mov	r7,zero
 4005ef4:	01800144 	movi	r6,5
 4005ef8:	e009883a 	mov	r4,fp
 4005efc:	4006b340 	call	4006b34 <__multadd>
 4005f00:	100b883a 	mov	r5,r2
 4005f04:	8009883a 	mov	r4,r16
 4005f08:	102b883a 	mov	r21,r2
 4005f0c:	400732c0 	call	400732c <__mcmp>
 4005f10:	dc000915 	stw	r16,36(sp)
 4005f14:	00bf410e 	bge	zero,r2,4005c1c <__alt_data_end+0xfc005c1c>
 4005f18:	d9c00717 	ldw	r7,28(sp)
 4005f1c:	00800c44 	movi	r2,49
 4005f20:	38800005 	stb	r2,0(r7)
 4005f24:	d8800517 	ldw	r2,20(sp)
 4005f28:	3dc00044 	addi	r23,r7,1
 4005f2c:	10800044 	addi	r2,r2,1
 4005f30:	d8800515 	stw	r2,20(sp)
 4005f34:	003f3d06 	br	4005c2c <__alt_data_end+0xfc005c2c>
 4005f38:	d9800517 	ldw	r6,20(sp)
 4005f3c:	d9c00717 	ldw	r7,28(sp)
 4005f40:	00800c44 	movi	r2,49
 4005f44:	31800044 	addi	r6,r6,1
 4005f48:	d9800515 	stw	r6,20(sp)
 4005f4c:	38800005 	stb	r2,0(r7)
 4005f50:	003edf06 	br	4005ad0 <__alt_data_end+0xfc005ad0>
 4005f54:	d8000b15 	stw	zero,44(sp)
 4005f58:	003c9f06 	br	40051d8 <__alt_data_end+0xfc0051d8>
 4005f5c:	903e7e1e 	bne	r18,zero,4005958 <__alt_data_end+0xfc005958>
 4005f60:	00800434 	movhi	r2,16
 4005f64:	10bfffc4 	addi	r2,r2,-1
 4005f68:	9884703a 	and	r2,r19,r2
 4005f6c:	1000ea1e 	bne	r2,zero,4006318 <_dtoa_r+0x1460>
 4005f70:	9cdffc2c 	andhi	r19,r19,32752
 4005f74:	9800e826 	beq	r19,zero,4006318 <_dtoa_r+0x1460>
 4005f78:	d9c00817 	ldw	r7,32(sp)
 4005f7c:	b5800044 	addi	r22,r22,1
 4005f80:	04c00044 	movi	r19,1
 4005f84:	39c00044 	addi	r7,r7,1
 4005f88:	d9c00815 	stw	r7,32(sp)
 4005f8c:	d8800d17 	ldw	r2,52(sp)
 4005f90:	103e721e 	bne	r2,zero,400595c <__alt_data_end+0xfc00595c>
 4005f94:	00800044 	movi	r2,1
 4005f98:	003e7906 	br	4005980 <__alt_data_end+0xfc005980>
 4005f9c:	8009883a 	mov	r4,r16
 4005fa0:	400d4980 	call	400d498 <__floatsidf>
 4005fa4:	d9800f17 	ldw	r6,60(sp)
 4005fa8:	d9c01017 	ldw	r7,64(sp)
 4005fac:	1009883a 	mov	r4,r2
 4005fb0:	180b883a 	mov	r5,r3
 4005fb4:	400c4040 	call	400c404 <__muldf3>
 4005fb8:	000d883a 	mov	r6,zero
 4005fbc:	01d00734 	movhi	r7,16412
 4005fc0:	1009883a 	mov	r4,r2
 4005fc4:	180b883a 	mov	r5,r3
 4005fc8:	400b0180 	call	400b018 <__adddf3>
 4005fcc:	047f3034 	movhi	r17,64704
 4005fd0:	1021883a 	mov	r16,r2
 4005fd4:	1c63883a 	add	r17,r3,r17
 4005fd8:	d9000f17 	ldw	r4,60(sp)
 4005fdc:	d9401017 	ldw	r5,64(sp)
 4005fe0:	000d883a 	mov	r6,zero
 4005fe4:	01d00534 	movhi	r7,16404
 4005fe8:	400cb1c0 	call	400cb1c <__subdf3>
 4005fec:	800d883a 	mov	r6,r16
 4005ff0:	880f883a 	mov	r7,r17
 4005ff4:	1009883a 	mov	r4,r2
 4005ff8:	180b883a 	mov	r5,r3
 4005ffc:	102b883a 	mov	r21,r2
 4006000:	1829883a 	mov	r20,r3
 4006004:	400c2340 	call	400c234 <__gedf2>
 4006008:	00806c16 	blt	zero,r2,40061bc <_dtoa_r+0x1304>
 400600c:	89e0003c 	xorhi	r7,r17,32768
 4006010:	800d883a 	mov	r6,r16
 4006014:	a809883a 	mov	r4,r21
 4006018:	a00b883a 	mov	r5,r20
 400601c:	400c3100 	call	400c310 <__ledf2>
 4006020:	103d7e0e 	bge	r2,zero,400561c <__alt_data_end+0xfc00561c>
 4006024:	002b883a 	mov	r21,zero
 4006028:	0023883a 	mov	r17,zero
 400602c:	003efb06 	br	4005c1c <__alt_data_end+0xfc005c1c>
 4006030:	d8800717 	ldw	r2,28(sp)
 4006034:	003bd006 	br	4004f78 <__alt_data_end+0xfc004f78>
 4006038:	d9000a17 	ldw	r4,40(sp)
 400603c:	d9800d17 	ldw	r6,52(sp)
 4006040:	dd400a15 	stw	r21,40(sp)
 4006044:	a905c83a 	sub	r2,r21,r4
 4006048:	308d883a 	add	r6,r6,r2
 400604c:	d9800d15 	stw	r6,52(sp)
 4006050:	002b883a 	mov	r21,zero
 4006054:	003e0606 	br	4005870 <__alt_data_end+0xfc005870>
 4006058:	9023883a 	mov	r17,r18
 400605c:	9829883a 	mov	r20,r19
 4006060:	04000084 	movi	r16,2
 4006064:	003c9206 	br	40052b0 <__alt_data_end+0xfc0052b0>
 4006068:	04000044 	movi	r16,1
 400606c:	dc000c15 	stw	r16,48(sp)
 4006070:	dc000615 	stw	r16,24(sp)
 4006074:	dc002215 	stw	r16,136(sp)
 4006078:	e0001115 	stw	zero,68(fp)
 400607c:	000b883a 	mov	r5,zero
 4006080:	003c6906 	br	4005228 <__alt_data_end+0xfc005228>
 4006084:	3021883a 	mov	r16,r6
 4006088:	003ffb06 	br	4006078 <__alt_data_end+0xfc006078>
 400608c:	1000021e 	bne	r2,zero,4006098 <_dtoa_r+0x11e0>
 4006090:	4200004c 	andi	r8,r8,1
 4006094:	403e7d1e 	bne	r8,zero,4005a8c <__alt_data_end+0xfc005a8c>
 4006098:	01000c04 	movi	r4,48
 400609c:	00000106 	br	40060a4 <_dtoa_r+0x11ec>
 40060a0:	102f883a 	mov	r23,r2
 40060a4:	b8bfffc4 	addi	r2,r23,-1
 40060a8:	10c00007 	ldb	r3,0(r2)
 40060ac:	193ffc26 	beq	r3,r4,40060a0 <__alt_data_end+0xfc0060a0>
 40060b0:	003e8706 	br	4005ad0 <__alt_data_end+0xfc005ad0>
 40060b4:	d8800517 	ldw	r2,20(sp)
 40060b8:	00a3c83a 	sub	r17,zero,r2
 40060bc:	8800a426 	beq	r17,zero,4006350 <_dtoa_r+0x1498>
 40060c0:	888003cc 	andi	r2,r17,15
 40060c4:	100490fa 	slli	r2,r2,3
 40060c8:	00c10074 	movhi	r3,1025
 40060cc:	18c18304 	addi	r3,r3,1548
 40060d0:	1885883a 	add	r2,r3,r2
 40060d4:	11800017 	ldw	r6,0(r2)
 40060d8:	11c00117 	ldw	r7,4(r2)
 40060dc:	9009883a 	mov	r4,r18
 40060e0:	980b883a 	mov	r5,r19
 40060e4:	8823d13a 	srai	r17,r17,4
 40060e8:	400c4040 	call	400c404 <__muldf3>
 40060ec:	d8800f15 	stw	r2,60(sp)
 40060f0:	d8c01015 	stw	r3,64(sp)
 40060f4:	8800e826 	beq	r17,zero,4006498 <_dtoa_r+0x15e0>
 40060f8:	05010074 	movhi	r20,1025
 40060fc:	a5017904 	addi	r20,r20,1508
 4006100:	04000084 	movi	r16,2
 4006104:	8980004c 	andi	r6,r17,1
 4006108:	1009883a 	mov	r4,r2
 400610c:	8823d07a 	srai	r17,r17,1
 4006110:	180b883a 	mov	r5,r3
 4006114:	30000426 	beq	r6,zero,4006128 <_dtoa_r+0x1270>
 4006118:	a1800017 	ldw	r6,0(r20)
 400611c:	a1c00117 	ldw	r7,4(r20)
 4006120:	84000044 	addi	r16,r16,1
 4006124:	400c4040 	call	400c404 <__muldf3>
 4006128:	a5000204 	addi	r20,r20,8
 400612c:	883ff51e 	bne	r17,zero,4006104 <__alt_data_end+0xfc006104>
 4006130:	d8800f15 	stw	r2,60(sp)
 4006134:	d8c01015 	stw	r3,64(sp)
 4006138:	003c7606 	br	4005314 <__alt_data_end+0xfc005314>
 400613c:	00c00c04 	movi	r3,48
 4006140:	10c00005 	stb	r3,0(r2)
 4006144:	d8c00517 	ldw	r3,20(sp)
 4006148:	bd3fffc3 	ldbu	r20,-1(r23)
 400614c:	18c00044 	addi	r3,r3,1
 4006150:	d8c00515 	stw	r3,20(sp)
 4006154:	003db906 	br	400583c <__alt_data_end+0xfc00583c>
 4006158:	89400117 	ldw	r5,4(r17)
 400615c:	e009883a 	mov	r4,fp
 4006160:	4006a640 	call	4006a64 <_Balloc>
 4006164:	89800417 	ldw	r6,16(r17)
 4006168:	89400304 	addi	r5,r17,12
 400616c:	11000304 	addi	r4,r2,12
 4006170:	31800084 	addi	r6,r6,2
 4006174:	318d883a 	add	r6,r6,r6
 4006178:	318d883a 	add	r6,r6,r6
 400617c:	1027883a 	mov	r19,r2
 4006180:	400691c0 	call	400691c <memcpy>
 4006184:	01800044 	movi	r6,1
 4006188:	980b883a 	mov	r5,r19
 400618c:	e009883a 	mov	r4,fp
 4006190:	40071e40 	call	40071e4 <__lshift>
 4006194:	1029883a 	mov	r20,r2
 4006198:	003ecc06 	br	4005ccc <__alt_data_end+0xfc005ccc>
 400619c:	00800e44 	movi	r2,57
 40061a0:	90809026 	beq	r18,r2,40063e4 <_dtoa_r+0x152c>
 40061a4:	92000044 	addi	r8,r18,1
 40061a8:	003f1f06 	br	4005e28 <__alt_data_end+0xfc005e28>
 40061ac:	9011883a 	mov	r8,r18
 40061b0:	8825883a 	mov	r18,r17
 40061b4:	a023883a 	mov	r17,r20
 40061b8:	003e2906 	br	4005a60 <__alt_data_end+0xfc005a60>
 40061bc:	002b883a 	mov	r21,zero
 40061c0:	0023883a 	mov	r17,zero
 40061c4:	003f5406 	br	4005f18 <__alt_data_end+0xfc005f18>
 40061c8:	61bfffc4 	addi	r6,r12,-1
 40061cc:	300490fa 	slli	r2,r6,3
 40061d0:	00c10074 	movhi	r3,1025
 40061d4:	18c18304 	addi	r3,r3,1548
 40061d8:	1885883a 	add	r2,r3,r2
 40061dc:	11000017 	ldw	r4,0(r2)
 40061e0:	11400117 	ldw	r5,4(r2)
 40061e4:	d8800717 	ldw	r2,28(sp)
 40061e8:	880f883a 	mov	r7,r17
 40061ec:	d9801215 	stw	r6,72(sp)
 40061f0:	800d883a 	mov	r6,r16
 40061f4:	db001615 	stw	r12,88(sp)
 40061f8:	15c00044 	addi	r23,r2,1
 40061fc:	400c4040 	call	400c404 <__muldf3>
 4006200:	d9401017 	ldw	r5,64(sp)
 4006204:	d9000f17 	ldw	r4,60(sp)
 4006208:	d8c01515 	stw	r3,84(sp)
 400620c:	d8801415 	stw	r2,80(sp)
 4006210:	400d4180 	call	400d418 <__fixdfsi>
 4006214:	1009883a 	mov	r4,r2
 4006218:	1021883a 	mov	r16,r2
 400621c:	400d4980 	call	400d498 <__floatsidf>
 4006220:	d9000f17 	ldw	r4,60(sp)
 4006224:	d9401017 	ldw	r5,64(sp)
 4006228:	100d883a 	mov	r6,r2
 400622c:	180f883a 	mov	r7,r3
 4006230:	400cb1c0 	call	400cb1c <__subdf3>
 4006234:	1829883a 	mov	r20,r3
 4006238:	d8c00717 	ldw	r3,28(sp)
 400623c:	84000c04 	addi	r16,r16,48
 4006240:	1023883a 	mov	r17,r2
 4006244:	1c000005 	stb	r16,0(r3)
 4006248:	db001617 	ldw	r12,88(sp)
 400624c:	00800044 	movi	r2,1
 4006250:	60802226 	beq	r12,r2,40062dc <_dtoa_r+0x1424>
 4006254:	d9c00717 	ldw	r7,28(sp)
 4006258:	8805883a 	mov	r2,r17
 400625c:	b82b883a 	mov	r21,r23
 4006260:	3b19883a 	add	r12,r7,r12
 4006264:	6023883a 	mov	r17,r12
 4006268:	a007883a 	mov	r3,r20
 400626c:	dc800f15 	stw	r18,60(sp)
 4006270:	000d883a 	mov	r6,zero
 4006274:	01d00934 	movhi	r7,16420
 4006278:	1009883a 	mov	r4,r2
 400627c:	180b883a 	mov	r5,r3
 4006280:	400c4040 	call	400c404 <__muldf3>
 4006284:	180b883a 	mov	r5,r3
 4006288:	1009883a 	mov	r4,r2
 400628c:	1829883a 	mov	r20,r3
 4006290:	1025883a 	mov	r18,r2
 4006294:	400d4180 	call	400d418 <__fixdfsi>
 4006298:	1009883a 	mov	r4,r2
 400629c:	1021883a 	mov	r16,r2
 40062a0:	400d4980 	call	400d498 <__floatsidf>
 40062a4:	100d883a 	mov	r6,r2
 40062a8:	180f883a 	mov	r7,r3
 40062ac:	9009883a 	mov	r4,r18
 40062b0:	a00b883a 	mov	r5,r20
 40062b4:	84000c04 	addi	r16,r16,48
 40062b8:	400cb1c0 	call	400cb1c <__subdf3>
 40062bc:	ad400044 	addi	r21,r21,1
 40062c0:	ac3fffc5 	stb	r16,-1(r21)
 40062c4:	ac7fea1e 	bne	r21,r17,4006270 <__alt_data_end+0xfc006270>
 40062c8:	1023883a 	mov	r17,r2
 40062cc:	d8801217 	ldw	r2,72(sp)
 40062d0:	dc800f17 	ldw	r18,60(sp)
 40062d4:	1829883a 	mov	r20,r3
 40062d8:	b8af883a 	add	r23,r23,r2
 40062dc:	d9001417 	ldw	r4,80(sp)
 40062e0:	d9401517 	ldw	r5,84(sp)
 40062e4:	000d883a 	mov	r6,zero
 40062e8:	01cff834 	movhi	r7,16352
 40062ec:	400b0180 	call	400b018 <__adddf3>
 40062f0:	880d883a 	mov	r6,r17
 40062f4:	a00f883a 	mov	r7,r20
 40062f8:	1009883a 	mov	r4,r2
 40062fc:	180b883a 	mov	r5,r3
 4006300:	400c3100 	call	400c310 <__ledf2>
 4006304:	10003e0e 	bge	r2,zero,4006400 <_dtoa_r+0x1548>
 4006308:	d9001317 	ldw	r4,76(sp)
 400630c:	bd3fffc3 	ldbu	r20,-1(r23)
 4006310:	d9000515 	stw	r4,20(sp)
 4006314:	003d3b06 	br	4005804 <__alt_data_end+0xfc005804>
 4006318:	0027883a 	mov	r19,zero
 400631c:	003f1b06 	br	4005f8c <__alt_data_end+0xfc005f8c>
 4006320:	d8800817 	ldw	r2,32(sp)
 4006324:	11e9c83a 	sub	r20,r2,r7
 4006328:	0005883a 	mov	r2,zero
 400632c:	003d5406 	br	4005880 <__alt_data_end+0xfc005880>
 4006330:	00800044 	movi	r2,1
 4006334:	003dc706 	br	4005a54 <__alt_data_end+0xfc005a54>
 4006338:	d8c00217 	ldw	r3,8(sp)
 400633c:	00800d84 	movi	r2,54
 4006340:	dd400a17 	ldw	r21,40(sp)
 4006344:	10c5c83a 	sub	r2,r2,r3
 4006348:	dd000817 	ldw	r20,32(sp)
 400634c:	003d4c06 	br	4005880 <__alt_data_end+0xfc005880>
 4006350:	dc800f15 	stw	r18,60(sp)
 4006354:	dcc01015 	stw	r19,64(sp)
 4006358:	04000084 	movi	r16,2
 400635c:	003bed06 	br	4005314 <__alt_data_end+0xfc005314>
 4006360:	d9000617 	ldw	r4,24(sp)
 4006364:	203f0d26 	beq	r4,zero,4005f9c <__alt_data_end+0xfc005f9c>
 4006368:	d9800c17 	ldw	r6,48(sp)
 400636c:	01bcab0e 	bge	zero,r6,400561c <__alt_data_end+0xfc00561c>
 4006370:	d9401017 	ldw	r5,64(sp)
 4006374:	d9000f17 	ldw	r4,60(sp)
 4006378:	000d883a 	mov	r6,zero
 400637c:	01d00934 	movhi	r7,16420
 4006380:	400c4040 	call	400c404 <__muldf3>
 4006384:	81000044 	addi	r4,r16,1
 4006388:	d8800f15 	stw	r2,60(sp)
 400638c:	d8c01015 	stw	r3,64(sp)
 4006390:	400d4980 	call	400d498 <__floatsidf>
 4006394:	d9800f17 	ldw	r6,60(sp)
 4006398:	d9c01017 	ldw	r7,64(sp)
 400639c:	1009883a 	mov	r4,r2
 40063a0:	180b883a 	mov	r5,r3
 40063a4:	400c4040 	call	400c404 <__muldf3>
 40063a8:	01d00734 	movhi	r7,16412
 40063ac:	000d883a 	mov	r6,zero
 40063b0:	1009883a 	mov	r4,r2
 40063b4:	180b883a 	mov	r5,r3
 40063b8:	400b0180 	call	400b018 <__adddf3>
 40063bc:	d9c00517 	ldw	r7,20(sp)
 40063c0:	047f3034 	movhi	r17,64704
 40063c4:	1021883a 	mov	r16,r2
 40063c8:	39ffffc4 	addi	r7,r7,-1
 40063cc:	d9c01315 	stw	r7,76(sp)
 40063d0:	1c63883a 	add	r17,r3,r17
 40063d4:	db000c17 	ldw	r12,48(sp)
 40063d8:	003bea06 	br	4005384 <__alt_data_end+0xfc005384>
 40063dc:	dc000915 	stw	r16,36(sp)
 40063e0:	003e0e06 	br	4005c1c <__alt_data_end+0xfc005c1c>
 40063e4:	01000e44 	movi	r4,57
 40063e8:	8825883a 	mov	r18,r17
 40063ec:	9dc00044 	addi	r23,r19,1
 40063f0:	99000005 	stb	r4,0(r19)
 40063f4:	a023883a 	mov	r17,r20
 40063f8:	dc000915 	stw	r16,36(sp)
 40063fc:	003da406 	br	4005a90 <__alt_data_end+0xfc005a90>
 4006400:	d9801417 	ldw	r6,80(sp)
 4006404:	d9c01517 	ldw	r7,84(sp)
 4006408:	0009883a 	mov	r4,zero
 400640c:	014ff834 	movhi	r5,16352
 4006410:	400cb1c0 	call	400cb1c <__subdf3>
 4006414:	880d883a 	mov	r6,r17
 4006418:	a00f883a 	mov	r7,r20
 400641c:	1009883a 	mov	r4,r2
 4006420:	180b883a 	mov	r5,r3
 4006424:	400c2340 	call	400c234 <__gedf2>
 4006428:	00bc7c0e 	bge	zero,r2,400561c <__alt_data_end+0xfc00561c>
 400642c:	01000c04 	movi	r4,48
 4006430:	00000106 	br	4006438 <_dtoa_r+0x1580>
 4006434:	102f883a 	mov	r23,r2
 4006438:	b8bfffc4 	addi	r2,r23,-1
 400643c:	10c00007 	ldb	r3,0(r2)
 4006440:	193ffc26 	beq	r3,r4,4006434 <__alt_data_end+0xfc006434>
 4006444:	d9801317 	ldw	r6,76(sp)
 4006448:	d9800515 	stw	r6,20(sp)
 400644c:	003c4406 	br	4005560 <__alt_data_end+0xfc005560>
 4006450:	d9801317 	ldw	r6,76(sp)
 4006454:	d9800515 	stw	r6,20(sp)
 4006458:	003cea06 	br	4005804 <__alt_data_end+0xfc005804>
 400645c:	dd800f17 	ldw	r22,60(sp)
 4006460:	dcc01017 	ldw	r19,64(sp)
 4006464:	dc801217 	ldw	r18,72(sp)
 4006468:	003c6c06 	br	400561c <__alt_data_end+0xfc00561c>
 400646c:	903e031e 	bne	r18,zero,4005c7c <__alt_data_end+0xfc005c7c>
 4006470:	003ebb06 	br	4005f60 <__alt_data_end+0xfc005f60>
 4006474:	103e6c1e 	bne	r2,zero,4005e28 <__alt_data_end+0xfc005e28>
 4006478:	4080004c 	andi	r2,r8,1
 400647c:	103e6a26 	beq	r2,zero,4005e28 <__alt_data_end+0xfc005e28>
 4006480:	003e6606 	br	4005e1c <__alt_data_end+0xfc005e1c>
 4006484:	d8c00317 	ldw	r3,12(sp)
 4006488:	00800084 	movi	r2,2
 400648c:	10c02916 	blt	r2,r3,4006534 <_dtoa_r+0x167c>
 4006490:	d9000c17 	ldw	r4,48(sp)
 4006494:	003e8806 	br	4005eb8 <__alt_data_end+0xfc005eb8>
 4006498:	04000084 	movi	r16,2
 400649c:	003b9d06 	br	4005314 <__alt_data_end+0xfc005314>
 40064a0:	d9001317 	ldw	r4,76(sp)
 40064a4:	d9000515 	stw	r4,20(sp)
 40064a8:	003cd606 	br	4005804 <__alt_data_end+0xfc005804>
 40064ac:	d8801317 	ldw	r2,76(sp)
 40064b0:	d8800515 	stw	r2,20(sp)
 40064b4:	003c2a06 	br	4005560 <__alt_data_end+0xfc005560>
 40064b8:	d9800317 	ldw	r6,12(sp)
 40064bc:	00800084 	movi	r2,2
 40064c0:	11801516 	blt	r2,r6,4006518 <_dtoa_r+0x1660>
 40064c4:	d9c00c17 	ldw	r7,48(sp)
 40064c8:	d9c00615 	stw	r7,24(sp)
 40064cc:	003df706 	br	4005cac <__alt_data_end+0xfc005cac>
 40064d0:	193d3926 	beq	r3,r4,40059b8 <__alt_data_end+0xfc0059b8>
 40064d4:	00c00f04 	movi	r3,60
 40064d8:	1885c83a 	sub	r2,r3,r2
 40064dc:	003ddf06 	br	4005c5c <__alt_data_end+0xfc005c5c>
 40064e0:	e009883a 	mov	r4,fp
 40064e4:	e0001115 	stw	zero,68(fp)
 40064e8:	000b883a 	mov	r5,zero
 40064ec:	4006a640 	call	4006a64 <_Balloc>
 40064f0:	d8800715 	stw	r2,28(sp)
 40064f4:	d8c00717 	ldw	r3,28(sp)
 40064f8:	00bfffc4 	movi	r2,-1
 40064fc:	01000044 	movi	r4,1
 4006500:	d8800c15 	stw	r2,48(sp)
 4006504:	e0c01015 	stw	r3,64(fp)
 4006508:	d9000b15 	stw	r4,44(sp)
 400650c:	d8800615 	stw	r2,24(sp)
 4006510:	d8002215 	stw	zero,136(sp)
 4006514:	003c4106 	br	400561c <__alt_data_end+0xfc00561c>
 4006518:	d8c00c17 	ldw	r3,48(sp)
 400651c:	d8c00615 	stw	r3,24(sp)
 4006520:	003e7006 	br	4005ee4 <__alt_data_end+0xfc005ee4>
 4006524:	04400044 	movi	r17,1
 4006528:	003b2006 	br	40051ac <__alt_data_end+0xfc0051ac>
 400652c:	000b883a 	mov	r5,zero
 4006530:	003b3d06 	br	4005228 <__alt_data_end+0xfc005228>
 4006534:	d8800c17 	ldw	r2,48(sp)
 4006538:	d8800615 	stw	r2,24(sp)
 400653c:	003e6906 	br	4005ee4 <__alt_data_end+0xfc005ee4>

04006540 <_setlocale_r>:
 4006540:	30001b26 	beq	r6,zero,40065b0 <_setlocale_r+0x70>
 4006544:	01410074 	movhi	r5,1025
 4006548:	defffe04 	addi	sp,sp,-8
 400654c:	29416904 	addi	r5,r5,1444
 4006550:	3009883a 	mov	r4,r6
 4006554:	dc000015 	stw	r16,0(sp)
 4006558:	dfc00115 	stw	ra,4(sp)
 400655c:	3021883a 	mov	r16,r6
 4006560:	40023880 	call	4002388 <strcmp>
 4006564:	1000061e 	bne	r2,zero,4006580 <_setlocale_r+0x40>
 4006568:	00810074 	movhi	r2,1025
 400656c:	1080ab04 	addi	r2,r2,684
 4006570:	dfc00117 	ldw	ra,4(sp)
 4006574:	dc000017 	ldw	r16,0(sp)
 4006578:	dec00204 	addi	sp,sp,8
 400657c:	f800283a 	ret
 4006580:	01410074 	movhi	r5,1025
 4006584:	2940ab04 	addi	r5,r5,684
 4006588:	8009883a 	mov	r4,r16
 400658c:	40023880 	call	4002388 <strcmp>
 4006590:	103ff526 	beq	r2,zero,4006568 <__alt_data_end+0xfc006568>
 4006594:	01410074 	movhi	r5,1025
 4006598:	2940b404 	addi	r5,r5,720
 400659c:	8009883a 	mov	r4,r16
 40065a0:	40023880 	call	4002388 <strcmp>
 40065a4:	103ff026 	beq	r2,zero,4006568 <__alt_data_end+0xfc006568>
 40065a8:	0005883a 	mov	r2,zero
 40065ac:	003ff006 	br	4006570 <__alt_data_end+0xfc006570>
 40065b0:	00810074 	movhi	r2,1025
 40065b4:	1080ab04 	addi	r2,r2,684
 40065b8:	f800283a 	ret

040065bc <__locale_charset>:
 40065bc:	00810074 	movhi	r2,1025
 40065c0:	10842104 	addi	r2,r2,4228
 40065c4:	f800283a 	ret

040065c8 <__locale_mb_cur_max>:
 40065c8:	00810074 	movhi	r2,1025
 40065cc:	1088c904 	addi	r2,r2,8996
 40065d0:	10800017 	ldw	r2,0(r2)
 40065d4:	f800283a 	ret

040065d8 <__locale_msgcharset>:
 40065d8:	00810074 	movhi	r2,1025
 40065dc:	10841904 	addi	r2,r2,4196
 40065e0:	f800283a 	ret

040065e4 <__locale_cjk_lang>:
 40065e4:	0005883a 	mov	r2,zero
 40065e8:	f800283a 	ret

040065ec <_localeconv_r>:
 40065ec:	00810074 	movhi	r2,1025
 40065f0:	10842904 	addi	r2,r2,4260
 40065f4:	f800283a 	ret

040065f8 <setlocale>:
 40065f8:	00810074 	movhi	r2,1025
 40065fc:	1088c504 	addi	r2,r2,8980
 4006600:	280d883a 	mov	r6,r5
 4006604:	200b883a 	mov	r5,r4
 4006608:	11000017 	ldw	r4,0(r2)
 400660c:	40065401 	jmpi	4006540 <_setlocale_r>

04006610 <localeconv>:
 4006610:	00810074 	movhi	r2,1025
 4006614:	10842904 	addi	r2,r2,4260
 4006618:	f800283a 	ret

0400661c <_lseek_r>:
 400661c:	defffd04 	addi	sp,sp,-12
 4006620:	2805883a 	mov	r2,r5
 4006624:	dc000015 	stw	r16,0(sp)
 4006628:	04010074 	movhi	r16,1025
 400662c:	dc400115 	stw	r17,4(sp)
 4006630:	300b883a 	mov	r5,r6
 4006634:	840fa304 	addi	r16,r16,16012
 4006638:	2023883a 	mov	r17,r4
 400663c:	380d883a 	mov	r6,r7
 4006640:	1009883a 	mov	r4,r2
 4006644:	dfc00215 	stw	ra,8(sp)
 4006648:	80000015 	stw	zero,0(r16)
 400664c:	400daac0 	call	400daac <lseek>
 4006650:	00ffffc4 	movi	r3,-1
 4006654:	10c00526 	beq	r2,r3,400666c <_lseek_r+0x50>
 4006658:	dfc00217 	ldw	ra,8(sp)
 400665c:	dc400117 	ldw	r17,4(sp)
 4006660:	dc000017 	ldw	r16,0(sp)
 4006664:	dec00304 	addi	sp,sp,12
 4006668:	f800283a 	ret
 400666c:	80c00017 	ldw	r3,0(r16)
 4006670:	183ff926 	beq	r3,zero,4006658 <__alt_data_end+0xfc006658>
 4006674:	88c00015 	stw	r3,0(r17)
 4006678:	003ff706 	br	4006658 <__alt_data_end+0xfc006658>

0400667c <__smakebuf_r>:
 400667c:	2880030b 	ldhu	r2,12(r5)
 4006680:	10c0008c 	andi	r3,r2,2
 4006684:	1800411e 	bne	r3,zero,400678c <__smakebuf_r+0x110>
 4006688:	deffec04 	addi	sp,sp,-80
 400668c:	dc000f15 	stw	r16,60(sp)
 4006690:	2821883a 	mov	r16,r5
 4006694:	2940038f 	ldh	r5,14(r5)
 4006698:	dc401015 	stw	r17,64(sp)
 400669c:	dfc01315 	stw	ra,76(sp)
 40066a0:	dcc01215 	stw	r19,72(sp)
 40066a4:	dc801115 	stw	r18,68(sp)
 40066a8:	2023883a 	mov	r17,r4
 40066ac:	28001c16 	blt	r5,zero,4006720 <__smakebuf_r+0xa4>
 40066b0:	d80d883a 	mov	r6,sp
 40066b4:	40094480 	call	4009448 <_fstat_r>
 40066b8:	10001816 	blt	r2,zero,400671c <__smakebuf_r+0xa0>
 40066bc:	d8800117 	ldw	r2,4(sp)
 40066c0:	00e00014 	movui	r3,32768
 40066c4:	10bc000c 	andi	r2,r2,61440
 40066c8:	14c80020 	cmpeqi	r19,r2,8192
 40066cc:	10c03726 	beq	r2,r3,40067ac <__smakebuf_r+0x130>
 40066d0:	80c0030b 	ldhu	r3,12(r16)
 40066d4:	18c20014 	ori	r3,r3,2048
 40066d8:	80c0030d 	sth	r3,12(r16)
 40066dc:	00c80004 	movi	r3,8192
 40066e0:	10c0521e 	bne	r2,r3,400682c <__smakebuf_r+0x1b0>
 40066e4:	8140038f 	ldh	r5,14(r16)
 40066e8:	8809883a 	mov	r4,r17
 40066ec:	40099600 	call	4009960 <_isatty_r>
 40066f0:	10004c26 	beq	r2,zero,4006824 <__smakebuf_r+0x1a8>
 40066f4:	8080030b 	ldhu	r2,12(r16)
 40066f8:	80c010c4 	addi	r3,r16,67
 40066fc:	80c00015 	stw	r3,0(r16)
 4006700:	10800054 	ori	r2,r2,1
 4006704:	8080030d 	sth	r2,12(r16)
 4006708:	00800044 	movi	r2,1
 400670c:	80c00415 	stw	r3,16(r16)
 4006710:	80800515 	stw	r2,20(r16)
 4006714:	04810004 	movi	r18,1024
 4006718:	00000706 	br	4006738 <__smakebuf_r+0xbc>
 400671c:	8080030b 	ldhu	r2,12(r16)
 4006720:	10c0200c 	andi	r3,r2,128
 4006724:	18001f1e 	bne	r3,zero,40067a4 <__smakebuf_r+0x128>
 4006728:	04810004 	movi	r18,1024
 400672c:	10820014 	ori	r2,r2,2048
 4006730:	8080030d 	sth	r2,12(r16)
 4006734:	0027883a 	mov	r19,zero
 4006738:	900b883a 	mov	r5,r18
 400673c:	8809883a 	mov	r4,r17
 4006740:	40018580 	call	4001858 <_malloc_r>
 4006744:	10002c26 	beq	r2,zero,40067f8 <__smakebuf_r+0x17c>
 4006748:	80c0030b 	ldhu	r3,12(r16)
 400674c:	01010034 	movhi	r4,1024
 4006750:	2103c104 	addi	r4,r4,3844
 4006754:	89000f15 	stw	r4,60(r17)
 4006758:	18c02014 	ori	r3,r3,128
 400675c:	80c0030d 	sth	r3,12(r16)
 4006760:	80800015 	stw	r2,0(r16)
 4006764:	80800415 	stw	r2,16(r16)
 4006768:	84800515 	stw	r18,20(r16)
 400676c:	98001a1e 	bne	r19,zero,40067d8 <__smakebuf_r+0x15c>
 4006770:	dfc01317 	ldw	ra,76(sp)
 4006774:	dcc01217 	ldw	r19,72(sp)
 4006778:	dc801117 	ldw	r18,68(sp)
 400677c:	dc401017 	ldw	r17,64(sp)
 4006780:	dc000f17 	ldw	r16,60(sp)
 4006784:	dec01404 	addi	sp,sp,80
 4006788:	f800283a 	ret
 400678c:	288010c4 	addi	r2,r5,67
 4006790:	28800015 	stw	r2,0(r5)
 4006794:	28800415 	stw	r2,16(r5)
 4006798:	00800044 	movi	r2,1
 400679c:	28800515 	stw	r2,20(r5)
 40067a0:	f800283a 	ret
 40067a4:	04801004 	movi	r18,64
 40067a8:	003fe006 	br	400672c <__alt_data_end+0xfc00672c>
 40067ac:	81000a17 	ldw	r4,40(r16)
 40067b0:	00c10034 	movhi	r3,1024
 40067b4:	18c8c904 	addi	r3,r3,8996
 40067b8:	20ffc51e 	bne	r4,r3,40066d0 <__alt_data_end+0xfc0066d0>
 40067bc:	8080030b 	ldhu	r2,12(r16)
 40067c0:	04810004 	movi	r18,1024
 40067c4:	84801315 	stw	r18,76(r16)
 40067c8:	1484b03a 	or	r2,r2,r18
 40067cc:	8080030d 	sth	r2,12(r16)
 40067d0:	0027883a 	mov	r19,zero
 40067d4:	003fd806 	br	4006738 <__alt_data_end+0xfc006738>
 40067d8:	8140038f 	ldh	r5,14(r16)
 40067dc:	8809883a 	mov	r4,r17
 40067e0:	40099600 	call	4009960 <_isatty_r>
 40067e4:	103fe226 	beq	r2,zero,4006770 <__alt_data_end+0xfc006770>
 40067e8:	8080030b 	ldhu	r2,12(r16)
 40067ec:	10800054 	ori	r2,r2,1
 40067f0:	8080030d 	sth	r2,12(r16)
 40067f4:	003fde06 	br	4006770 <__alt_data_end+0xfc006770>
 40067f8:	8080030b 	ldhu	r2,12(r16)
 40067fc:	10c0800c 	andi	r3,r2,512
 4006800:	183fdb1e 	bne	r3,zero,4006770 <__alt_data_end+0xfc006770>
 4006804:	10800094 	ori	r2,r2,2
 4006808:	80c010c4 	addi	r3,r16,67
 400680c:	8080030d 	sth	r2,12(r16)
 4006810:	00800044 	movi	r2,1
 4006814:	80c00015 	stw	r3,0(r16)
 4006818:	80c00415 	stw	r3,16(r16)
 400681c:	80800515 	stw	r2,20(r16)
 4006820:	003fd306 	br	4006770 <__alt_data_end+0xfc006770>
 4006824:	04810004 	movi	r18,1024
 4006828:	003fc306 	br	4006738 <__alt_data_end+0xfc006738>
 400682c:	0027883a 	mov	r19,zero
 4006830:	04810004 	movi	r18,1024
 4006834:	003fc006 	br	4006738 <__alt_data_end+0xfc006738>

04006838 <memchr>:
 4006838:	208000cc 	andi	r2,r4,3
 400683c:	280f883a 	mov	r7,r5
 4006840:	10003426 	beq	r2,zero,4006914 <memchr+0xdc>
 4006844:	30bfffc4 	addi	r2,r6,-1
 4006848:	30001a26 	beq	r6,zero,40068b4 <memchr+0x7c>
 400684c:	20c00003 	ldbu	r3,0(r4)
 4006850:	29803fcc 	andi	r6,r5,255
 4006854:	30c0051e 	bne	r6,r3,400686c <memchr+0x34>
 4006858:	00001806 	br	40068bc <memchr+0x84>
 400685c:	10001526 	beq	r2,zero,40068b4 <memchr+0x7c>
 4006860:	20c00003 	ldbu	r3,0(r4)
 4006864:	10bfffc4 	addi	r2,r2,-1
 4006868:	30c01426 	beq	r6,r3,40068bc <memchr+0x84>
 400686c:	21000044 	addi	r4,r4,1
 4006870:	20c000cc 	andi	r3,r4,3
 4006874:	183ff91e 	bne	r3,zero,400685c <__alt_data_end+0xfc00685c>
 4006878:	020000c4 	movi	r8,3
 400687c:	40801136 	bltu	r8,r2,40068c4 <memchr+0x8c>
 4006880:	10000c26 	beq	r2,zero,40068b4 <memchr+0x7c>
 4006884:	20c00003 	ldbu	r3,0(r4)
 4006888:	29403fcc 	andi	r5,r5,255
 400688c:	28c00b26 	beq	r5,r3,40068bc <memchr+0x84>
 4006890:	20c00044 	addi	r3,r4,1
 4006894:	39803fcc 	andi	r6,r7,255
 4006898:	2089883a 	add	r4,r4,r2
 400689c:	00000306 	br	40068ac <memchr+0x74>
 40068a0:	18c00044 	addi	r3,r3,1
 40068a4:	197fffc3 	ldbu	r5,-1(r3)
 40068a8:	31400526 	beq	r6,r5,40068c0 <memchr+0x88>
 40068ac:	1805883a 	mov	r2,r3
 40068b0:	20fffb1e 	bne	r4,r3,40068a0 <__alt_data_end+0xfc0068a0>
 40068b4:	0005883a 	mov	r2,zero
 40068b8:	f800283a 	ret
 40068bc:	2005883a 	mov	r2,r4
 40068c0:	f800283a 	ret
 40068c4:	28c03fcc 	andi	r3,r5,255
 40068c8:	1812923a 	slli	r9,r3,8
 40068cc:	02ffbff4 	movhi	r11,65279
 40068d0:	02a02074 	movhi	r10,32897
 40068d4:	48d2b03a 	or	r9,r9,r3
 40068d8:	4806943a 	slli	r3,r9,16
 40068dc:	5affbfc4 	addi	r11,r11,-257
 40068e0:	52a02004 	addi	r10,r10,-32640
 40068e4:	48d2b03a 	or	r9,r9,r3
 40068e8:	20c00017 	ldw	r3,0(r4)
 40068ec:	48c6f03a 	xor	r3,r9,r3
 40068f0:	1acd883a 	add	r6,r3,r11
 40068f4:	00c6303a 	nor	r3,zero,r3
 40068f8:	30c6703a 	and	r3,r6,r3
 40068fc:	1a86703a 	and	r3,r3,r10
 4006900:	183fe01e 	bne	r3,zero,4006884 <__alt_data_end+0xfc006884>
 4006904:	10bfff04 	addi	r2,r2,-4
 4006908:	21000104 	addi	r4,r4,4
 400690c:	40bff636 	bltu	r8,r2,40068e8 <__alt_data_end+0xfc0068e8>
 4006910:	003fdb06 	br	4006880 <__alt_data_end+0xfc006880>
 4006914:	3005883a 	mov	r2,r6
 4006918:	003fd706 	br	4006878 <__alt_data_end+0xfc006878>

0400691c <memcpy>:
 400691c:	defffd04 	addi	sp,sp,-12
 4006920:	dfc00215 	stw	ra,8(sp)
 4006924:	dc400115 	stw	r17,4(sp)
 4006928:	dc000015 	stw	r16,0(sp)
 400692c:	00c003c4 	movi	r3,15
 4006930:	2005883a 	mov	r2,r4
 4006934:	1980452e 	bgeu	r3,r6,4006a4c <memcpy+0x130>
 4006938:	2906b03a 	or	r3,r5,r4
 400693c:	18c000cc 	andi	r3,r3,3
 4006940:	1800441e 	bne	r3,zero,4006a54 <memcpy+0x138>
 4006944:	347ffc04 	addi	r17,r6,-16
 4006948:	8822d13a 	srli	r17,r17,4
 400694c:	28c00104 	addi	r3,r5,4
 4006950:	23400104 	addi	r13,r4,4
 4006954:	8820913a 	slli	r16,r17,4
 4006958:	2b000204 	addi	r12,r5,8
 400695c:	22c00204 	addi	r11,r4,8
 4006960:	84000504 	addi	r16,r16,20
 4006964:	2a800304 	addi	r10,r5,12
 4006968:	22400304 	addi	r9,r4,12
 400696c:	2c21883a 	add	r16,r5,r16
 4006970:	2811883a 	mov	r8,r5
 4006974:	200f883a 	mov	r7,r4
 4006978:	41000017 	ldw	r4,0(r8)
 400697c:	1fc00017 	ldw	ra,0(r3)
 4006980:	63c00017 	ldw	r15,0(r12)
 4006984:	39000015 	stw	r4,0(r7)
 4006988:	53800017 	ldw	r14,0(r10)
 400698c:	6fc00015 	stw	ra,0(r13)
 4006990:	5bc00015 	stw	r15,0(r11)
 4006994:	4b800015 	stw	r14,0(r9)
 4006998:	18c00404 	addi	r3,r3,16
 400699c:	39c00404 	addi	r7,r7,16
 40069a0:	42000404 	addi	r8,r8,16
 40069a4:	6b400404 	addi	r13,r13,16
 40069a8:	63000404 	addi	r12,r12,16
 40069ac:	5ac00404 	addi	r11,r11,16
 40069b0:	52800404 	addi	r10,r10,16
 40069b4:	4a400404 	addi	r9,r9,16
 40069b8:	1c3fef1e 	bne	r3,r16,4006978 <__alt_data_end+0xfc006978>
 40069bc:	89c00044 	addi	r7,r17,1
 40069c0:	380e913a 	slli	r7,r7,4
 40069c4:	310003cc 	andi	r4,r6,15
 40069c8:	02c000c4 	movi	r11,3
 40069cc:	11c7883a 	add	r3,r2,r7
 40069d0:	29cb883a 	add	r5,r5,r7
 40069d4:	5900212e 	bgeu	r11,r4,4006a5c <memcpy+0x140>
 40069d8:	1813883a 	mov	r9,r3
 40069dc:	2811883a 	mov	r8,r5
 40069e0:	200f883a 	mov	r7,r4
 40069e4:	42800017 	ldw	r10,0(r8)
 40069e8:	4a400104 	addi	r9,r9,4
 40069ec:	39ffff04 	addi	r7,r7,-4
 40069f0:	4abfff15 	stw	r10,-4(r9)
 40069f4:	42000104 	addi	r8,r8,4
 40069f8:	59fffa36 	bltu	r11,r7,40069e4 <__alt_data_end+0xfc0069e4>
 40069fc:	213fff04 	addi	r4,r4,-4
 4006a00:	2008d0ba 	srli	r4,r4,2
 4006a04:	318000cc 	andi	r6,r6,3
 4006a08:	21000044 	addi	r4,r4,1
 4006a0c:	2109883a 	add	r4,r4,r4
 4006a10:	2109883a 	add	r4,r4,r4
 4006a14:	1907883a 	add	r3,r3,r4
 4006a18:	290b883a 	add	r5,r5,r4
 4006a1c:	30000626 	beq	r6,zero,4006a38 <memcpy+0x11c>
 4006a20:	198d883a 	add	r6,r3,r6
 4006a24:	29c00003 	ldbu	r7,0(r5)
 4006a28:	18c00044 	addi	r3,r3,1
 4006a2c:	29400044 	addi	r5,r5,1
 4006a30:	19ffffc5 	stb	r7,-1(r3)
 4006a34:	19bffb1e 	bne	r3,r6,4006a24 <__alt_data_end+0xfc006a24>
 4006a38:	dfc00217 	ldw	ra,8(sp)
 4006a3c:	dc400117 	ldw	r17,4(sp)
 4006a40:	dc000017 	ldw	r16,0(sp)
 4006a44:	dec00304 	addi	sp,sp,12
 4006a48:	f800283a 	ret
 4006a4c:	2007883a 	mov	r3,r4
 4006a50:	003ff206 	br	4006a1c <__alt_data_end+0xfc006a1c>
 4006a54:	2007883a 	mov	r3,r4
 4006a58:	003ff106 	br	4006a20 <__alt_data_end+0xfc006a20>
 4006a5c:	200d883a 	mov	r6,r4
 4006a60:	003fee06 	br	4006a1c <__alt_data_end+0xfc006a1c>

04006a64 <_Balloc>:
 4006a64:	20801317 	ldw	r2,76(r4)
 4006a68:	defffc04 	addi	sp,sp,-16
 4006a6c:	dc400115 	stw	r17,4(sp)
 4006a70:	dc000015 	stw	r16,0(sp)
 4006a74:	dfc00315 	stw	ra,12(sp)
 4006a78:	dc800215 	stw	r18,8(sp)
 4006a7c:	2023883a 	mov	r17,r4
 4006a80:	2821883a 	mov	r16,r5
 4006a84:	10000f26 	beq	r2,zero,4006ac4 <_Balloc+0x60>
 4006a88:	8407883a 	add	r3,r16,r16
 4006a8c:	18c7883a 	add	r3,r3,r3
 4006a90:	10c7883a 	add	r3,r2,r3
 4006a94:	18800017 	ldw	r2,0(r3)
 4006a98:	10001126 	beq	r2,zero,4006ae0 <_Balloc+0x7c>
 4006a9c:	11000017 	ldw	r4,0(r2)
 4006aa0:	19000015 	stw	r4,0(r3)
 4006aa4:	10000415 	stw	zero,16(r2)
 4006aa8:	10000315 	stw	zero,12(r2)
 4006aac:	dfc00317 	ldw	ra,12(sp)
 4006ab0:	dc800217 	ldw	r18,8(sp)
 4006ab4:	dc400117 	ldw	r17,4(sp)
 4006ab8:	dc000017 	ldw	r16,0(sp)
 4006abc:	dec00404 	addi	sp,sp,16
 4006ac0:	f800283a 	ret
 4006ac4:	01800844 	movi	r6,33
 4006ac8:	01400104 	movi	r5,4
 4006acc:	400917c0 	call	400917c <_calloc_r>
 4006ad0:	88801315 	stw	r2,76(r17)
 4006ad4:	103fec1e 	bne	r2,zero,4006a88 <__alt_data_end+0xfc006a88>
 4006ad8:	0005883a 	mov	r2,zero
 4006adc:	003ff306 	br	4006aac <__alt_data_end+0xfc006aac>
 4006ae0:	01400044 	movi	r5,1
 4006ae4:	2c24983a 	sll	r18,r5,r16
 4006ae8:	8809883a 	mov	r4,r17
 4006aec:	91800144 	addi	r6,r18,5
 4006af0:	318d883a 	add	r6,r6,r6
 4006af4:	318d883a 	add	r6,r6,r6
 4006af8:	400917c0 	call	400917c <_calloc_r>
 4006afc:	103ff626 	beq	r2,zero,4006ad8 <__alt_data_end+0xfc006ad8>
 4006b00:	14000115 	stw	r16,4(r2)
 4006b04:	14800215 	stw	r18,8(r2)
 4006b08:	003fe606 	br	4006aa4 <__alt_data_end+0xfc006aa4>

04006b0c <_Bfree>:
 4006b0c:	28000826 	beq	r5,zero,4006b30 <_Bfree+0x24>
 4006b10:	28c00117 	ldw	r3,4(r5)
 4006b14:	20801317 	ldw	r2,76(r4)
 4006b18:	18c7883a 	add	r3,r3,r3
 4006b1c:	18c7883a 	add	r3,r3,r3
 4006b20:	10c5883a 	add	r2,r2,r3
 4006b24:	10c00017 	ldw	r3,0(r2)
 4006b28:	28c00015 	stw	r3,0(r5)
 4006b2c:	11400015 	stw	r5,0(r2)
 4006b30:	f800283a 	ret

04006b34 <__multadd>:
 4006b34:	defffa04 	addi	sp,sp,-24
 4006b38:	dc800315 	stw	r18,12(sp)
 4006b3c:	dc400215 	stw	r17,8(sp)
 4006b40:	dc000115 	stw	r16,4(sp)
 4006b44:	2823883a 	mov	r17,r5
 4006b48:	2c000417 	ldw	r16,16(r5)
 4006b4c:	dfc00515 	stw	ra,20(sp)
 4006b50:	dcc00415 	stw	r19,16(sp)
 4006b54:	2025883a 	mov	r18,r4
 4006b58:	29400504 	addi	r5,r5,20
 4006b5c:	0011883a 	mov	r8,zero
 4006b60:	28c00017 	ldw	r3,0(r5)
 4006b64:	29400104 	addi	r5,r5,4
 4006b68:	42000044 	addi	r8,r8,1
 4006b6c:	18bfffcc 	andi	r2,r3,65535
 4006b70:	1185383a 	mul	r2,r2,r6
 4006b74:	1806d43a 	srli	r3,r3,16
 4006b78:	11cf883a 	add	r7,r2,r7
 4006b7c:	3808d43a 	srli	r4,r7,16
 4006b80:	1987383a 	mul	r3,r3,r6
 4006b84:	38bfffcc 	andi	r2,r7,65535
 4006b88:	1907883a 	add	r3,r3,r4
 4006b8c:	1808943a 	slli	r4,r3,16
 4006b90:	180ed43a 	srli	r7,r3,16
 4006b94:	2085883a 	add	r2,r4,r2
 4006b98:	28bfff15 	stw	r2,-4(r5)
 4006b9c:	443ff016 	blt	r8,r16,4006b60 <__alt_data_end+0xfc006b60>
 4006ba0:	38000926 	beq	r7,zero,4006bc8 <__multadd+0x94>
 4006ba4:	88800217 	ldw	r2,8(r17)
 4006ba8:	80800f0e 	bge	r16,r2,4006be8 <__multadd+0xb4>
 4006bac:	80800144 	addi	r2,r16,5
 4006bb0:	1085883a 	add	r2,r2,r2
 4006bb4:	1085883a 	add	r2,r2,r2
 4006bb8:	8885883a 	add	r2,r17,r2
 4006bbc:	11c00015 	stw	r7,0(r2)
 4006bc0:	84000044 	addi	r16,r16,1
 4006bc4:	8c000415 	stw	r16,16(r17)
 4006bc8:	8805883a 	mov	r2,r17
 4006bcc:	dfc00517 	ldw	ra,20(sp)
 4006bd0:	dcc00417 	ldw	r19,16(sp)
 4006bd4:	dc800317 	ldw	r18,12(sp)
 4006bd8:	dc400217 	ldw	r17,8(sp)
 4006bdc:	dc000117 	ldw	r16,4(sp)
 4006be0:	dec00604 	addi	sp,sp,24
 4006be4:	f800283a 	ret
 4006be8:	89400117 	ldw	r5,4(r17)
 4006bec:	9009883a 	mov	r4,r18
 4006bf0:	d9c00015 	stw	r7,0(sp)
 4006bf4:	29400044 	addi	r5,r5,1
 4006bf8:	4006a640 	call	4006a64 <_Balloc>
 4006bfc:	89800417 	ldw	r6,16(r17)
 4006c00:	89400304 	addi	r5,r17,12
 4006c04:	11000304 	addi	r4,r2,12
 4006c08:	31800084 	addi	r6,r6,2
 4006c0c:	318d883a 	add	r6,r6,r6
 4006c10:	318d883a 	add	r6,r6,r6
 4006c14:	1027883a 	mov	r19,r2
 4006c18:	400691c0 	call	400691c <memcpy>
 4006c1c:	d9c00017 	ldw	r7,0(sp)
 4006c20:	88000a26 	beq	r17,zero,4006c4c <__multadd+0x118>
 4006c24:	88c00117 	ldw	r3,4(r17)
 4006c28:	90801317 	ldw	r2,76(r18)
 4006c2c:	18c7883a 	add	r3,r3,r3
 4006c30:	18c7883a 	add	r3,r3,r3
 4006c34:	10c5883a 	add	r2,r2,r3
 4006c38:	10c00017 	ldw	r3,0(r2)
 4006c3c:	88c00015 	stw	r3,0(r17)
 4006c40:	14400015 	stw	r17,0(r2)
 4006c44:	9823883a 	mov	r17,r19
 4006c48:	003fd806 	br	4006bac <__alt_data_end+0xfc006bac>
 4006c4c:	9823883a 	mov	r17,r19
 4006c50:	003fd606 	br	4006bac <__alt_data_end+0xfc006bac>

04006c54 <__s2b>:
 4006c54:	defff904 	addi	sp,sp,-28
 4006c58:	dc400115 	stw	r17,4(sp)
 4006c5c:	dc000015 	stw	r16,0(sp)
 4006c60:	2023883a 	mov	r17,r4
 4006c64:	2821883a 	mov	r16,r5
 4006c68:	39000204 	addi	r4,r7,8
 4006c6c:	01400244 	movi	r5,9
 4006c70:	dcc00315 	stw	r19,12(sp)
 4006c74:	dc800215 	stw	r18,8(sp)
 4006c78:	dfc00615 	stw	ra,24(sp)
 4006c7c:	dd400515 	stw	r21,20(sp)
 4006c80:	dd000415 	stw	r20,16(sp)
 4006c84:	3825883a 	mov	r18,r7
 4006c88:	3027883a 	mov	r19,r6
 4006c8c:	400ae640 	call	400ae64 <__divsi3>
 4006c90:	00c00044 	movi	r3,1
 4006c94:	000b883a 	mov	r5,zero
 4006c98:	1880030e 	bge	r3,r2,4006ca8 <__s2b+0x54>
 4006c9c:	18c7883a 	add	r3,r3,r3
 4006ca0:	29400044 	addi	r5,r5,1
 4006ca4:	18bffd16 	blt	r3,r2,4006c9c <__alt_data_end+0xfc006c9c>
 4006ca8:	8809883a 	mov	r4,r17
 4006cac:	4006a640 	call	4006a64 <_Balloc>
 4006cb0:	d8c00717 	ldw	r3,28(sp)
 4006cb4:	10c00515 	stw	r3,20(r2)
 4006cb8:	00c00044 	movi	r3,1
 4006cbc:	10c00415 	stw	r3,16(r2)
 4006cc0:	00c00244 	movi	r3,9
 4006cc4:	1cc0210e 	bge	r3,r19,4006d4c <__s2b+0xf8>
 4006cc8:	80eb883a 	add	r21,r16,r3
 4006ccc:	a829883a 	mov	r20,r21
 4006cd0:	84e1883a 	add	r16,r16,r19
 4006cd4:	a1c00007 	ldb	r7,0(r20)
 4006cd8:	01800284 	movi	r6,10
 4006cdc:	a5000044 	addi	r20,r20,1
 4006ce0:	100b883a 	mov	r5,r2
 4006ce4:	39fff404 	addi	r7,r7,-48
 4006ce8:	8809883a 	mov	r4,r17
 4006cec:	4006b340 	call	4006b34 <__multadd>
 4006cf0:	a43ff81e 	bne	r20,r16,4006cd4 <__alt_data_end+0xfc006cd4>
 4006cf4:	ace1883a 	add	r16,r21,r19
 4006cf8:	843ffe04 	addi	r16,r16,-8
 4006cfc:	9c800a0e 	bge	r19,r18,4006d28 <__s2b+0xd4>
 4006d00:	94e5c83a 	sub	r18,r18,r19
 4006d04:	84a5883a 	add	r18,r16,r18
 4006d08:	81c00007 	ldb	r7,0(r16)
 4006d0c:	01800284 	movi	r6,10
 4006d10:	84000044 	addi	r16,r16,1
 4006d14:	100b883a 	mov	r5,r2
 4006d18:	39fff404 	addi	r7,r7,-48
 4006d1c:	8809883a 	mov	r4,r17
 4006d20:	4006b340 	call	4006b34 <__multadd>
 4006d24:	84bff81e 	bne	r16,r18,4006d08 <__alt_data_end+0xfc006d08>
 4006d28:	dfc00617 	ldw	ra,24(sp)
 4006d2c:	dd400517 	ldw	r21,20(sp)
 4006d30:	dd000417 	ldw	r20,16(sp)
 4006d34:	dcc00317 	ldw	r19,12(sp)
 4006d38:	dc800217 	ldw	r18,8(sp)
 4006d3c:	dc400117 	ldw	r17,4(sp)
 4006d40:	dc000017 	ldw	r16,0(sp)
 4006d44:	dec00704 	addi	sp,sp,28
 4006d48:	f800283a 	ret
 4006d4c:	84000284 	addi	r16,r16,10
 4006d50:	1827883a 	mov	r19,r3
 4006d54:	003fe906 	br	4006cfc <__alt_data_end+0xfc006cfc>

04006d58 <__hi0bits>:
 4006d58:	20bfffec 	andhi	r2,r4,65535
 4006d5c:	1000141e 	bne	r2,zero,4006db0 <__hi0bits+0x58>
 4006d60:	2008943a 	slli	r4,r4,16
 4006d64:	00800404 	movi	r2,16
 4006d68:	20ffc02c 	andhi	r3,r4,65280
 4006d6c:	1800021e 	bne	r3,zero,4006d78 <__hi0bits+0x20>
 4006d70:	2008923a 	slli	r4,r4,8
 4006d74:	10800204 	addi	r2,r2,8
 4006d78:	20fc002c 	andhi	r3,r4,61440
 4006d7c:	1800021e 	bne	r3,zero,4006d88 <__hi0bits+0x30>
 4006d80:	2008913a 	slli	r4,r4,4
 4006d84:	10800104 	addi	r2,r2,4
 4006d88:	20f0002c 	andhi	r3,r4,49152
 4006d8c:	1800031e 	bne	r3,zero,4006d9c <__hi0bits+0x44>
 4006d90:	2109883a 	add	r4,r4,r4
 4006d94:	10800084 	addi	r2,r2,2
 4006d98:	2109883a 	add	r4,r4,r4
 4006d9c:	20000316 	blt	r4,zero,4006dac <__hi0bits+0x54>
 4006da0:	2110002c 	andhi	r4,r4,16384
 4006da4:	2000041e 	bne	r4,zero,4006db8 <__hi0bits+0x60>
 4006da8:	00800804 	movi	r2,32
 4006dac:	f800283a 	ret
 4006db0:	0005883a 	mov	r2,zero
 4006db4:	003fec06 	br	4006d68 <__alt_data_end+0xfc006d68>
 4006db8:	10800044 	addi	r2,r2,1
 4006dbc:	f800283a 	ret

04006dc0 <__lo0bits>:
 4006dc0:	20c00017 	ldw	r3,0(r4)
 4006dc4:	188001cc 	andi	r2,r3,7
 4006dc8:	10000826 	beq	r2,zero,4006dec <__lo0bits+0x2c>
 4006dcc:	1880004c 	andi	r2,r3,1
 4006dd0:	1000211e 	bne	r2,zero,4006e58 <__lo0bits+0x98>
 4006dd4:	1880008c 	andi	r2,r3,2
 4006dd8:	1000211e 	bne	r2,zero,4006e60 <__lo0bits+0xa0>
 4006ddc:	1806d0ba 	srli	r3,r3,2
 4006de0:	00800084 	movi	r2,2
 4006de4:	20c00015 	stw	r3,0(r4)
 4006de8:	f800283a 	ret
 4006dec:	18bfffcc 	andi	r2,r3,65535
 4006df0:	10001326 	beq	r2,zero,4006e40 <__lo0bits+0x80>
 4006df4:	0005883a 	mov	r2,zero
 4006df8:	19403fcc 	andi	r5,r3,255
 4006dfc:	2800021e 	bne	r5,zero,4006e08 <__lo0bits+0x48>
 4006e00:	1806d23a 	srli	r3,r3,8
 4006e04:	10800204 	addi	r2,r2,8
 4006e08:	194003cc 	andi	r5,r3,15
 4006e0c:	2800021e 	bne	r5,zero,4006e18 <__lo0bits+0x58>
 4006e10:	1806d13a 	srli	r3,r3,4
 4006e14:	10800104 	addi	r2,r2,4
 4006e18:	194000cc 	andi	r5,r3,3
 4006e1c:	2800021e 	bne	r5,zero,4006e28 <__lo0bits+0x68>
 4006e20:	1806d0ba 	srli	r3,r3,2
 4006e24:	10800084 	addi	r2,r2,2
 4006e28:	1940004c 	andi	r5,r3,1
 4006e2c:	2800081e 	bne	r5,zero,4006e50 <__lo0bits+0x90>
 4006e30:	1806d07a 	srli	r3,r3,1
 4006e34:	1800051e 	bne	r3,zero,4006e4c <__lo0bits+0x8c>
 4006e38:	00800804 	movi	r2,32
 4006e3c:	f800283a 	ret
 4006e40:	1806d43a 	srli	r3,r3,16
 4006e44:	00800404 	movi	r2,16
 4006e48:	003feb06 	br	4006df8 <__alt_data_end+0xfc006df8>
 4006e4c:	10800044 	addi	r2,r2,1
 4006e50:	20c00015 	stw	r3,0(r4)
 4006e54:	f800283a 	ret
 4006e58:	0005883a 	mov	r2,zero
 4006e5c:	f800283a 	ret
 4006e60:	1806d07a 	srli	r3,r3,1
 4006e64:	00800044 	movi	r2,1
 4006e68:	20c00015 	stw	r3,0(r4)
 4006e6c:	f800283a 	ret

04006e70 <__i2b>:
 4006e70:	defffd04 	addi	sp,sp,-12
 4006e74:	dc000015 	stw	r16,0(sp)
 4006e78:	04000044 	movi	r16,1
 4006e7c:	dc400115 	stw	r17,4(sp)
 4006e80:	2823883a 	mov	r17,r5
 4006e84:	800b883a 	mov	r5,r16
 4006e88:	dfc00215 	stw	ra,8(sp)
 4006e8c:	4006a640 	call	4006a64 <_Balloc>
 4006e90:	14400515 	stw	r17,20(r2)
 4006e94:	14000415 	stw	r16,16(r2)
 4006e98:	dfc00217 	ldw	ra,8(sp)
 4006e9c:	dc400117 	ldw	r17,4(sp)
 4006ea0:	dc000017 	ldw	r16,0(sp)
 4006ea4:	dec00304 	addi	sp,sp,12
 4006ea8:	f800283a 	ret

04006eac <__multiply>:
 4006eac:	defffa04 	addi	sp,sp,-24
 4006eb0:	dcc00315 	stw	r19,12(sp)
 4006eb4:	dc800215 	stw	r18,8(sp)
 4006eb8:	34c00417 	ldw	r19,16(r6)
 4006ebc:	2c800417 	ldw	r18,16(r5)
 4006ec0:	dd000415 	stw	r20,16(sp)
 4006ec4:	dc400115 	stw	r17,4(sp)
 4006ec8:	dfc00515 	stw	ra,20(sp)
 4006ecc:	dc000015 	stw	r16,0(sp)
 4006ed0:	2829883a 	mov	r20,r5
 4006ed4:	3023883a 	mov	r17,r6
 4006ed8:	94c0050e 	bge	r18,r19,4006ef0 <__multiply+0x44>
 4006edc:	9007883a 	mov	r3,r18
 4006ee0:	3029883a 	mov	r20,r6
 4006ee4:	9825883a 	mov	r18,r19
 4006ee8:	2823883a 	mov	r17,r5
 4006eec:	1827883a 	mov	r19,r3
 4006ef0:	a0800217 	ldw	r2,8(r20)
 4006ef4:	94e1883a 	add	r16,r18,r19
 4006ef8:	a1400117 	ldw	r5,4(r20)
 4006efc:	1400010e 	bge	r2,r16,4006f04 <__multiply+0x58>
 4006f00:	29400044 	addi	r5,r5,1
 4006f04:	4006a640 	call	4006a64 <_Balloc>
 4006f08:	8415883a 	add	r10,r16,r16
 4006f0c:	12c00504 	addi	r11,r2,20
 4006f10:	5295883a 	add	r10,r10,r10
 4006f14:	5a95883a 	add	r10,r11,r10
 4006f18:	5807883a 	mov	r3,r11
 4006f1c:	5a80032e 	bgeu	r11,r10,4006f2c <__multiply+0x80>
 4006f20:	18000015 	stw	zero,0(r3)
 4006f24:	18c00104 	addi	r3,r3,4
 4006f28:	1abffd36 	bltu	r3,r10,4006f20 <__alt_data_end+0xfc006f20>
 4006f2c:	9ce7883a 	add	r19,r19,r19
 4006f30:	94a5883a 	add	r18,r18,r18
 4006f34:	89800504 	addi	r6,r17,20
 4006f38:	9ce7883a 	add	r19,r19,r19
 4006f3c:	a3400504 	addi	r13,r20,20
 4006f40:	94a5883a 	add	r18,r18,r18
 4006f44:	34d9883a 	add	r12,r6,r19
 4006f48:	6c93883a 	add	r9,r13,r18
 4006f4c:	3300422e 	bgeu	r6,r12,4007058 <__multiply+0x1ac>
 4006f50:	37c00017 	ldw	ra,0(r6)
 4006f54:	fbffffcc 	andi	r15,ra,65535
 4006f58:	78001b26 	beq	r15,zero,4006fc8 <__multiply+0x11c>
 4006f5c:	5811883a 	mov	r8,r11
 4006f60:	681d883a 	mov	r14,r13
 4006f64:	000f883a 	mov	r7,zero
 4006f68:	71000017 	ldw	r4,0(r14)
 4006f6c:	40c00017 	ldw	r3,0(r8)
 4006f70:	73800104 	addi	r14,r14,4
 4006f74:	217fffcc 	andi	r5,r4,65535
 4006f78:	2bcb383a 	mul	r5,r5,r15
 4006f7c:	2008d43a 	srli	r4,r4,16
 4006f80:	1c7fffcc 	andi	r17,r3,65535
 4006f84:	2c4b883a 	add	r5,r5,r17
 4006f88:	29cb883a 	add	r5,r5,r7
 4006f8c:	23c9383a 	mul	r4,r4,r15
 4006f90:	1806d43a 	srli	r3,r3,16
 4006f94:	280ed43a 	srli	r7,r5,16
 4006f98:	297fffcc 	andi	r5,r5,65535
 4006f9c:	20c7883a 	add	r3,r4,r3
 4006fa0:	19c7883a 	add	r3,r3,r7
 4006fa4:	1808943a 	slli	r4,r3,16
 4006fa8:	4023883a 	mov	r17,r8
 4006fac:	180ed43a 	srli	r7,r3,16
 4006fb0:	214ab03a 	or	r5,r4,r5
 4006fb4:	41400015 	stw	r5,0(r8)
 4006fb8:	42000104 	addi	r8,r8,4
 4006fbc:	727fea36 	bltu	r14,r9,4006f68 <__alt_data_end+0xfc006f68>
 4006fc0:	89c00115 	stw	r7,4(r17)
 4006fc4:	37c00017 	ldw	ra,0(r6)
 4006fc8:	f83ed43a 	srli	ra,ra,16
 4006fcc:	f8001f26 	beq	ra,zero,400704c <__multiply+0x1a0>
 4006fd0:	58c00017 	ldw	r3,0(r11)
 4006fd4:	681d883a 	mov	r14,r13
 4006fd8:	581f883a 	mov	r15,r11
 4006fdc:	1811883a 	mov	r8,r3
 4006fe0:	5825883a 	mov	r18,r11
 4006fe4:	000f883a 	mov	r7,zero
 4006fe8:	00000106 	br	4006ff0 <__multiply+0x144>
 4006fec:	8825883a 	mov	r18,r17
 4006ff0:	7140000b 	ldhu	r5,0(r14)
 4006ff4:	4010d43a 	srli	r8,r8,16
 4006ff8:	193fffcc 	andi	r4,r3,65535
 4006ffc:	2fcb383a 	mul	r5,r5,ra
 4007000:	7bc00104 	addi	r15,r15,4
 4007004:	73800104 	addi	r14,r14,4
 4007008:	2a0b883a 	add	r5,r5,r8
 400700c:	29cb883a 	add	r5,r5,r7
 4007010:	2806943a 	slli	r3,r5,16
 4007014:	94400104 	addi	r17,r18,4
 4007018:	280ad43a 	srli	r5,r5,16
 400701c:	1908b03a 	or	r4,r3,r4
 4007020:	793fff15 	stw	r4,-4(r15)
 4007024:	70ffff17 	ldw	r3,-4(r14)
 4007028:	8a000017 	ldw	r8,0(r17)
 400702c:	1806d43a 	srli	r3,r3,16
 4007030:	413fffcc 	andi	r4,r8,65535
 4007034:	1fc7383a 	mul	r3,r3,ra
 4007038:	1907883a 	add	r3,r3,r4
 400703c:	1947883a 	add	r3,r3,r5
 4007040:	180ed43a 	srli	r7,r3,16
 4007044:	727fe936 	bltu	r14,r9,4006fec <__alt_data_end+0xfc006fec>
 4007048:	90c00115 	stw	r3,4(r18)
 400704c:	31800104 	addi	r6,r6,4
 4007050:	5ac00104 	addi	r11,r11,4
 4007054:	333fbe36 	bltu	r6,r12,4006f50 <__alt_data_end+0xfc006f50>
 4007058:	0400090e 	bge	zero,r16,4007080 <__multiply+0x1d4>
 400705c:	50ffff17 	ldw	r3,-4(r10)
 4007060:	52bfff04 	addi	r10,r10,-4
 4007064:	18000326 	beq	r3,zero,4007074 <__multiply+0x1c8>
 4007068:	00000506 	br	4007080 <__multiply+0x1d4>
 400706c:	50c00017 	ldw	r3,0(r10)
 4007070:	1800031e 	bne	r3,zero,4007080 <__multiply+0x1d4>
 4007074:	843fffc4 	addi	r16,r16,-1
 4007078:	52bfff04 	addi	r10,r10,-4
 400707c:	803ffb1e 	bne	r16,zero,400706c <__alt_data_end+0xfc00706c>
 4007080:	14000415 	stw	r16,16(r2)
 4007084:	dfc00517 	ldw	ra,20(sp)
 4007088:	dd000417 	ldw	r20,16(sp)
 400708c:	dcc00317 	ldw	r19,12(sp)
 4007090:	dc800217 	ldw	r18,8(sp)
 4007094:	dc400117 	ldw	r17,4(sp)
 4007098:	dc000017 	ldw	r16,0(sp)
 400709c:	dec00604 	addi	sp,sp,24
 40070a0:	f800283a 	ret

040070a4 <__pow5mult>:
 40070a4:	defffa04 	addi	sp,sp,-24
 40070a8:	dcc00315 	stw	r19,12(sp)
 40070ac:	dc000015 	stw	r16,0(sp)
 40070b0:	dfc00515 	stw	ra,20(sp)
 40070b4:	dd000415 	stw	r20,16(sp)
 40070b8:	dc800215 	stw	r18,8(sp)
 40070bc:	dc400115 	stw	r17,4(sp)
 40070c0:	308000cc 	andi	r2,r6,3
 40070c4:	3021883a 	mov	r16,r6
 40070c8:	2027883a 	mov	r19,r4
 40070cc:	10002f1e 	bne	r2,zero,400718c <__pow5mult+0xe8>
 40070d0:	2825883a 	mov	r18,r5
 40070d4:	8021d0ba 	srai	r16,r16,2
 40070d8:	80001a26 	beq	r16,zero,4007144 <__pow5mult+0xa0>
 40070dc:	9c401217 	ldw	r17,72(r19)
 40070e0:	8800061e 	bne	r17,zero,40070fc <__pow5mult+0x58>
 40070e4:	00003406 	br	40071b8 <__pow5mult+0x114>
 40070e8:	8021d07a 	srai	r16,r16,1
 40070ec:	80001526 	beq	r16,zero,4007144 <__pow5mult+0xa0>
 40070f0:	88800017 	ldw	r2,0(r17)
 40070f4:	10001c26 	beq	r2,zero,4007168 <__pow5mult+0xc4>
 40070f8:	1023883a 	mov	r17,r2
 40070fc:	8080004c 	andi	r2,r16,1
 4007100:	103ff926 	beq	r2,zero,40070e8 <__alt_data_end+0xfc0070e8>
 4007104:	880d883a 	mov	r6,r17
 4007108:	900b883a 	mov	r5,r18
 400710c:	9809883a 	mov	r4,r19
 4007110:	4006eac0 	call	4006eac <__multiply>
 4007114:	90001b26 	beq	r18,zero,4007184 <__pow5mult+0xe0>
 4007118:	91000117 	ldw	r4,4(r18)
 400711c:	98c01317 	ldw	r3,76(r19)
 4007120:	8021d07a 	srai	r16,r16,1
 4007124:	2109883a 	add	r4,r4,r4
 4007128:	2109883a 	add	r4,r4,r4
 400712c:	1907883a 	add	r3,r3,r4
 4007130:	19000017 	ldw	r4,0(r3)
 4007134:	91000015 	stw	r4,0(r18)
 4007138:	1c800015 	stw	r18,0(r3)
 400713c:	1025883a 	mov	r18,r2
 4007140:	803feb1e 	bne	r16,zero,40070f0 <__alt_data_end+0xfc0070f0>
 4007144:	9005883a 	mov	r2,r18
 4007148:	dfc00517 	ldw	ra,20(sp)
 400714c:	dd000417 	ldw	r20,16(sp)
 4007150:	dcc00317 	ldw	r19,12(sp)
 4007154:	dc800217 	ldw	r18,8(sp)
 4007158:	dc400117 	ldw	r17,4(sp)
 400715c:	dc000017 	ldw	r16,0(sp)
 4007160:	dec00604 	addi	sp,sp,24
 4007164:	f800283a 	ret
 4007168:	880d883a 	mov	r6,r17
 400716c:	880b883a 	mov	r5,r17
 4007170:	9809883a 	mov	r4,r19
 4007174:	4006eac0 	call	4006eac <__multiply>
 4007178:	88800015 	stw	r2,0(r17)
 400717c:	10000015 	stw	zero,0(r2)
 4007180:	003fdd06 	br	40070f8 <__alt_data_end+0xfc0070f8>
 4007184:	1025883a 	mov	r18,r2
 4007188:	003fd706 	br	40070e8 <__alt_data_end+0xfc0070e8>
 400718c:	10bfffc4 	addi	r2,r2,-1
 4007190:	1085883a 	add	r2,r2,r2
 4007194:	00c10074 	movhi	r3,1025
 4007198:	18c16c04 	addi	r3,r3,1456
 400719c:	1085883a 	add	r2,r2,r2
 40071a0:	1885883a 	add	r2,r3,r2
 40071a4:	11800017 	ldw	r6,0(r2)
 40071a8:	000f883a 	mov	r7,zero
 40071ac:	4006b340 	call	4006b34 <__multadd>
 40071b0:	1025883a 	mov	r18,r2
 40071b4:	003fc706 	br	40070d4 <__alt_data_end+0xfc0070d4>
 40071b8:	05000044 	movi	r20,1
 40071bc:	a00b883a 	mov	r5,r20
 40071c0:	9809883a 	mov	r4,r19
 40071c4:	4006a640 	call	4006a64 <_Balloc>
 40071c8:	1023883a 	mov	r17,r2
 40071cc:	00809c44 	movi	r2,625
 40071d0:	88800515 	stw	r2,20(r17)
 40071d4:	8d000415 	stw	r20,16(r17)
 40071d8:	9c401215 	stw	r17,72(r19)
 40071dc:	88000015 	stw	zero,0(r17)
 40071e0:	003fc606 	br	40070fc <__alt_data_end+0xfc0070fc>

040071e4 <__lshift>:
 40071e4:	defff904 	addi	sp,sp,-28
 40071e8:	dd400515 	stw	r21,20(sp)
 40071ec:	dcc00315 	stw	r19,12(sp)
 40071f0:	302bd17a 	srai	r21,r6,5
 40071f4:	2cc00417 	ldw	r19,16(r5)
 40071f8:	28800217 	ldw	r2,8(r5)
 40071fc:	dd000415 	stw	r20,16(sp)
 4007200:	ace7883a 	add	r19,r21,r19
 4007204:	dc800215 	stw	r18,8(sp)
 4007208:	dc400115 	stw	r17,4(sp)
 400720c:	dc000015 	stw	r16,0(sp)
 4007210:	dfc00615 	stw	ra,24(sp)
 4007214:	9c000044 	addi	r16,r19,1
 4007218:	2823883a 	mov	r17,r5
 400721c:	3029883a 	mov	r20,r6
 4007220:	2025883a 	mov	r18,r4
 4007224:	29400117 	ldw	r5,4(r5)
 4007228:	1400030e 	bge	r2,r16,4007238 <__lshift+0x54>
 400722c:	1085883a 	add	r2,r2,r2
 4007230:	29400044 	addi	r5,r5,1
 4007234:	143ffd16 	blt	r2,r16,400722c <__alt_data_end+0xfc00722c>
 4007238:	9009883a 	mov	r4,r18
 400723c:	4006a640 	call	4006a64 <_Balloc>
 4007240:	10c00504 	addi	r3,r2,20
 4007244:	0540070e 	bge	zero,r21,4007264 <__lshift+0x80>
 4007248:	ad6b883a 	add	r21,r21,r21
 400724c:	ad6b883a 	add	r21,r21,r21
 4007250:	1809883a 	mov	r4,r3
 4007254:	1d47883a 	add	r3,r3,r21
 4007258:	20000015 	stw	zero,0(r4)
 400725c:	21000104 	addi	r4,r4,4
 4007260:	193ffd1e 	bne	r3,r4,4007258 <__alt_data_end+0xfc007258>
 4007264:	8a000417 	ldw	r8,16(r17)
 4007268:	89000504 	addi	r4,r17,20
 400726c:	a18007cc 	andi	r6,r20,31
 4007270:	4211883a 	add	r8,r8,r8
 4007274:	4211883a 	add	r8,r8,r8
 4007278:	2211883a 	add	r8,r4,r8
 400727c:	30002326 	beq	r6,zero,400730c <__lshift+0x128>
 4007280:	02400804 	movi	r9,32
 4007284:	4993c83a 	sub	r9,r9,r6
 4007288:	000b883a 	mov	r5,zero
 400728c:	21c00017 	ldw	r7,0(r4)
 4007290:	1815883a 	mov	r10,r3
 4007294:	18c00104 	addi	r3,r3,4
 4007298:	398e983a 	sll	r7,r7,r6
 400729c:	21000104 	addi	r4,r4,4
 40072a0:	394ab03a 	or	r5,r7,r5
 40072a4:	197fff15 	stw	r5,-4(r3)
 40072a8:	217fff17 	ldw	r5,-4(r4)
 40072ac:	2a4ad83a 	srl	r5,r5,r9
 40072b0:	223ff636 	bltu	r4,r8,400728c <__alt_data_end+0xfc00728c>
 40072b4:	51400115 	stw	r5,4(r10)
 40072b8:	28001a1e 	bne	r5,zero,4007324 <__lshift+0x140>
 40072bc:	843fffc4 	addi	r16,r16,-1
 40072c0:	14000415 	stw	r16,16(r2)
 40072c4:	88000826 	beq	r17,zero,40072e8 <__lshift+0x104>
 40072c8:	89000117 	ldw	r4,4(r17)
 40072cc:	90c01317 	ldw	r3,76(r18)
 40072d0:	2109883a 	add	r4,r4,r4
 40072d4:	2109883a 	add	r4,r4,r4
 40072d8:	1907883a 	add	r3,r3,r4
 40072dc:	19000017 	ldw	r4,0(r3)
 40072e0:	89000015 	stw	r4,0(r17)
 40072e4:	1c400015 	stw	r17,0(r3)
 40072e8:	dfc00617 	ldw	ra,24(sp)
 40072ec:	dd400517 	ldw	r21,20(sp)
 40072f0:	dd000417 	ldw	r20,16(sp)
 40072f4:	dcc00317 	ldw	r19,12(sp)
 40072f8:	dc800217 	ldw	r18,8(sp)
 40072fc:	dc400117 	ldw	r17,4(sp)
 4007300:	dc000017 	ldw	r16,0(sp)
 4007304:	dec00704 	addi	sp,sp,28
 4007308:	f800283a 	ret
 400730c:	21400017 	ldw	r5,0(r4)
 4007310:	18c00104 	addi	r3,r3,4
 4007314:	21000104 	addi	r4,r4,4
 4007318:	197fff15 	stw	r5,-4(r3)
 400731c:	223ffb36 	bltu	r4,r8,400730c <__alt_data_end+0xfc00730c>
 4007320:	003fe606 	br	40072bc <__alt_data_end+0xfc0072bc>
 4007324:	9c000084 	addi	r16,r19,2
 4007328:	003fe406 	br	40072bc <__alt_data_end+0xfc0072bc>

0400732c <__mcmp>:
 400732c:	20800417 	ldw	r2,16(r4)
 4007330:	28c00417 	ldw	r3,16(r5)
 4007334:	10c5c83a 	sub	r2,r2,r3
 4007338:	1000111e 	bne	r2,zero,4007380 <__mcmp+0x54>
 400733c:	18c7883a 	add	r3,r3,r3
 4007340:	18c7883a 	add	r3,r3,r3
 4007344:	21000504 	addi	r4,r4,20
 4007348:	29400504 	addi	r5,r5,20
 400734c:	20c5883a 	add	r2,r4,r3
 4007350:	28cb883a 	add	r5,r5,r3
 4007354:	00000106 	br	400735c <__mcmp+0x30>
 4007358:	20800a2e 	bgeu	r4,r2,4007384 <__mcmp+0x58>
 400735c:	10bfff04 	addi	r2,r2,-4
 4007360:	297fff04 	addi	r5,r5,-4
 4007364:	11800017 	ldw	r6,0(r2)
 4007368:	28c00017 	ldw	r3,0(r5)
 400736c:	30fffa26 	beq	r6,r3,4007358 <__alt_data_end+0xfc007358>
 4007370:	30c00236 	bltu	r6,r3,400737c <__mcmp+0x50>
 4007374:	00800044 	movi	r2,1
 4007378:	f800283a 	ret
 400737c:	00bfffc4 	movi	r2,-1
 4007380:	f800283a 	ret
 4007384:	0005883a 	mov	r2,zero
 4007388:	f800283a 	ret

0400738c <__mdiff>:
 400738c:	28c00417 	ldw	r3,16(r5)
 4007390:	30800417 	ldw	r2,16(r6)
 4007394:	defffa04 	addi	sp,sp,-24
 4007398:	dcc00315 	stw	r19,12(sp)
 400739c:	dc800215 	stw	r18,8(sp)
 40073a0:	dfc00515 	stw	ra,20(sp)
 40073a4:	dd000415 	stw	r20,16(sp)
 40073a8:	dc400115 	stw	r17,4(sp)
 40073ac:	dc000015 	stw	r16,0(sp)
 40073b0:	1887c83a 	sub	r3,r3,r2
 40073b4:	2825883a 	mov	r18,r5
 40073b8:	3027883a 	mov	r19,r6
 40073bc:	1800141e 	bne	r3,zero,4007410 <__mdiff+0x84>
 40073c0:	1085883a 	add	r2,r2,r2
 40073c4:	1085883a 	add	r2,r2,r2
 40073c8:	2a000504 	addi	r8,r5,20
 40073cc:	34000504 	addi	r16,r6,20
 40073d0:	4087883a 	add	r3,r8,r2
 40073d4:	8085883a 	add	r2,r16,r2
 40073d8:	00000106 	br	40073e0 <__mdiff+0x54>
 40073dc:	40c0592e 	bgeu	r8,r3,4007544 <__mdiff+0x1b8>
 40073e0:	18ffff04 	addi	r3,r3,-4
 40073e4:	10bfff04 	addi	r2,r2,-4
 40073e8:	19c00017 	ldw	r7,0(r3)
 40073ec:	11400017 	ldw	r5,0(r2)
 40073f0:	397ffa26 	beq	r7,r5,40073dc <__alt_data_end+0xfc0073dc>
 40073f4:	3940592e 	bgeu	r7,r5,400755c <__mdiff+0x1d0>
 40073f8:	9005883a 	mov	r2,r18
 40073fc:	4023883a 	mov	r17,r8
 4007400:	9825883a 	mov	r18,r19
 4007404:	05000044 	movi	r20,1
 4007408:	1027883a 	mov	r19,r2
 400740c:	00000406 	br	4007420 <__mdiff+0x94>
 4007410:	18005616 	blt	r3,zero,400756c <__mdiff+0x1e0>
 4007414:	34400504 	addi	r17,r6,20
 4007418:	2c000504 	addi	r16,r5,20
 400741c:	0029883a 	mov	r20,zero
 4007420:	91400117 	ldw	r5,4(r18)
 4007424:	4006a640 	call	4006a64 <_Balloc>
 4007428:	92400417 	ldw	r9,16(r18)
 400742c:	9b000417 	ldw	r12,16(r19)
 4007430:	12c00504 	addi	r11,r2,20
 4007434:	4a51883a 	add	r8,r9,r9
 4007438:	6319883a 	add	r12,r12,r12
 400743c:	4211883a 	add	r8,r8,r8
 4007440:	6319883a 	add	r12,r12,r12
 4007444:	15000315 	stw	r20,12(r2)
 4007448:	8211883a 	add	r8,r16,r8
 400744c:	8b19883a 	add	r12,r17,r12
 4007450:	0007883a 	mov	r3,zero
 4007454:	81400017 	ldw	r5,0(r16)
 4007458:	89c00017 	ldw	r7,0(r17)
 400745c:	59800104 	addi	r6,r11,4
 4007460:	293fffcc 	andi	r4,r5,65535
 4007464:	20c7883a 	add	r3,r4,r3
 4007468:	393fffcc 	andi	r4,r7,65535
 400746c:	1909c83a 	sub	r4,r3,r4
 4007470:	280ad43a 	srli	r5,r5,16
 4007474:	380ed43a 	srli	r7,r7,16
 4007478:	2007d43a 	srai	r3,r4,16
 400747c:	213fffcc 	andi	r4,r4,65535
 4007480:	29cbc83a 	sub	r5,r5,r7
 4007484:	28c7883a 	add	r3,r5,r3
 4007488:	180a943a 	slli	r5,r3,16
 400748c:	8c400104 	addi	r17,r17,4
 4007490:	84000104 	addi	r16,r16,4
 4007494:	2908b03a 	or	r4,r5,r4
 4007498:	59000015 	stw	r4,0(r11)
 400749c:	1807d43a 	srai	r3,r3,16
 40074a0:	3015883a 	mov	r10,r6
 40074a4:	3017883a 	mov	r11,r6
 40074a8:	8b3fea36 	bltu	r17,r12,4007454 <__alt_data_end+0xfc007454>
 40074ac:	8200162e 	bgeu	r16,r8,4007508 <__mdiff+0x17c>
 40074b0:	8017883a 	mov	r11,r16
 40074b4:	59400017 	ldw	r5,0(r11)
 40074b8:	31800104 	addi	r6,r6,4
 40074bc:	5ac00104 	addi	r11,r11,4
 40074c0:	293fffcc 	andi	r4,r5,65535
 40074c4:	20c7883a 	add	r3,r4,r3
 40074c8:	280ed43a 	srli	r7,r5,16
 40074cc:	180bd43a 	srai	r5,r3,16
 40074d0:	193fffcc 	andi	r4,r3,65535
 40074d4:	3947883a 	add	r3,r7,r5
 40074d8:	180a943a 	slli	r5,r3,16
 40074dc:	1807d43a 	srai	r3,r3,16
 40074e0:	2908b03a 	or	r4,r5,r4
 40074e4:	313fff15 	stw	r4,-4(r6)
 40074e8:	5a3ff236 	bltu	r11,r8,40074b4 <__alt_data_end+0xfc0074b4>
 40074ec:	0406303a 	nor	r3,zero,r16
 40074f0:	1a07883a 	add	r3,r3,r8
 40074f4:	1806d0ba 	srli	r3,r3,2
 40074f8:	18c00044 	addi	r3,r3,1
 40074fc:	18c7883a 	add	r3,r3,r3
 4007500:	18c7883a 	add	r3,r3,r3
 4007504:	50d5883a 	add	r10,r10,r3
 4007508:	50ffff04 	addi	r3,r10,-4
 400750c:	2000041e 	bne	r4,zero,4007520 <__mdiff+0x194>
 4007510:	18ffff04 	addi	r3,r3,-4
 4007514:	19000017 	ldw	r4,0(r3)
 4007518:	4a7fffc4 	addi	r9,r9,-1
 400751c:	203ffc26 	beq	r4,zero,4007510 <__alt_data_end+0xfc007510>
 4007520:	12400415 	stw	r9,16(r2)
 4007524:	dfc00517 	ldw	ra,20(sp)
 4007528:	dd000417 	ldw	r20,16(sp)
 400752c:	dcc00317 	ldw	r19,12(sp)
 4007530:	dc800217 	ldw	r18,8(sp)
 4007534:	dc400117 	ldw	r17,4(sp)
 4007538:	dc000017 	ldw	r16,0(sp)
 400753c:	dec00604 	addi	sp,sp,24
 4007540:	f800283a 	ret
 4007544:	000b883a 	mov	r5,zero
 4007548:	4006a640 	call	4006a64 <_Balloc>
 400754c:	00c00044 	movi	r3,1
 4007550:	10c00415 	stw	r3,16(r2)
 4007554:	10000515 	stw	zero,20(r2)
 4007558:	003ff206 	br	4007524 <__alt_data_end+0xfc007524>
 400755c:	8023883a 	mov	r17,r16
 4007560:	0029883a 	mov	r20,zero
 4007564:	4021883a 	mov	r16,r8
 4007568:	003fad06 	br	4007420 <__alt_data_end+0xfc007420>
 400756c:	9005883a 	mov	r2,r18
 4007570:	94400504 	addi	r17,r18,20
 4007574:	9c000504 	addi	r16,r19,20
 4007578:	9825883a 	mov	r18,r19
 400757c:	05000044 	movi	r20,1
 4007580:	1027883a 	mov	r19,r2
 4007584:	003fa606 	br	4007420 <__alt_data_end+0xfc007420>

04007588 <__ulp>:
 4007588:	295ffc2c 	andhi	r5,r5,32752
 400758c:	00bf3034 	movhi	r2,64704
 4007590:	2887883a 	add	r3,r5,r2
 4007594:	00c0020e 	bge	zero,r3,40075a0 <__ulp+0x18>
 4007598:	0005883a 	mov	r2,zero
 400759c:	f800283a 	ret
 40075a0:	00c7c83a 	sub	r3,zero,r3
 40075a4:	1807d53a 	srai	r3,r3,20
 40075a8:	008004c4 	movi	r2,19
 40075ac:	10c00b0e 	bge	r2,r3,40075dc <__ulp+0x54>
 40075b0:	18bffb04 	addi	r2,r3,-20
 40075b4:	01000784 	movi	r4,30
 40075b8:	0007883a 	mov	r3,zero
 40075bc:	20800516 	blt	r4,r2,40075d4 <__ulp+0x4c>
 40075c0:	010007c4 	movi	r4,31
 40075c4:	2089c83a 	sub	r4,r4,r2
 40075c8:	00800044 	movi	r2,1
 40075cc:	1104983a 	sll	r2,r2,r4
 40075d0:	f800283a 	ret
 40075d4:	00800044 	movi	r2,1
 40075d8:	f800283a 	ret
 40075dc:	01400234 	movhi	r5,8
 40075e0:	28c7d83a 	sra	r3,r5,r3
 40075e4:	0005883a 	mov	r2,zero
 40075e8:	f800283a 	ret

040075ec <__b2d>:
 40075ec:	defffa04 	addi	sp,sp,-24
 40075f0:	dc000015 	stw	r16,0(sp)
 40075f4:	24000417 	ldw	r16,16(r4)
 40075f8:	dc400115 	stw	r17,4(sp)
 40075fc:	24400504 	addi	r17,r4,20
 4007600:	8421883a 	add	r16,r16,r16
 4007604:	8421883a 	add	r16,r16,r16
 4007608:	8c21883a 	add	r16,r17,r16
 400760c:	dc800215 	stw	r18,8(sp)
 4007610:	84bfff17 	ldw	r18,-4(r16)
 4007614:	dd000415 	stw	r20,16(sp)
 4007618:	dcc00315 	stw	r19,12(sp)
 400761c:	9009883a 	mov	r4,r18
 4007620:	2829883a 	mov	r20,r5
 4007624:	dfc00515 	stw	ra,20(sp)
 4007628:	4006d580 	call	4006d58 <__hi0bits>
 400762c:	00c00804 	movi	r3,32
 4007630:	1889c83a 	sub	r4,r3,r2
 4007634:	a1000015 	stw	r4,0(r20)
 4007638:	01000284 	movi	r4,10
 400763c:	84ffff04 	addi	r19,r16,-4
 4007640:	20801216 	blt	r4,r2,400768c <__b2d+0xa0>
 4007644:	018002c4 	movi	r6,11
 4007648:	308dc83a 	sub	r6,r6,r2
 400764c:	9186d83a 	srl	r3,r18,r6
 4007650:	18cffc34 	orhi	r3,r3,16368
 4007654:	8cc0212e 	bgeu	r17,r19,40076dc <__b2d+0xf0>
 4007658:	813ffe17 	ldw	r4,-8(r16)
 400765c:	218cd83a 	srl	r6,r4,r6
 4007660:	10800544 	addi	r2,r2,21
 4007664:	9084983a 	sll	r2,r18,r2
 4007668:	1184b03a 	or	r2,r2,r6
 400766c:	dfc00517 	ldw	ra,20(sp)
 4007670:	dd000417 	ldw	r20,16(sp)
 4007674:	dcc00317 	ldw	r19,12(sp)
 4007678:	dc800217 	ldw	r18,8(sp)
 400767c:	dc400117 	ldw	r17,4(sp)
 4007680:	dc000017 	ldw	r16,0(sp)
 4007684:	dec00604 	addi	sp,sp,24
 4007688:	f800283a 	ret
 400768c:	8cc00f2e 	bgeu	r17,r19,40076cc <__b2d+0xe0>
 4007690:	117ffd44 	addi	r5,r2,-11
 4007694:	80bffe17 	ldw	r2,-8(r16)
 4007698:	28000e26 	beq	r5,zero,40076d4 <__b2d+0xe8>
 400769c:	1949c83a 	sub	r4,r3,r5
 40076a0:	9164983a 	sll	r18,r18,r5
 40076a4:	1106d83a 	srl	r3,r2,r4
 40076a8:	81bffe04 	addi	r6,r16,-8
 40076ac:	948ffc34 	orhi	r18,r18,16368
 40076b0:	90c6b03a 	or	r3,r18,r3
 40076b4:	89800e2e 	bgeu	r17,r6,40076f0 <__b2d+0x104>
 40076b8:	81bffd17 	ldw	r6,-12(r16)
 40076bc:	1144983a 	sll	r2,r2,r5
 40076c0:	310ad83a 	srl	r5,r6,r4
 40076c4:	2884b03a 	or	r2,r5,r2
 40076c8:	003fe806 	br	400766c <__alt_data_end+0xfc00766c>
 40076cc:	10bffd44 	addi	r2,r2,-11
 40076d0:	1000041e 	bne	r2,zero,40076e4 <__b2d+0xf8>
 40076d4:	90cffc34 	orhi	r3,r18,16368
 40076d8:	003fe406 	br	400766c <__alt_data_end+0xfc00766c>
 40076dc:	000d883a 	mov	r6,zero
 40076e0:	003fdf06 	br	4007660 <__alt_data_end+0xfc007660>
 40076e4:	90a4983a 	sll	r18,r18,r2
 40076e8:	0005883a 	mov	r2,zero
 40076ec:	003ff906 	br	40076d4 <__alt_data_end+0xfc0076d4>
 40076f0:	1144983a 	sll	r2,r2,r5
 40076f4:	003fdd06 	br	400766c <__alt_data_end+0xfc00766c>

040076f8 <__d2b>:
 40076f8:	defff804 	addi	sp,sp,-32
 40076fc:	dc000215 	stw	r16,8(sp)
 4007700:	3021883a 	mov	r16,r6
 4007704:	dc400315 	stw	r17,12(sp)
 4007708:	8022907a 	slli	r17,r16,1
 400770c:	dd000615 	stw	r20,24(sp)
 4007710:	2829883a 	mov	r20,r5
 4007714:	01400044 	movi	r5,1
 4007718:	dcc00515 	stw	r19,20(sp)
 400771c:	dc800415 	stw	r18,16(sp)
 4007720:	dfc00715 	stw	ra,28(sp)
 4007724:	3825883a 	mov	r18,r7
 4007728:	8822d57a 	srli	r17,r17,21
 400772c:	4006a640 	call	4006a64 <_Balloc>
 4007730:	1027883a 	mov	r19,r2
 4007734:	00800434 	movhi	r2,16
 4007738:	10bfffc4 	addi	r2,r2,-1
 400773c:	808c703a 	and	r6,r16,r2
 4007740:	88000126 	beq	r17,zero,4007748 <__d2b+0x50>
 4007744:	31800434 	orhi	r6,r6,16
 4007748:	d9800015 	stw	r6,0(sp)
 400774c:	a0002426 	beq	r20,zero,40077e0 <__d2b+0xe8>
 4007750:	d9000104 	addi	r4,sp,4
 4007754:	dd000115 	stw	r20,4(sp)
 4007758:	4006dc00 	call	4006dc0 <__lo0bits>
 400775c:	d8c00017 	ldw	r3,0(sp)
 4007760:	10002f1e 	bne	r2,zero,4007820 <__d2b+0x128>
 4007764:	d9000117 	ldw	r4,4(sp)
 4007768:	99000515 	stw	r4,20(r19)
 400776c:	1821003a 	cmpeq	r16,r3,zero
 4007770:	01000084 	movi	r4,2
 4007774:	2421c83a 	sub	r16,r4,r16
 4007778:	98c00615 	stw	r3,24(r19)
 400777c:	9c000415 	stw	r16,16(r19)
 4007780:	88001f1e 	bne	r17,zero,4007800 <__d2b+0x108>
 4007784:	10bef384 	addi	r2,r2,-1074
 4007788:	90800015 	stw	r2,0(r18)
 400778c:	00900034 	movhi	r2,16384
 4007790:	10bfffc4 	addi	r2,r2,-1
 4007794:	8085883a 	add	r2,r16,r2
 4007798:	1085883a 	add	r2,r2,r2
 400779c:	1085883a 	add	r2,r2,r2
 40077a0:	9885883a 	add	r2,r19,r2
 40077a4:	11000517 	ldw	r4,20(r2)
 40077a8:	8020917a 	slli	r16,r16,5
 40077ac:	4006d580 	call	4006d58 <__hi0bits>
 40077b0:	d8c00817 	ldw	r3,32(sp)
 40077b4:	8085c83a 	sub	r2,r16,r2
 40077b8:	18800015 	stw	r2,0(r3)
 40077bc:	9805883a 	mov	r2,r19
 40077c0:	dfc00717 	ldw	ra,28(sp)
 40077c4:	dd000617 	ldw	r20,24(sp)
 40077c8:	dcc00517 	ldw	r19,20(sp)
 40077cc:	dc800417 	ldw	r18,16(sp)
 40077d0:	dc400317 	ldw	r17,12(sp)
 40077d4:	dc000217 	ldw	r16,8(sp)
 40077d8:	dec00804 	addi	sp,sp,32
 40077dc:	f800283a 	ret
 40077e0:	d809883a 	mov	r4,sp
 40077e4:	4006dc00 	call	4006dc0 <__lo0bits>
 40077e8:	d8c00017 	ldw	r3,0(sp)
 40077ec:	04000044 	movi	r16,1
 40077f0:	9c000415 	stw	r16,16(r19)
 40077f4:	98c00515 	stw	r3,20(r19)
 40077f8:	10800804 	addi	r2,r2,32
 40077fc:	883fe126 	beq	r17,zero,4007784 <__alt_data_end+0xfc007784>
 4007800:	00c00d44 	movi	r3,53
 4007804:	8c7ef344 	addi	r17,r17,-1075
 4007808:	88a3883a 	add	r17,r17,r2
 400780c:	1885c83a 	sub	r2,r3,r2
 4007810:	d8c00817 	ldw	r3,32(sp)
 4007814:	94400015 	stw	r17,0(r18)
 4007818:	18800015 	stw	r2,0(r3)
 400781c:	003fe706 	br	40077bc <__alt_data_end+0xfc0077bc>
 4007820:	01000804 	movi	r4,32
 4007824:	2089c83a 	sub	r4,r4,r2
 4007828:	1908983a 	sll	r4,r3,r4
 400782c:	d9400117 	ldw	r5,4(sp)
 4007830:	1886d83a 	srl	r3,r3,r2
 4007834:	2148b03a 	or	r4,r4,r5
 4007838:	99000515 	stw	r4,20(r19)
 400783c:	d8c00015 	stw	r3,0(sp)
 4007840:	003fca06 	br	400776c <__alt_data_end+0xfc00776c>

04007844 <__ratio>:
 4007844:	defff904 	addi	sp,sp,-28
 4007848:	dc400315 	stw	r17,12(sp)
 400784c:	2823883a 	mov	r17,r5
 4007850:	d9400104 	addi	r5,sp,4
 4007854:	dfc00615 	stw	ra,24(sp)
 4007858:	dcc00515 	stw	r19,20(sp)
 400785c:	dc800415 	stw	r18,16(sp)
 4007860:	2027883a 	mov	r19,r4
 4007864:	dc000215 	stw	r16,8(sp)
 4007868:	40075ec0 	call	40075ec <__b2d>
 400786c:	d80b883a 	mov	r5,sp
 4007870:	8809883a 	mov	r4,r17
 4007874:	1025883a 	mov	r18,r2
 4007878:	1821883a 	mov	r16,r3
 400787c:	40075ec0 	call	40075ec <__b2d>
 4007880:	8a000417 	ldw	r8,16(r17)
 4007884:	99000417 	ldw	r4,16(r19)
 4007888:	d9400117 	ldw	r5,4(sp)
 400788c:	2209c83a 	sub	r4,r4,r8
 4007890:	2010917a 	slli	r8,r4,5
 4007894:	d9000017 	ldw	r4,0(sp)
 4007898:	2909c83a 	sub	r4,r5,r4
 400789c:	4109883a 	add	r4,r8,r4
 40078a0:	01000e0e 	bge	zero,r4,40078dc <__ratio+0x98>
 40078a4:	2008953a 	slli	r4,r4,20
 40078a8:	2421883a 	add	r16,r4,r16
 40078ac:	100d883a 	mov	r6,r2
 40078b0:	180f883a 	mov	r7,r3
 40078b4:	9009883a 	mov	r4,r18
 40078b8:	800b883a 	mov	r5,r16
 40078bc:	400b8c40 	call	400b8c4 <__divdf3>
 40078c0:	dfc00617 	ldw	ra,24(sp)
 40078c4:	dcc00517 	ldw	r19,20(sp)
 40078c8:	dc800417 	ldw	r18,16(sp)
 40078cc:	dc400317 	ldw	r17,12(sp)
 40078d0:	dc000217 	ldw	r16,8(sp)
 40078d4:	dec00704 	addi	sp,sp,28
 40078d8:	f800283a 	ret
 40078dc:	2008953a 	slli	r4,r4,20
 40078e0:	1907c83a 	sub	r3,r3,r4
 40078e4:	003ff106 	br	40078ac <__alt_data_end+0xfc0078ac>

040078e8 <_mprec_log10>:
 40078e8:	defffe04 	addi	sp,sp,-8
 40078ec:	dc000015 	stw	r16,0(sp)
 40078f0:	dfc00115 	stw	ra,4(sp)
 40078f4:	008005c4 	movi	r2,23
 40078f8:	2021883a 	mov	r16,r4
 40078fc:	11000d0e 	bge	r2,r4,4007934 <_mprec_log10+0x4c>
 4007900:	0005883a 	mov	r2,zero
 4007904:	00cffc34 	movhi	r3,16368
 4007908:	843fffc4 	addi	r16,r16,-1
 400790c:	000d883a 	mov	r6,zero
 4007910:	01d00934 	movhi	r7,16420
 4007914:	1009883a 	mov	r4,r2
 4007918:	180b883a 	mov	r5,r3
 400791c:	400c4040 	call	400c404 <__muldf3>
 4007920:	803ff91e 	bne	r16,zero,4007908 <__alt_data_end+0xfc007908>
 4007924:	dfc00117 	ldw	ra,4(sp)
 4007928:	dc000017 	ldw	r16,0(sp)
 400792c:	dec00204 	addi	sp,sp,8
 4007930:	f800283a 	ret
 4007934:	202090fa 	slli	r16,r4,3
 4007938:	00810074 	movhi	r2,1025
 400793c:	10818304 	addi	r2,r2,1548
 4007940:	1421883a 	add	r16,r2,r16
 4007944:	80800017 	ldw	r2,0(r16)
 4007948:	80c00117 	ldw	r3,4(r16)
 400794c:	dfc00117 	ldw	ra,4(sp)
 4007950:	dc000017 	ldw	r16,0(sp)
 4007954:	dec00204 	addi	sp,sp,8
 4007958:	f800283a 	ret

0400795c <__copybits>:
 400795c:	297fffc4 	addi	r5,r5,-1
 4007960:	280fd17a 	srai	r7,r5,5
 4007964:	30c00417 	ldw	r3,16(r6)
 4007968:	30800504 	addi	r2,r6,20
 400796c:	39c00044 	addi	r7,r7,1
 4007970:	18c7883a 	add	r3,r3,r3
 4007974:	39cf883a 	add	r7,r7,r7
 4007978:	18c7883a 	add	r3,r3,r3
 400797c:	39cf883a 	add	r7,r7,r7
 4007980:	10c7883a 	add	r3,r2,r3
 4007984:	21cf883a 	add	r7,r4,r7
 4007988:	10c00d2e 	bgeu	r2,r3,40079c0 <__copybits+0x64>
 400798c:	200b883a 	mov	r5,r4
 4007990:	12000017 	ldw	r8,0(r2)
 4007994:	29400104 	addi	r5,r5,4
 4007998:	10800104 	addi	r2,r2,4
 400799c:	2a3fff15 	stw	r8,-4(r5)
 40079a0:	10fffb36 	bltu	r2,r3,4007990 <__alt_data_end+0xfc007990>
 40079a4:	1985c83a 	sub	r2,r3,r6
 40079a8:	10bffac4 	addi	r2,r2,-21
 40079ac:	1004d0ba 	srli	r2,r2,2
 40079b0:	10800044 	addi	r2,r2,1
 40079b4:	1085883a 	add	r2,r2,r2
 40079b8:	1085883a 	add	r2,r2,r2
 40079bc:	2089883a 	add	r4,r4,r2
 40079c0:	21c0032e 	bgeu	r4,r7,40079d0 <__copybits+0x74>
 40079c4:	20000015 	stw	zero,0(r4)
 40079c8:	21000104 	addi	r4,r4,4
 40079cc:	21fffd36 	bltu	r4,r7,40079c4 <__alt_data_end+0xfc0079c4>
 40079d0:	f800283a 	ret

040079d4 <__any_on>:
 40079d4:	20c00417 	ldw	r3,16(r4)
 40079d8:	2805d17a 	srai	r2,r5,5
 40079dc:	21000504 	addi	r4,r4,20
 40079e0:	18800d0e 	bge	r3,r2,4007a18 <__any_on+0x44>
 40079e4:	18c7883a 	add	r3,r3,r3
 40079e8:	18c7883a 	add	r3,r3,r3
 40079ec:	20c7883a 	add	r3,r4,r3
 40079f0:	20c0192e 	bgeu	r4,r3,4007a58 <__any_on+0x84>
 40079f4:	18bfff17 	ldw	r2,-4(r3)
 40079f8:	18ffff04 	addi	r3,r3,-4
 40079fc:	1000041e 	bne	r2,zero,4007a10 <__any_on+0x3c>
 4007a00:	20c0142e 	bgeu	r4,r3,4007a54 <__any_on+0x80>
 4007a04:	18ffff04 	addi	r3,r3,-4
 4007a08:	19400017 	ldw	r5,0(r3)
 4007a0c:	283ffc26 	beq	r5,zero,4007a00 <__alt_data_end+0xfc007a00>
 4007a10:	00800044 	movi	r2,1
 4007a14:	f800283a 	ret
 4007a18:	10c00a0e 	bge	r2,r3,4007a44 <__any_on+0x70>
 4007a1c:	1085883a 	add	r2,r2,r2
 4007a20:	1085883a 	add	r2,r2,r2
 4007a24:	294007cc 	andi	r5,r5,31
 4007a28:	2087883a 	add	r3,r4,r2
 4007a2c:	283ff026 	beq	r5,zero,40079f0 <__alt_data_end+0xfc0079f0>
 4007a30:	19800017 	ldw	r6,0(r3)
 4007a34:	3144d83a 	srl	r2,r6,r5
 4007a38:	114a983a 	sll	r5,r2,r5
 4007a3c:	317ff41e 	bne	r6,r5,4007a10 <__alt_data_end+0xfc007a10>
 4007a40:	003feb06 	br	40079f0 <__alt_data_end+0xfc0079f0>
 4007a44:	1085883a 	add	r2,r2,r2
 4007a48:	1085883a 	add	r2,r2,r2
 4007a4c:	2087883a 	add	r3,r4,r2
 4007a50:	003fe706 	br	40079f0 <__alt_data_end+0xfc0079f0>
 4007a54:	f800283a 	ret
 4007a58:	0005883a 	mov	r2,zero
 4007a5c:	f800283a 	ret

04007a60 <_read_r>:
 4007a60:	defffd04 	addi	sp,sp,-12
 4007a64:	2805883a 	mov	r2,r5
 4007a68:	dc000015 	stw	r16,0(sp)
 4007a6c:	04010074 	movhi	r16,1025
 4007a70:	dc400115 	stw	r17,4(sp)
 4007a74:	300b883a 	mov	r5,r6
 4007a78:	840fa304 	addi	r16,r16,16012
 4007a7c:	2023883a 	mov	r17,r4
 4007a80:	380d883a 	mov	r6,r7
 4007a84:	1009883a 	mov	r4,r2
 4007a88:	dfc00215 	stw	ra,8(sp)
 4007a8c:	80000015 	stw	zero,0(r16)
 4007a90:	400ded40 	call	400ded4 <read>
 4007a94:	00ffffc4 	movi	r3,-1
 4007a98:	10c00526 	beq	r2,r3,4007ab0 <_read_r+0x50>
 4007a9c:	dfc00217 	ldw	ra,8(sp)
 4007aa0:	dc400117 	ldw	r17,4(sp)
 4007aa4:	dc000017 	ldw	r16,0(sp)
 4007aa8:	dec00304 	addi	sp,sp,12
 4007aac:	f800283a 	ret
 4007ab0:	80c00017 	ldw	r3,0(r16)
 4007ab4:	183ff926 	beq	r3,zero,4007a9c <__alt_data_end+0xfc007a9c>
 4007ab8:	88c00015 	stw	r3,0(r17)
 4007abc:	003ff706 	br	4007a9c <__alt_data_end+0xfc007a9c>

04007ac0 <__fpclassifyd>:
 4007ac0:	00a00034 	movhi	r2,32768
 4007ac4:	10bfffc4 	addi	r2,r2,-1
 4007ac8:	2884703a 	and	r2,r5,r2
 4007acc:	10000726 	beq	r2,zero,4007aec <__fpclassifyd+0x2c>
 4007ad0:	00fffc34 	movhi	r3,65520
 4007ad4:	019ff834 	movhi	r6,32736
 4007ad8:	28c7883a 	add	r3,r5,r3
 4007adc:	31bfffc4 	addi	r6,r6,-1
 4007ae0:	30c00536 	bltu	r6,r3,4007af8 <__fpclassifyd+0x38>
 4007ae4:	00800104 	movi	r2,4
 4007ae8:	f800283a 	ret
 4007aec:	2000021e 	bne	r4,zero,4007af8 <__fpclassifyd+0x38>
 4007af0:	00800084 	movi	r2,2
 4007af4:	f800283a 	ret
 4007af8:	00dffc34 	movhi	r3,32752
 4007afc:	019ff834 	movhi	r6,32736
 4007b00:	28cb883a 	add	r5,r5,r3
 4007b04:	31bfffc4 	addi	r6,r6,-1
 4007b08:	317ff62e 	bgeu	r6,r5,4007ae4 <__alt_data_end+0xfc007ae4>
 4007b0c:	01400434 	movhi	r5,16
 4007b10:	297fffc4 	addi	r5,r5,-1
 4007b14:	28800236 	bltu	r5,r2,4007b20 <__fpclassifyd+0x60>
 4007b18:	008000c4 	movi	r2,3
 4007b1c:	f800283a 	ret
 4007b20:	10c00226 	beq	r2,r3,4007b2c <__fpclassifyd+0x6c>
 4007b24:	0005883a 	mov	r2,zero
 4007b28:	f800283a 	ret
 4007b2c:	2005003a 	cmpeq	r2,r4,zero
 4007b30:	f800283a 	ret

04007b34 <__sprint_r.part.0>:
 4007b34:	28801917 	ldw	r2,100(r5)
 4007b38:	defff604 	addi	sp,sp,-40
 4007b3c:	dd400515 	stw	r21,20(sp)
 4007b40:	dfc00915 	stw	ra,36(sp)
 4007b44:	df000815 	stw	fp,32(sp)
 4007b48:	ddc00715 	stw	r23,28(sp)
 4007b4c:	dd800615 	stw	r22,24(sp)
 4007b50:	dd000415 	stw	r20,16(sp)
 4007b54:	dcc00315 	stw	r19,12(sp)
 4007b58:	dc800215 	stw	r18,8(sp)
 4007b5c:	dc400115 	stw	r17,4(sp)
 4007b60:	dc000015 	stw	r16,0(sp)
 4007b64:	1088000c 	andi	r2,r2,8192
 4007b68:	302b883a 	mov	r21,r6
 4007b6c:	10002e26 	beq	r2,zero,4007c28 <__sprint_r.part.0+0xf4>
 4007b70:	30800217 	ldw	r2,8(r6)
 4007b74:	35800017 	ldw	r22,0(r6)
 4007b78:	10002926 	beq	r2,zero,4007c20 <__sprint_r.part.0+0xec>
 4007b7c:	2827883a 	mov	r19,r5
 4007b80:	2029883a 	mov	r20,r4
 4007b84:	b5c00104 	addi	r23,r22,4
 4007b88:	04bfffc4 	movi	r18,-1
 4007b8c:	bc400017 	ldw	r17,0(r23)
 4007b90:	b4000017 	ldw	r16,0(r22)
 4007b94:	0039883a 	mov	fp,zero
 4007b98:	8822d0ba 	srli	r17,r17,2
 4007b9c:	8800031e 	bne	r17,zero,4007bac <__sprint_r.part.0+0x78>
 4007ba0:	00001806 	br	4007c04 <__sprint_r.part.0+0xd0>
 4007ba4:	84000104 	addi	r16,r16,4
 4007ba8:	8f001526 	beq	r17,fp,4007c00 <__sprint_r.part.0+0xcc>
 4007bac:	81400017 	ldw	r5,0(r16)
 4007bb0:	980d883a 	mov	r6,r19
 4007bb4:	a009883a 	mov	r4,r20
 4007bb8:	40093a40 	call	40093a4 <_fputwc_r>
 4007bbc:	e7000044 	addi	fp,fp,1
 4007bc0:	14bff81e 	bne	r2,r18,4007ba4 <__alt_data_end+0xfc007ba4>
 4007bc4:	9005883a 	mov	r2,r18
 4007bc8:	a8000215 	stw	zero,8(r21)
 4007bcc:	a8000115 	stw	zero,4(r21)
 4007bd0:	dfc00917 	ldw	ra,36(sp)
 4007bd4:	df000817 	ldw	fp,32(sp)
 4007bd8:	ddc00717 	ldw	r23,28(sp)
 4007bdc:	dd800617 	ldw	r22,24(sp)
 4007be0:	dd400517 	ldw	r21,20(sp)
 4007be4:	dd000417 	ldw	r20,16(sp)
 4007be8:	dcc00317 	ldw	r19,12(sp)
 4007bec:	dc800217 	ldw	r18,8(sp)
 4007bf0:	dc400117 	ldw	r17,4(sp)
 4007bf4:	dc000017 	ldw	r16,0(sp)
 4007bf8:	dec00a04 	addi	sp,sp,40
 4007bfc:	f800283a 	ret
 4007c00:	a8800217 	ldw	r2,8(r21)
 4007c04:	8c63883a 	add	r17,r17,r17
 4007c08:	8c63883a 	add	r17,r17,r17
 4007c0c:	1445c83a 	sub	r2,r2,r17
 4007c10:	a8800215 	stw	r2,8(r21)
 4007c14:	b5800204 	addi	r22,r22,8
 4007c18:	bdc00204 	addi	r23,r23,8
 4007c1c:	103fdb1e 	bne	r2,zero,4007b8c <__alt_data_end+0xfc007b8c>
 4007c20:	0005883a 	mov	r2,zero
 4007c24:	003fe806 	br	4007bc8 <__alt_data_end+0xfc007bc8>
 4007c28:	40094a40 	call	40094a4 <__sfvwrite_r>
 4007c2c:	003fe606 	br	4007bc8 <__alt_data_end+0xfc007bc8>

04007c30 <__sprint_r>:
 4007c30:	30c00217 	ldw	r3,8(r6)
 4007c34:	18000126 	beq	r3,zero,4007c3c <__sprint_r+0xc>
 4007c38:	4007b341 	jmpi	4007b34 <__sprint_r.part.0>
 4007c3c:	30000115 	stw	zero,4(r6)
 4007c40:	0005883a 	mov	r2,zero
 4007c44:	f800283a 	ret

04007c48 <___vfiprintf_internal_r>:
 4007c48:	deffc904 	addi	sp,sp,-220
 4007c4c:	df003515 	stw	fp,212(sp)
 4007c50:	dd003115 	stw	r20,196(sp)
 4007c54:	dfc03615 	stw	ra,216(sp)
 4007c58:	ddc03415 	stw	r23,208(sp)
 4007c5c:	dd803315 	stw	r22,204(sp)
 4007c60:	dd403215 	stw	r21,200(sp)
 4007c64:	dcc03015 	stw	r19,192(sp)
 4007c68:	dc802f15 	stw	r18,188(sp)
 4007c6c:	dc402e15 	stw	r17,184(sp)
 4007c70:	dc002d15 	stw	r16,180(sp)
 4007c74:	d9002015 	stw	r4,128(sp)
 4007c78:	d9c02215 	stw	r7,136(sp)
 4007c7c:	2829883a 	mov	r20,r5
 4007c80:	3039883a 	mov	fp,r6
 4007c84:	20000226 	beq	r4,zero,4007c90 <___vfiprintf_internal_r+0x48>
 4007c88:	20800e17 	ldw	r2,56(r4)
 4007c8c:	1000cf26 	beq	r2,zero,4007fcc <___vfiprintf_internal_r+0x384>
 4007c90:	a080030b 	ldhu	r2,12(r20)
 4007c94:	10c8000c 	andi	r3,r2,8192
 4007c98:	1800061e 	bne	r3,zero,4007cb4 <___vfiprintf_internal_r+0x6c>
 4007c9c:	a1001917 	ldw	r4,100(r20)
 4007ca0:	00f7ffc4 	movi	r3,-8193
 4007ca4:	10880014 	ori	r2,r2,8192
 4007ca8:	20c6703a 	and	r3,r4,r3
 4007cac:	a080030d 	sth	r2,12(r20)
 4007cb0:	a0c01915 	stw	r3,100(r20)
 4007cb4:	10c0020c 	andi	r3,r2,8
 4007cb8:	1800a926 	beq	r3,zero,4007f60 <___vfiprintf_internal_r+0x318>
 4007cbc:	a0c00417 	ldw	r3,16(r20)
 4007cc0:	1800a726 	beq	r3,zero,4007f60 <___vfiprintf_internal_r+0x318>
 4007cc4:	1080068c 	andi	r2,r2,26
 4007cc8:	00c00284 	movi	r3,10
 4007ccc:	10c0ac26 	beq	r2,r3,4007f80 <___vfiprintf_internal_r+0x338>
 4007cd0:	da801a04 	addi	r10,sp,104
 4007cd4:	da801e15 	stw	r10,120(sp)
 4007cd8:	d8801e17 	ldw	r2,120(sp)
 4007cdc:	da8019c4 	addi	r10,sp,103
 4007ce0:	05810074 	movhi	r22,1025
 4007ce4:	05c10074 	movhi	r23,1025
 4007ce8:	da801f15 	stw	r10,124(sp)
 4007cec:	1295c83a 	sub	r10,r2,r10
 4007cf0:	b581b904 	addi	r22,r22,1764
 4007cf4:	bdc1b504 	addi	r23,r23,1748
 4007cf8:	dec01a15 	stw	sp,104(sp)
 4007cfc:	d8001c15 	stw	zero,112(sp)
 4007d00:	d8001b15 	stw	zero,108(sp)
 4007d04:	d8002615 	stw	zero,152(sp)
 4007d08:	d8002315 	stw	zero,140(sp)
 4007d0c:	da802715 	stw	r10,156(sp)
 4007d10:	d811883a 	mov	r8,sp
 4007d14:	dd002115 	stw	r20,132(sp)
 4007d18:	e021883a 	mov	r16,fp
 4007d1c:	80800007 	ldb	r2,0(r16)
 4007d20:	1003ea26 	beq	r2,zero,4008ccc <___vfiprintf_internal_r+0x1084>
 4007d24:	00c00944 	movi	r3,37
 4007d28:	8025883a 	mov	r18,r16
 4007d2c:	10c0021e 	bne	r2,r3,4007d38 <___vfiprintf_internal_r+0xf0>
 4007d30:	00001606 	br	4007d8c <___vfiprintf_internal_r+0x144>
 4007d34:	10c00326 	beq	r2,r3,4007d44 <___vfiprintf_internal_r+0xfc>
 4007d38:	94800044 	addi	r18,r18,1
 4007d3c:	90800007 	ldb	r2,0(r18)
 4007d40:	103ffc1e 	bne	r2,zero,4007d34 <__alt_data_end+0xfc007d34>
 4007d44:	9423c83a 	sub	r17,r18,r16
 4007d48:	88001026 	beq	r17,zero,4007d8c <___vfiprintf_internal_r+0x144>
 4007d4c:	d8c01c17 	ldw	r3,112(sp)
 4007d50:	d8801b17 	ldw	r2,108(sp)
 4007d54:	44000015 	stw	r16,0(r8)
 4007d58:	88c7883a 	add	r3,r17,r3
 4007d5c:	10800044 	addi	r2,r2,1
 4007d60:	44400115 	stw	r17,4(r8)
 4007d64:	d8c01c15 	stw	r3,112(sp)
 4007d68:	d8801b15 	stw	r2,108(sp)
 4007d6c:	010001c4 	movi	r4,7
 4007d70:	2080760e 	bge	r4,r2,4007f4c <___vfiprintf_internal_r+0x304>
 4007d74:	1803821e 	bne	r3,zero,4008b80 <___vfiprintf_internal_r+0xf38>
 4007d78:	da802317 	ldw	r10,140(sp)
 4007d7c:	d8001b15 	stw	zero,108(sp)
 4007d80:	d811883a 	mov	r8,sp
 4007d84:	5455883a 	add	r10,r10,r17
 4007d88:	da802315 	stw	r10,140(sp)
 4007d8c:	90800007 	ldb	r2,0(r18)
 4007d90:	10044626 	beq	r2,zero,4008eac <___vfiprintf_internal_r+0x1264>
 4007d94:	90c00047 	ldb	r3,1(r18)
 4007d98:	94000044 	addi	r16,r18,1
 4007d9c:	d8001d85 	stb	zero,118(sp)
 4007da0:	0009883a 	mov	r4,zero
 4007da4:	000f883a 	mov	r7,zero
 4007da8:	027fffc4 	movi	r9,-1
 4007dac:	0023883a 	mov	r17,zero
 4007db0:	0029883a 	mov	r20,zero
 4007db4:	01401604 	movi	r5,88
 4007db8:	01800244 	movi	r6,9
 4007dbc:	03400a84 	movi	r13,42
 4007dc0:	03001b04 	movi	r12,108
 4007dc4:	84000044 	addi	r16,r16,1
 4007dc8:	18bff804 	addi	r2,r3,-32
 4007dcc:	28827336 	bltu	r5,r2,400879c <___vfiprintf_internal_r+0xb54>
 4007dd0:	100490ba 	slli	r2,r2,2
 4007dd4:	02810034 	movhi	r10,1024
 4007dd8:	529f7a04 	addi	r10,r10,32232
 4007ddc:	1285883a 	add	r2,r2,r10
 4007de0:	10800017 	ldw	r2,0(r2)
 4007de4:	1000683a 	jmp	r2
 4007de8:	040084d0 	cmplti	r16,zero,531
 4007dec:	0400879c 	xori	r16,zero,542
 4007df0:	0400879c 	xori	r16,zero,542
 4007df4:	040084f0 	cmpltui	r16,zero,531
 4007df8:	0400879c 	xori	r16,zero,542
 4007dfc:	0400879c 	xori	r16,zero,542
 4007e00:	0400879c 	xori	r16,zero,542
 4007e04:	0400879c 	xori	r16,zero,542
 4007e08:	0400879c 	xori	r16,zero,542
 4007e0c:	0400879c 	xori	r16,zero,542
 4007e10:	040086d8 	cmpnei	r16,zero,539
 4007e14:	040086f4 	movhi	r16,539
 4007e18:	0400879c 	xori	r16,zero,542
 4007e1c:	04007fdc 	xori	r16,zero,511
 4007e20:	04008704 	movi	r16,540
 4007e24:	0400879c 	xori	r16,zero,542
 4007e28:	040084fc 	xorhi	r16,zero,531
 4007e2c:	04008508 	cmpgei	r16,zero,532
 4007e30:	04008508 	cmpgei	r16,zero,532
 4007e34:	04008508 	cmpgei	r16,zero,532
 4007e38:	04008508 	cmpgei	r16,zero,532
 4007e3c:	04008508 	cmpgei	r16,zero,532
 4007e40:	04008508 	cmpgei	r16,zero,532
 4007e44:	04008508 	cmpgei	r16,zero,532
 4007e48:	04008508 	cmpgei	r16,zero,532
 4007e4c:	04008508 	cmpgei	r16,zero,532
 4007e50:	0400879c 	xori	r16,zero,542
 4007e54:	0400879c 	xori	r16,zero,542
 4007e58:	0400879c 	xori	r16,zero,542
 4007e5c:	0400879c 	xori	r16,zero,542
 4007e60:	0400879c 	xori	r16,zero,542
 4007e64:	0400879c 	xori	r16,zero,542
 4007e68:	0400879c 	xori	r16,zero,542
 4007e6c:	0400879c 	xori	r16,zero,542
 4007e70:	0400879c 	xori	r16,zero,542
 4007e74:	0400879c 	xori	r16,zero,542
 4007e78:	04008534 	movhi	r16,532
 4007e7c:	0400879c 	xori	r16,zero,542
 4007e80:	0400879c 	xori	r16,zero,542
 4007e84:	0400879c 	xori	r16,zero,542
 4007e88:	0400879c 	xori	r16,zero,542
 4007e8c:	0400879c 	xori	r16,zero,542
 4007e90:	0400879c 	xori	r16,zero,542
 4007e94:	0400879c 	xori	r16,zero,542
 4007e98:	0400879c 	xori	r16,zero,542
 4007e9c:	0400879c 	xori	r16,zero,542
 4007ea0:	0400879c 	xori	r16,zero,542
 4007ea4:	0400856c 	andhi	r16,zero,533
 4007ea8:	0400879c 	xori	r16,zero,542
 4007eac:	0400879c 	xori	r16,zero,542
 4007eb0:	0400879c 	xori	r16,zero,542
 4007eb4:	0400879c 	xori	r16,zero,542
 4007eb8:	0400879c 	xori	r16,zero,542
 4007ebc:	040085c4 	movi	r16,535
 4007ec0:	0400879c 	xori	r16,zero,542
 4007ec4:	0400879c 	xori	r16,zero,542
 4007ec8:	04008634 	movhi	r16,536
 4007ecc:	0400879c 	xori	r16,zero,542
 4007ed0:	0400879c 	xori	r16,zero,542
 4007ed4:	0400879c 	xori	r16,zero,542
 4007ed8:	0400879c 	xori	r16,zero,542
 4007edc:	0400879c 	xori	r16,zero,542
 4007ee0:	0400879c 	xori	r16,zero,542
 4007ee4:	0400879c 	xori	r16,zero,542
 4007ee8:	0400879c 	xori	r16,zero,542
 4007eec:	0400879c 	xori	r16,zero,542
 4007ef0:	0400879c 	xori	r16,zero,542
 4007ef4:	040083e0 	cmpeqi	r16,zero,527
 4007ef8:	0400840c 	andi	r16,zero,528
 4007efc:	0400879c 	xori	r16,zero,542
 4007f00:	0400879c 	xori	r16,zero,542
 4007f04:	0400879c 	xori	r16,zero,542
 4007f08:	04008744 	movi	r16,541
 4007f0c:	0400840c 	andi	r16,zero,528
 4007f10:	0400879c 	xori	r16,zero,542
 4007f14:	0400879c 	xori	r16,zero,542
 4007f18:	040082a0 	cmpeqi	r16,zero,522
 4007f1c:	0400879c 	xori	r16,zero,542
 4007f20:	040082b0 	cmpltui	r16,zero,522
 4007f24:	040082ec 	andhi	r16,zero,523
 4007f28:	04007fe8 	cmpgeui	r16,zero,511
 4007f2c:	04008294 	movui	r16,522
 4007f30:	0400879c 	xori	r16,zero,542
 4007f34:	04008670 	cmpltui	r16,zero,537
 4007f38:	0400879c 	xori	r16,zero,542
 4007f3c:	040086c8 	cmpgei	r16,zero,539
 4007f40:	0400879c 	xori	r16,zero,542
 4007f44:	0400879c 	xori	r16,zero,542
 4007f48:	0400838c 	andi	r16,zero,526
 4007f4c:	42000204 	addi	r8,r8,8
 4007f50:	da802317 	ldw	r10,140(sp)
 4007f54:	5455883a 	add	r10,r10,r17
 4007f58:	da802315 	stw	r10,140(sp)
 4007f5c:	003f8b06 	br	4007d8c <__alt_data_end+0xfc007d8c>
 4007f60:	d9002017 	ldw	r4,128(sp)
 4007f64:	a00b883a 	mov	r5,r20
 4007f68:	4004b100 	call	4004b10 <__swsetup_r>
 4007f6c:	1003b11e 	bne	r2,zero,4008e34 <___vfiprintf_internal_r+0x11ec>
 4007f70:	a080030b 	ldhu	r2,12(r20)
 4007f74:	00c00284 	movi	r3,10
 4007f78:	1080068c 	andi	r2,r2,26
 4007f7c:	10ff541e 	bne	r2,r3,4007cd0 <__alt_data_end+0xfc007cd0>
 4007f80:	a080038f 	ldh	r2,14(r20)
 4007f84:	103f5216 	blt	r2,zero,4007cd0 <__alt_data_end+0xfc007cd0>
 4007f88:	d9c02217 	ldw	r7,136(sp)
 4007f8c:	d9002017 	ldw	r4,128(sp)
 4007f90:	e00d883a 	mov	r6,fp
 4007f94:	a00b883a 	mov	r5,r20
 4007f98:	40090c00 	call	40090c0 <__sbprintf>
 4007f9c:	dfc03617 	ldw	ra,216(sp)
 4007fa0:	df003517 	ldw	fp,212(sp)
 4007fa4:	ddc03417 	ldw	r23,208(sp)
 4007fa8:	dd803317 	ldw	r22,204(sp)
 4007fac:	dd403217 	ldw	r21,200(sp)
 4007fb0:	dd003117 	ldw	r20,196(sp)
 4007fb4:	dcc03017 	ldw	r19,192(sp)
 4007fb8:	dc802f17 	ldw	r18,188(sp)
 4007fbc:	dc402e17 	ldw	r17,184(sp)
 4007fc0:	dc002d17 	ldw	r16,180(sp)
 4007fc4:	dec03704 	addi	sp,sp,220
 4007fc8:	f800283a 	ret
 4007fcc:	400124c0 	call	400124c <__sinit>
 4007fd0:	003f2f06 	br	4007c90 <__alt_data_end+0xfc007c90>
 4007fd4:	0463c83a 	sub	r17,zero,r17
 4007fd8:	d8802215 	stw	r2,136(sp)
 4007fdc:	a5000114 	ori	r20,r20,4
 4007fe0:	80c00007 	ldb	r3,0(r16)
 4007fe4:	003f7706 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 4007fe8:	00800c04 	movi	r2,48
 4007fec:	da802217 	ldw	r10,136(sp)
 4007ff0:	d8801d05 	stb	r2,116(sp)
 4007ff4:	00801e04 	movi	r2,120
 4007ff8:	d8801d45 	stb	r2,117(sp)
 4007ffc:	d8001d85 	stb	zero,118(sp)
 4008000:	50c00104 	addi	r3,r10,4
 4008004:	54800017 	ldw	r18,0(r10)
 4008008:	0027883a 	mov	r19,zero
 400800c:	a0800094 	ori	r2,r20,2
 4008010:	48030b16 	blt	r9,zero,4008c40 <___vfiprintf_internal_r+0xff8>
 4008014:	00bfdfc4 	movi	r2,-129
 4008018:	a096703a 	and	r11,r20,r2
 400801c:	d8c02215 	stw	r3,136(sp)
 4008020:	5d000094 	ori	r20,r11,2
 4008024:	90032b1e 	bne	r18,zero,4008cd4 <___vfiprintf_internal_r+0x108c>
 4008028:	00810074 	movhi	r2,1025
 400802c:	1080b504 	addi	r2,r2,724
 4008030:	d8802615 	stw	r2,152(sp)
 4008034:	0039883a 	mov	fp,zero
 4008038:	48017b1e 	bne	r9,zero,4008628 <___vfiprintf_internal_r+0x9e0>
 400803c:	0013883a 	mov	r9,zero
 4008040:	0027883a 	mov	r19,zero
 4008044:	dd401a04 	addi	r21,sp,104
 4008048:	4825883a 	mov	r18,r9
 400804c:	4cc0010e 	bge	r9,r19,4008054 <___vfiprintf_internal_r+0x40c>
 4008050:	9825883a 	mov	r18,r19
 4008054:	e7003fcc 	andi	fp,fp,255
 4008058:	e700201c 	xori	fp,fp,128
 400805c:	e73fe004 	addi	fp,fp,-128
 4008060:	e0000126 	beq	fp,zero,4008068 <___vfiprintf_internal_r+0x420>
 4008064:	94800044 	addi	r18,r18,1
 4008068:	a380008c 	andi	r14,r20,2
 400806c:	70000126 	beq	r14,zero,4008074 <___vfiprintf_internal_r+0x42c>
 4008070:	94800084 	addi	r18,r18,2
 4008074:	a700210c 	andi	fp,r20,132
 4008078:	e001df1e 	bne	fp,zero,40087f8 <___vfiprintf_internal_r+0xbb0>
 400807c:	8c87c83a 	sub	r3,r17,r18
 4008080:	00c1dd0e 	bge	zero,r3,40087f8 <___vfiprintf_internal_r+0xbb0>
 4008084:	01c00404 	movi	r7,16
 4008088:	d8801c17 	ldw	r2,112(sp)
 400808c:	38c3ad0e 	bge	r7,r3,4008f44 <___vfiprintf_internal_r+0x12fc>
 4008090:	02810074 	movhi	r10,1025
 4008094:	5281b904 	addi	r10,r10,1764
 4008098:	dc002915 	stw	r16,164(sp)
 400809c:	d9801b17 	ldw	r6,108(sp)
 40080a0:	da802415 	stw	r10,144(sp)
 40080a4:	03c001c4 	movi	r15,7
 40080a8:	da402515 	stw	r9,148(sp)
 40080ac:	db802815 	stw	r14,160(sp)
 40080b0:	1821883a 	mov	r16,r3
 40080b4:	00000506 	br	40080cc <___vfiprintf_internal_r+0x484>
 40080b8:	31400084 	addi	r5,r6,2
 40080bc:	42000204 	addi	r8,r8,8
 40080c0:	200d883a 	mov	r6,r4
 40080c4:	843ffc04 	addi	r16,r16,-16
 40080c8:	3c000d0e 	bge	r7,r16,4008100 <___vfiprintf_internal_r+0x4b8>
 40080cc:	10800404 	addi	r2,r2,16
 40080d0:	31000044 	addi	r4,r6,1
 40080d4:	45800015 	stw	r22,0(r8)
 40080d8:	41c00115 	stw	r7,4(r8)
 40080dc:	d8801c15 	stw	r2,112(sp)
 40080e0:	d9001b15 	stw	r4,108(sp)
 40080e4:	793ff40e 	bge	r15,r4,40080b8 <__alt_data_end+0xfc0080b8>
 40080e8:	1001b51e 	bne	r2,zero,40087c0 <___vfiprintf_internal_r+0xb78>
 40080ec:	843ffc04 	addi	r16,r16,-16
 40080f0:	000d883a 	mov	r6,zero
 40080f4:	01400044 	movi	r5,1
 40080f8:	d811883a 	mov	r8,sp
 40080fc:	3c3ff316 	blt	r7,r16,40080cc <__alt_data_end+0xfc0080cc>
 4008100:	8007883a 	mov	r3,r16
 4008104:	da402517 	ldw	r9,148(sp)
 4008108:	db802817 	ldw	r14,160(sp)
 400810c:	dc002917 	ldw	r16,164(sp)
 4008110:	da802417 	ldw	r10,144(sp)
 4008114:	1885883a 	add	r2,r3,r2
 4008118:	40c00115 	stw	r3,4(r8)
 400811c:	42800015 	stw	r10,0(r8)
 4008120:	d8801c15 	stw	r2,112(sp)
 4008124:	d9401b15 	stw	r5,108(sp)
 4008128:	00c001c4 	movi	r3,7
 400812c:	19426016 	blt	r3,r5,4008ab0 <___vfiprintf_internal_r+0xe68>
 4008130:	d8c01d87 	ldb	r3,118(sp)
 4008134:	42000204 	addi	r8,r8,8
 4008138:	29000044 	addi	r4,r5,1
 400813c:	1801b31e 	bne	r3,zero,400880c <___vfiprintf_internal_r+0xbc4>
 4008140:	7001c026 	beq	r14,zero,4008844 <___vfiprintf_internal_r+0xbfc>
 4008144:	d8c01d04 	addi	r3,sp,116
 4008148:	10800084 	addi	r2,r2,2
 400814c:	40c00015 	stw	r3,0(r8)
 4008150:	00c00084 	movi	r3,2
 4008154:	40c00115 	stw	r3,4(r8)
 4008158:	d8801c15 	stw	r2,112(sp)
 400815c:	d9001b15 	stw	r4,108(sp)
 4008160:	00c001c4 	movi	r3,7
 4008164:	1902650e 	bge	r3,r4,4008afc <___vfiprintf_internal_r+0xeb4>
 4008168:	10029a1e 	bne	r2,zero,4008bd4 <___vfiprintf_internal_r+0xf8c>
 400816c:	00c02004 	movi	r3,128
 4008170:	01000044 	movi	r4,1
 4008174:	000b883a 	mov	r5,zero
 4008178:	d811883a 	mov	r8,sp
 400817c:	e0c1b31e 	bne	fp,r3,400884c <___vfiprintf_internal_r+0xc04>
 4008180:	8cb9c83a 	sub	fp,r17,r18
 4008184:	0701b10e 	bge	zero,fp,400884c <___vfiprintf_internal_r+0xc04>
 4008188:	01c00404 	movi	r7,16
 400818c:	3f03890e 	bge	r7,fp,4008fb4 <___vfiprintf_internal_r+0x136c>
 4008190:	00c10074 	movhi	r3,1025
 4008194:	18c1b504 	addi	r3,r3,1748
 4008198:	d8c02415 	stw	r3,144(sp)
 400819c:	8007883a 	mov	r3,r16
 40081a0:	034001c4 	movi	r13,7
 40081a4:	e021883a 	mov	r16,fp
 40081a8:	da402515 	stw	r9,148(sp)
 40081ac:	1839883a 	mov	fp,r3
 40081b0:	00000506 	br	40081c8 <___vfiprintf_internal_r+0x580>
 40081b4:	29800084 	addi	r6,r5,2
 40081b8:	42000204 	addi	r8,r8,8
 40081bc:	180b883a 	mov	r5,r3
 40081c0:	843ffc04 	addi	r16,r16,-16
 40081c4:	3c000d0e 	bge	r7,r16,40081fc <___vfiprintf_internal_r+0x5b4>
 40081c8:	10800404 	addi	r2,r2,16
 40081cc:	28c00044 	addi	r3,r5,1
 40081d0:	45c00015 	stw	r23,0(r8)
 40081d4:	41c00115 	stw	r7,4(r8)
 40081d8:	d8801c15 	stw	r2,112(sp)
 40081dc:	d8c01b15 	stw	r3,108(sp)
 40081e0:	68fff40e 	bge	r13,r3,40081b4 <__alt_data_end+0xfc0081b4>
 40081e4:	1002241e 	bne	r2,zero,4008a78 <___vfiprintf_internal_r+0xe30>
 40081e8:	843ffc04 	addi	r16,r16,-16
 40081ec:	01800044 	movi	r6,1
 40081f0:	000b883a 	mov	r5,zero
 40081f4:	d811883a 	mov	r8,sp
 40081f8:	3c3ff316 	blt	r7,r16,40081c8 <__alt_data_end+0xfc0081c8>
 40081fc:	da402517 	ldw	r9,148(sp)
 4008200:	e007883a 	mov	r3,fp
 4008204:	8039883a 	mov	fp,r16
 4008208:	1821883a 	mov	r16,r3
 400820c:	d8c02417 	ldw	r3,144(sp)
 4008210:	1705883a 	add	r2,r2,fp
 4008214:	47000115 	stw	fp,4(r8)
 4008218:	40c00015 	stw	r3,0(r8)
 400821c:	d8801c15 	stw	r2,112(sp)
 4008220:	d9801b15 	stw	r6,108(sp)
 4008224:	00c001c4 	movi	r3,7
 4008228:	19827616 	blt	r3,r6,4008c04 <___vfiprintf_internal_r+0xfbc>
 400822c:	4cf9c83a 	sub	fp,r9,r19
 4008230:	42000204 	addi	r8,r8,8
 4008234:	31000044 	addi	r4,r6,1
 4008238:	300b883a 	mov	r5,r6
 400823c:	07018516 	blt	zero,fp,4008854 <___vfiprintf_internal_r+0xc0c>
 4008240:	9885883a 	add	r2,r19,r2
 4008244:	45400015 	stw	r21,0(r8)
 4008248:	44c00115 	stw	r19,4(r8)
 400824c:	d8801c15 	stw	r2,112(sp)
 4008250:	d9001b15 	stw	r4,108(sp)
 4008254:	00c001c4 	movi	r3,7
 4008258:	1901dd0e 	bge	r3,r4,40089d0 <___vfiprintf_internal_r+0xd88>
 400825c:	1002401e 	bne	r2,zero,4008b60 <___vfiprintf_internal_r+0xf18>
 4008260:	d8001b15 	stw	zero,108(sp)
 4008264:	a2c0010c 	andi	r11,r20,4
 4008268:	58000226 	beq	r11,zero,4008274 <___vfiprintf_internal_r+0x62c>
 400826c:	8ca7c83a 	sub	r19,r17,r18
 4008270:	04c2f216 	blt	zero,r19,4008e3c <___vfiprintf_internal_r+0x11f4>
 4008274:	8c80010e 	bge	r17,r18,400827c <___vfiprintf_internal_r+0x634>
 4008278:	9023883a 	mov	r17,r18
 400827c:	da802317 	ldw	r10,140(sp)
 4008280:	5455883a 	add	r10,r10,r17
 4008284:	da802315 	stw	r10,140(sp)
 4008288:	d8001b15 	stw	zero,108(sp)
 400828c:	d811883a 	mov	r8,sp
 4008290:	003ea206 	br	4007d1c <__alt_data_end+0xfc007d1c>
 4008294:	a5000814 	ori	r20,r20,32
 4008298:	80c00007 	ldb	r3,0(r16)
 400829c:	003ec906 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 40082a0:	80c00007 	ldb	r3,0(r16)
 40082a4:	1b030926 	beq	r3,r12,4008ecc <___vfiprintf_internal_r+0x1284>
 40082a8:	a5000414 	ori	r20,r20,16
 40082ac:	003ec506 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 40082b0:	21003fcc 	andi	r4,r4,255
 40082b4:	20035e1e 	bne	r4,zero,4009030 <___vfiprintf_internal_r+0x13e8>
 40082b8:	a080080c 	andi	r2,r20,32
 40082bc:	1002a526 	beq	r2,zero,4008d54 <___vfiprintf_internal_r+0x110c>
 40082c0:	da802217 	ldw	r10,136(sp)
 40082c4:	50800017 	ldw	r2,0(r10)
 40082c8:	da802317 	ldw	r10,140(sp)
 40082cc:	5007d7fa 	srai	r3,r10,31
 40082d0:	da802217 	ldw	r10,136(sp)
 40082d4:	10c00115 	stw	r3,4(r2)
 40082d8:	52800104 	addi	r10,r10,4
 40082dc:	da802215 	stw	r10,136(sp)
 40082e0:	da802317 	ldw	r10,140(sp)
 40082e4:	12800015 	stw	r10,0(r2)
 40082e8:	003e8c06 	br	4007d1c <__alt_data_end+0xfc007d1c>
 40082ec:	21003fcc 	andi	r4,r4,255
 40082f0:	2003511e 	bne	r4,zero,4009038 <___vfiprintf_internal_r+0x13f0>
 40082f4:	a080080c 	andi	r2,r20,32
 40082f8:	1000a126 	beq	r2,zero,4008580 <___vfiprintf_internal_r+0x938>
 40082fc:	da802217 	ldw	r10,136(sp)
 4008300:	d8001d85 	stb	zero,118(sp)
 4008304:	50800204 	addi	r2,r10,8
 4008308:	54800017 	ldw	r18,0(r10)
 400830c:	54c00117 	ldw	r19,4(r10)
 4008310:	4802b416 	blt	r9,zero,4008de4 <___vfiprintf_internal_r+0x119c>
 4008314:	013fdfc4 	movi	r4,-129
 4008318:	94c6b03a 	or	r3,r18,r19
 400831c:	d8802215 	stw	r2,136(sp)
 4008320:	a128703a 	and	r20,r20,r4
 4008324:	1800a226 	beq	r3,zero,40085b0 <___vfiprintf_internal_r+0x968>
 4008328:	0039883a 	mov	fp,zero
 400832c:	dd401a04 	addi	r21,sp,104
 4008330:	9006d0fa 	srli	r3,r18,3
 4008334:	9808977a 	slli	r4,r19,29
 4008338:	9826d0fa 	srli	r19,r19,3
 400833c:	948001cc 	andi	r18,r18,7
 4008340:	90800c04 	addi	r2,r18,48
 4008344:	ad7fffc4 	addi	r21,r21,-1
 4008348:	20e4b03a 	or	r18,r4,r3
 400834c:	a8800005 	stb	r2,0(r21)
 4008350:	94c6b03a 	or	r3,r18,r19
 4008354:	183ff61e 	bne	r3,zero,4008330 <__alt_data_end+0xfc008330>
 4008358:	a0c0004c 	andi	r3,r20,1
 400835c:	18005926 	beq	r3,zero,40084c4 <___vfiprintf_internal_r+0x87c>
 4008360:	10803fcc 	andi	r2,r2,255
 4008364:	1080201c 	xori	r2,r2,128
 4008368:	10bfe004 	addi	r2,r2,-128
 400836c:	00c00c04 	movi	r3,48
 4008370:	10c05426 	beq	r2,r3,40084c4 <___vfiprintf_internal_r+0x87c>
 4008374:	da801e17 	ldw	r10,120(sp)
 4008378:	a8bfffc4 	addi	r2,r21,-1
 400837c:	a8ffffc5 	stb	r3,-1(r21)
 4008380:	50a7c83a 	sub	r19,r10,r2
 4008384:	102b883a 	mov	r21,r2
 4008388:	003f2f06 	br	4008048 <__alt_data_end+0xfc008048>
 400838c:	21003fcc 	andi	r4,r4,255
 4008390:	2003421e 	bne	r4,zero,400909c <___vfiprintf_internal_r+0x1454>
 4008394:	00810074 	movhi	r2,1025
 4008398:	1080b504 	addi	r2,r2,724
 400839c:	d8802615 	stw	r2,152(sp)
 40083a0:	a080080c 	andi	r2,r20,32
 40083a4:	1000aa26 	beq	r2,zero,4008650 <___vfiprintf_internal_r+0xa08>
 40083a8:	da802217 	ldw	r10,136(sp)
 40083ac:	54800017 	ldw	r18,0(r10)
 40083b0:	54c00117 	ldw	r19,4(r10)
 40083b4:	52800204 	addi	r10,r10,8
 40083b8:	da802215 	stw	r10,136(sp)
 40083bc:	a080004c 	andi	r2,r20,1
 40083c0:	1001d226 	beq	r2,zero,4008b0c <___vfiprintf_internal_r+0xec4>
 40083c4:	94c4b03a 	or	r2,r18,r19
 40083c8:	1002351e 	bne	r2,zero,4008ca0 <___vfiprintf_internal_r+0x1058>
 40083cc:	d8001d85 	stb	zero,118(sp)
 40083d0:	48022216 	blt	r9,zero,4008c5c <___vfiprintf_internal_r+0x1014>
 40083d4:	00bfdfc4 	movi	r2,-129
 40083d8:	a0a8703a 	and	r20,r20,r2
 40083dc:	003f1506 	br	4008034 <__alt_data_end+0xfc008034>
 40083e0:	da802217 	ldw	r10,136(sp)
 40083e4:	04800044 	movi	r18,1
 40083e8:	d8001d85 	stb	zero,118(sp)
 40083ec:	50800017 	ldw	r2,0(r10)
 40083f0:	52800104 	addi	r10,r10,4
 40083f4:	da802215 	stw	r10,136(sp)
 40083f8:	d8801005 	stb	r2,64(sp)
 40083fc:	9027883a 	mov	r19,r18
 4008400:	dd401004 	addi	r21,sp,64
 4008404:	0013883a 	mov	r9,zero
 4008408:	003f1706 	br	4008068 <__alt_data_end+0xfc008068>
 400840c:	21003fcc 	andi	r4,r4,255
 4008410:	2003201e 	bne	r4,zero,4009094 <___vfiprintf_internal_r+0x144c>
 4008414:	a080080c 	andi	r2,r20,32
 4008418:	10004b26 	beq	r2,zero,4008548 <___vfiprintf_internal_r+0x900>
 400841c:	da802217 	ldw	r10,136(sp)
 4008420:	50800117 	ldw	r2,4(r10)
 4008424:	54800017 	ldw	r18,0(r10)
 4008428:	52800204 	addi	r10,r10,8
 400842c:	da802215 	stw	r10,136(sp)
 4008430:	1027883a 	mov	r19,r2
 4008434:	10022c16 	blt	r2,zero,4008ce8 <___vfiprintf_internal_r+0x10a0>
 4008438:	df001d83 	ldbu	fp,118(sp)
 400843c:	48007216 	blt	r9,zero,4008608 <___vfiprintf_internal_r+0x9c0>
 4008440:	00ffdfc4 	movi	r3,-129
 4008444:	94c4b03a 	or	r2,r18,r19
 4008448:	a0e8703a 	and	r20,r20,r3
 400844c:	1000cc26 	beq	r2,zero,4008780 <___vfiprintf_internal_r+0xb38>
 4008450:	98021026 	beq	r19,zero,4008c94 <___vfiprintf_internal_r+0x104c>
 4008454:	dc402415 	stw	r17,144(sp)
 4008458:	dc002515 	stw	r16,148(sp)
 400845c:	9823883a 	mov	r17,r19
 4008460:	9021883a 	mov	r16,r18
 4008464:	dd401a04 	addi	r21,sp,104
 4008468:	4825883a 	mov	r18,r9
 400846c:	4027883a 	mov	r19,r8
 4008470:	8009883a 	mov	r4,r16
 4008474:	880b883a 	mov	r5,r17
 4008478:	01800284 	movi	r6,10
 400847c:	000f883a 	mov	r7,zero
 4008480:	400a92c0 	call	400a92c <__umoddi3>
 4008484:	10800c04 	addi	r2,r2,48
 4008488:	ad7fffc4 	addi	r21,r21,-1
 400848c:	8009883a 	mov	r4,r16
 4008490:	880b883a 	mov	r5,r17
 4008494:	a8800005 	stb	r2,0(r21)
 4008498:	01800284 	movi	r6,10
 400849c:	000f883a 	mov	r7,zero
 40084a0:	400a3b40 	call	400a3b4 <__udivdi3>
 40084a4:	1021883a 	mov	r16,r2
 40084a8:	10c4b03a 	or	r2,r2,r3
 40084ac:	1823883a 	mov	r17,r3
 40084b0:	103fef1e 	bne	r2,zero,4008470 <__alt_data_end+0xfc008470>
 40084b4:	dc402417 	ldw	r17,144(sp)
 40084b8:	dc002517 	ldw	r16,148(sp)
 40084bc:	9013883a 	mov	r9,r18
 40084c0:	9811883a 	mov	r8,r19
 40084c4:	da801e17 	ldw	r10,120(sp)
 40084c8:	5567c83a 	sub	r19,r10,r21
 40084cc:	003ede06 	br	4008048 <__alt_data_end+0xfc008048>
 40084d0:	38803fcc 	andi	r2,r7,255
 40084d4:	1080201c 	xori	r2,r2,128
 40084d8:	10bfe004 	addi	r2,r2,-128
 40084dc:	1002371e 	bne	r2,zero,4008dbc <___vfiprintf_internal_r+0x1174>
 40084e0:	01000044 	movi	r4,1
 40084e4:	01c00804 	movi	r7,32
 40084e8:	80c00007 	ldb	r3,0(r16)
 40084ec:	003e3506 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 40084f0:	a5000054 	ori	r20,r20,1
 40084f4:	80c00007 	ldb	r3,0(r16)
 40084f8:	003e3206 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 40084fc:	a5002014 	ori	r20,r20,128
 4008500:	80c00007 	ldb	r3,0(r16)
 4008504:	003e2f06 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 4008508:	8015883a 	mov	r10,r16
 400850c:	0023883a 	mov	r17,zero
 4008510:	18bff404 	addi	r2,r3,-48
 4008514:	50c00007 	ldb	r3,0(r10)
 4008518:	8c4002a4 	muli	r17,r17,10
 400851c:	84000044 	addi	r16,r16,1
 4008520:	8015883a 	mov	r10,r16
 4008524:	1463883a 	add	r17,r2,r17
 4008528:	18bff404 	addi	r2,r3,-48
 400852c:	30bff92e 	bgeu	r6,r2,4008514 <__alt_data_end+0xfc008514>
 4008530:	003e2506 	br	4007dc8 <__alt_data_end+0xfc007dc8>
 4008534:	21003fcc 	andi	r4,r4,255
 4008538:	2002d41e 	bne	r4,zero,400908c <___vfiprintf_internal_r+0x1444>
 400853c:	a5000414 	ori	r20,r20,16
 4008540:	a080080c 	andi	r2,r20,32
 4008544:	103fb51e 	bne	r2,zero,400841c <__alt_data_end+0xfc00841c>
 4008548:	a080040c 	andi	r2,r20,16
 400854c:	1001f826 	beq	r2,zero,4008d30 <___vfiprintf_internal_r+0x10e8>
 4008550:	da802217 	ldw	r10,136(sp)
 4008554:	54800017 	ldw	r18,0(r10)
 4008558:	52800104 	addi	r10,r10,4
 400855c:	da802215 	stw	r10,136(sp)
 4008560:	9027d7fa 	srai	r19,r18,31
 4008564:	9805883a 	mov	r2,r19
 4008568:	003fb206 	br	4008434 <__alt_data_end+0xfc008434>
 400856c:	21003fcc 	andi	r4,r4,255
 4008570:	2002c41e 	bne	r4,zero,4009084 <___vfiprintf_internal_r+0x143c>
 4008574:	a5000414 	ori	r20,r20,16
 4008578:	a080080c 	andi	r2,r20,32
 400857c:	103f5f1e 	bne	r2,zero,40082fc <__alt_data_end+0xfc0082fc>
 4008580:	a080040c 	andi	r2,r20,16
 4008584:	10020f26 	beq	r2,zero,4008dc4 <___vfiprintf_internal_r+0x117c>
 4008588:	da802217 	ldw	r10,136(sp)
 400858c:	d8001d85 	stb	zero,118(sp)
 4008590:	0027883a 	mov	r19,zero
 4008594:	50800104 	addi	r2,r10,4
 4008598:	54800017 	ldw	r18,0(r10)
 400859c:	48021116 	blt	r9,zero,4008de4 <___vfiprintf_internal_r+0x119c>
 40085a0:	00ffdfc4 	movi	r3,-129
 40085a4:	d8802215 	stw	r2,136(sp)
 40085a8:	a0e8703a 	and	r20,r20,r3
 40085ac:	903f5e1e 	bne	r18,zero,4008328 <__alt_data_end+0xfc008328>
 40085b0:	0039883a 	mov	fp,zero
 40085b4:	4802a626 	beq	r9,zero,4009050 <___vfiprintf_internal_r+0x1408>
 40085b8:	0025883a 	mov	r18,zero
 40085bc:	0027883a 	mov	r19,zero
 40085c0:	003f5a06 	br	400832c <__alt_data_end+0xfc00832c>
 40085c4:	21003fcc 	andi	r4,r4,255
 40085c8:	20029f1e 	bne	r4,zero,4009048 <___vfiprintf_internal_r+0x1400>
 40085cc:	a5000414 	ori	r20,r20,16
 40085d0:	a080080c 	andi	r2,r20,32
 40085d4:	10005e1e 	bne	r2,zero,4008750 <___vfiprintf_internal_r+0xb08>
 40085d8:	a080040c 	andi	r2,r20,16
 40085dc:	1001a21e 	bne	r2,zero,4008c68 <___vfiprintf_internal_r+0x1020>
 40085e0:	a080100c 	andi	r2,r20,64
 40085e4:	d8001d85 	stb	zero,118(sp)
 40085e8:	da802217 	ldw	r10,136(sp)
 40085ec:	1002231e 	bne	r2,zero,4008e7c <___vfiprintf_internal_r+0x1234>
 40085f0:	50800104 	addi	r2,r10,4
 40085f4:	54800017 	ldw	r18,0(r10)
 40085f8:	0027883a 	mov	r19,zero
 40085fc:	4801a00e 	bge	r9,zero,4008c80 <___vfiprintf_internal_r+0x1038>
 4008600:	d8802215 	stw	r2,136(sp)
 4008604:	0039883a 	mov	fp,zero
 4008608:	94c4b03a 	or	r2,r18,r19
 400860c:	103f901e 	bne	r2,zero,4008450 <__alt_data_end+0xfc008450>
 4008610:	00800044 	movi	r2,1
 4008614:	10803fcc 	andi	r2,r2,255
 4008618:	00c00044 	movi	r3,1
 400861c:	10c05926 	beq	r2,r3,4008784 <___vfiprintf_internal_r+0xb3c>
 4008620:	00c00084 	movi	r3,2
 4008624:	10ffe41e 	bne	r2,r3,40085b8 <__alt_data_end+0xfc0085b8>
 4008628:	0025883a 	mov	r18,zero
 400862c:	0027883a 	mov	r19,zero
 4008630:	00013d06 	br	4008b28 <___vfiprintf_internal_r+0xee0>
 4008634:	21003fcc 	andi	r4,r4,255
 4008638:	2002811e 	bne	r4,zero,4009040 <___vfiprintf_internal_r+0x13f8>
 400863c:	00810074 	movhi	r2,1025
 4008640:	1080b004 	addi	r2,r2,704
 4008644:	d8802615 	stw	r2,152(sp)
 4008648:	a080080c 	andi	r2,r20,32
 400864c:	103f561e 	bne	r2,zero,40083a8 <__alt_data_end+0xfc0083a8>
 4008650:	a080040c 	andi	r2,r20,16
 4008654:	1001d126 	beq	r2,zero,4008d9c <___vfiprintf_internal_r+0x1154>
 4008658:	da802217 	ldw	r10,136(sp)
 400865c:	0027883a 	mov	r19,zero
 4008660:	54800017 	ldw	r18,0(r10)
 4008664:	52800104 	addi	r10,r10,4
 4008668:	da802215 	stw	r10,136(sp)
 400866c:	003f5306 	br	40083bc <__alt_data_end+0xfc0083bc>
 4008670:	da802217 	ldw	r10,136(sp)
 4008674:	d8001d85 	stb	zero,118(sp)
 4008678:	55400017 	ldw	r21,0(r10)
 400867c:	50c00104 	addi	r3,r10,4
 4008680:	a8024226 	beq	r21,zero,4008f8c <___vfiprintf_internal_r+0x1344>
 4008684:	48021816 	blt	r9,zero,4008ee8 <___vfiprintf_internal_r+0x12a0>
 4008688:	480d883a 	mov	r6,r9
 400868c:	000b883a 	mov	r5,zero
 4008690:	a809883a 	mov	r4,r21
 4008694:	d8c02a15 	stw	r3,168(sp)
 4008698:	da002b15 	stw	r8,172(sp)
 400869c:	da402c15 	stw	r9,176(sp)
 40086a0:	40068380 	call	4006838 <memchr>
 40086a4:	d8c02a17 	ldw	r3,168(sp)
 40086a8:	da002b17 	ldw	r8,172(sp)
 40086ac:	da402c17 	ldw	r9,176(sp)
 40086b0:	10024826 	beq	r2,zero,4008fd4 <___vfiprintf_internal_r+0x138c>
 40086b4:	1567c83a 	sub	r19,r2,r21
 40086b8:	df001d83 	ldbu	fp,118(sp)
 40086bc:	d8c02215 	stw	r3,136(sp)
 40086c0:	0013883a 	mov	r9,zero
 40086c4:	003e6006 	br	4008048 <__alt_data_end+0xfc008048>
 40086c8:	21003fcc 	andi	r4,r4,255
 40086cc:	203fc026 	beq	r4,zero,40085d0 <__alt_data_end+0xfc0085d0>
 40086d0:	d9c01d85 	stb	r7,118(sp)
 40086d4:	003fbe06 	br	40085d0 <__alt_data_end+0xfc0085d0>
 40086d8:	da802217 	ldw	r10,136(sp)
 40086dc:	54400017 	ldw	r17,0(r10)
 40086e0:	50800104 	addi	r2,r10,4
 40086e4:	883e3b16 	blt	r17,zero,4007fd4 <__alt_data_end+0xfc007fd4>
 40086e8:	d8802215 	stw	r2,136(sp)
 40086ec:	80c00007 	ldb	r3,0(r16)
 40086f0:	003db406 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 40086f4:	01000044 	movi	r4,1
 40086f8:	01c00ac4 	movi	r7,43
 40086fc:	80c00007 	ldb	r3,0(r16)
 4008700:	003db006 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 4008704:	80c00007 	ldb	r3,0(r16)
 4008708:	82800044 	addi	r10,r16,1
 400870c:	1b423c26 	beq	r3,r13,4009000 <___vfiprintf_internal_r+0x13b8>
 4008710:	18bff404 	addi	r2,r3,-48
 4008714:	0013883a 	mov	r9,zero
 4008718:	30822b36 	bltu	r6,r2,4008fc8 <___vfiprintf_internal_r+0x1380>
 400871c:	50c00007 	ldb	r3,0(r10)
 4008720:	4a4002a4 	muli	r9,r9,10
 4008724:	54000044 	addi	r16,r10,1
 4008728:	8015883a 	mov	r10,r16
 400872c:	4893883a 	add	r9,r9,r2
 4008730:	18bff404 	addi	r2,r3,-48
 4008734:	30bff92e 	bgeu	r6,r2,400871c <__alt_data_end+0xfc00871c>
 4008738:	483da30e 	bge	r9,zero,4007dc8 <__alt_data_end+0xfc007dc8>
 400873c:	027fffc4 	movi	r9,-1
 4008740:	003da106 	br	4007dc8 <__alt_data_end+0xfc007dc8>
 4008744:	a5001014 	ori	r20,r20,64
 4008748:	80c00007 	ldb	r3,0(r16)
 400874c:	003d9d06 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 4008750:	da802217 	ldw	r10,136(sp)
 4008754:	d8001d85 	stb	zero,118(sp)
 4008758:	50c00204 	addi	r3,r10,8
 400875c:	54800017 	ldw	r18,0(r10)
 4008760:	54c00117 	ldw	r19,4(r10)
 4008764:	4801ca16 	blt	r9,zero,4008e90 <___vfiprintf_internal_r+0x1248>
 4008768:	013fdfc4 	movi	r4,-129
 400876c:	94c4b03a 	or	r2,r18,r19
 4008770:	d8c02215 	stw	r3,136(sp)
 4008774:	a128703a 	and	r20,r20,r4
 4008778:	0039883a 	mov	fp,zero
 400877c:	103f341e 	bne	r2,zero,4008450 <__alt_data_end+0xfc008450>
 4008780:	483e2e26 	beq	r9,zero,400803c <__alt_data_end+0xfc00803c>
 4008784:	0025883a 	mov	r18,zero
 4008788:	94800c04 	addi	r18,r18,48
 400878c:	dc8019c5 	stb	r18,103(sp)
 4008790:	dcc02717 	ldw	r19,156(sp)
 4008794:	dd4019c4 	addi	r21,sp,103
 4008798:	003e2b06 	br	4008048 <__alt_data_end+0xfc008048>
 400879c:	21003fcc 	andi	r4,r4,255
 40087a0:	2002361e 	bne	r4,zero,400907c <___vfiprintf_internal_r+0x1434>
 40087a4:	1801c126 	beq	r3,zero,4008eac <___vfiprintf_internal_r+0x1264>
 40087a8:	04800044 	movi	r18,1
 40087ac:	d8c01005 	stb	r3,64(sp)
 40087b0:	d8001d85 	stb	zero,118(sp)
 40087b4:	9027883a 	mov	r19,r18
 40087b8:	dd401004 	addi	r21,sp,64
 40087bc:	003f1106 	br	4008404 <__alt_data_end+0xfc008404>
 40087c0:	d9402117 	ldw	r5,132(sp)
 40087c4:	d9002017 	ldw	r4,128(sp)
 40087c8:	d9801a04 	addi	r6,sp,104
 40087cc:	d9c02b15 	stw	r7,172(sp)
 40087d0:	dbc02a15 	stw	r15,168(sp)
 40087d4:	4007b340 	call	4007b34 <__sprint_r.part.0>
 40087d8:	d9c02b17 	ldw	r7,172(sp)
 40087dc:	dbc02a17 	ldw	r15,168(sp)
 40087e0:	10006d1e 	bne	r2,zero,4008998 <___vfiprintf_internal_r+0xd50>
 40087e4:	d9801b17 	ldw	r6,108(sp)
 40087e8:	d8801c17 	ldw	r2,112(sp)
 40087ec:	d811883a 	mov	r8,sp
 40087f0:	31400044 	addi	r5,r6,1
 40087f4:	003e3306 	br	40080c4 <__alt_data_end+0xfc0080c4>
 40087f8:	d9401b17 	ldw	r5,108(sp)
 40087fc:	d8801c17 	ldw	r2,112(sp)
 4008800:	29000044 	addi	r4,r5,1
 4008804:	d8c01d87 	ldb	r3,118(sp)
 4008808:	183e4d26 	beq	r3,zero,4008140 <__alt_data_end+0xfc008140>
 400880c:	00c00044 	movi	r3,1
 4008810:	d9401d84 	addi	r5,sp,118
 4008814:	10c5883a 	add	r2,r2,r3
 4008818:	41400015 	stw	r5,0(r8)
 400881c:	40c00115 	stw	r3,4(r8)
 4008820:	d8801c15 	stw	r2,112(sp)
 4008824:	d9001b15 	stw	r4,108(sp)
 4008828:	014001c4 	movi	r5,7
 400882c:	2900a90e 	bge	r5,r4,4008ad4 <___vfiprintf_internal_r+0xe8c>
 4008830:	1000da1e 	bne	r2,zero,4008b9c <___vfiprintf_internal_r+0xf54>
 4008834:	7000ab1e 	bne	r14,zero,4008ae4 <___vfiprintf_internal_r+0xe9c>
 4008838:	000b883a 	mov	r5,zero
 400883c:	1809883a 	mov	r4,r3
 4008840:	d811883a 	mov	r8,sp
 4008844:	00c02004 	movi	r3,128
 4008848:	e0fe4d26 	beq	fp,r3,4008180 <__alt_data_end+0xfc008180>
 400884c:	4cf9c83a 	sub	fp,r9,r19
 4008850:	073e7b0e 	bge	zero,fp,4008240 <__alt_data_end+0xfc008240>
 4008854:	01c00404 	movi	r7,16
 4008858:	3f01900e 	bge	r7,fp,4008e9c <___vfiprintf_internal_r+0x1254>
 400885c:	00c10074 	movhi	r3,1025
 4008860:	18c1b504 	addi	r3,r3,1748
 4008864:	d8c02415 	stw	r3,144(sp)
 4008868:	034001c4 	movi	r13,7
 400886c:	00000506 	br	4008884 <___vfiprintf_internal_r+0xc3c>
 4008870:	29000084 	addi	r4,r5,2
 4008874:	42000204 	addi	r8,r8,8
 4008878:	180b883a 	mov	r5,r3
 400887c:	e73ffc04 	addi	fp,fp,-16
 4008880:	3f000d0e 	bge	r7,fp,40088b8 <___vfiprintf_internal_r+0xc70>
 4008884:	10800404 	addi	r2,r2,16
 4008888:	28c00044 	addi	r3,r5,1
 400888c:	45c00015 	stw	r23,0(r8)
 4008890:	41c00115 	stw	r7,4(r8)
 4008894:	d8801c15 	stw	r2,112(sp)
 4008898:	d8c01b15 	stw	r3,108(sp)
 400889c:	68fff40e 	bge	r13,r3,4008870 <__alt_data_end+0xfc008870>
 40088a0:	1000101e 	bne	r2,zero,40088e4 <___vfiprintf_internal_r+0xc9c>
 40088a4:	e73ffc04 	addi	fp,fp,-16
 40088a8:	01000044 	movi	r4,1
 40088ac:	000b883a 	mov	r5,zero
 40088b0:	d811883a 	mov	r8,sp
 40088b4:	3f3ff316 	blt	r7,fp,4008884 <__alt_data_end+0xfc008884>
 40088b8:	da802417 	ldw	r10,144(sp)
 40088bc:	1705883a 	add	r2,r2,fp
 40088c0:	47000115 	stw	fp,4(r8)
 40088c4:	42800015 	stw	r10,0(r8)
 40088c8:	d8801c15 	stw	r2,112(sp)
 40088cc:	d9001b15 	stw	r4,108(sp)
 40088d0:	00c001c4 	movi	r3,7
 40088d4:	19003616 	blt	r3,r4,40089b0 <___vfiprintf_internal_r+0xd68>
 40088d8:	42000204 	addi	r8,r8,8
 40088dc:	21000044 	addi	r4,r4,1
 40088e0:	003e5706 	br	4008240 <__alt_data_end+0xfc008240>
 40088e4:	d9402117 	ldw	r5,132(sp)
 40088e8:	d9002017 	ldw	r4,128(sp)
 40088ec:	d9801a04 	addi	r6,sp,104
 40088f0:	d9c02b15 	stw	r7,172(sp)
 40088f4:	db402a15 	stw	r13,168(sp)
 40088f8:	4007b340 	call	4007b34 <__sprint_r.part.0>
 40088fc:	d9c02b17 	ldw	r7,172(sp)
 4008900:	db402a17 	ldw	r13,168(sp)
 4008904:	1000241e 	bne	r2,zero,4008998 <___vfiprintf_internal_r+0xd50>
 4008908:	d9401b17 	ldw	r5,108(sp)
 400890c:	d8801c17 	ldw	r2,112(sp)
 4008910:	d811883a 	mov	r8,sp
 4008914:	29000044 	addi	r4,r5,1
 4008918:	003fd806 	br	400887c <__alt_data_end+0xfc00887c>
 400891c:	d9401b17 	ldw	r5,108(sp)
 4008920:	00c10074 	movhi	r3,1025
 4008924:	18c1b904 	addi	r3,r3,1764
 4008928:	d8c02415 	stw	r3,144(sp)
 400892c:	29400044 	addi	r5,r5,1
 4008930:	d8c02417 	ldw	r3,144(sp)
 4008934:	14c5883a 	add	r2,r2,r19
 4008938:	44c00115 	stw	r19,4(r8)
 400893c:	40c00015 	stw	r3,0(r8)
 4008940:	d8801c15 	stw	r2,112(sp)
 4008944:	d9401b15 	stw	r5,108(sp)
 4008948:	00c001c4 	movi	r3,7
 400894c:	1940070e 	bge	r3,r5,400896c <___vfiprintf_internal_r+0xd24>
 4008950:	103e4826 	beq	r2,zero,4008274 <__alt_data_end+0xfc008274>
 4008954:	d9402117 	ldw	r5,132(sp)
 4008958:	d9002017 	ldw	r4,128(sp)
 400895c:	d9801a04 	addi	r6,sp,104
 4008960:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008964:	10000c1e 	bne	r2,zero,4008998 <___vfiprintf_internal_r+0xd50>
 4008968:	d8801c17 	ldw	r2,112(sp)
 400896c:	8c80010e 	bge	r17,r18,4008974 <___vfiprintf_internal_r+0xd2c>
 4008970:	9023883a 	mov	r17,r18
 4008974:	da802317 	ldw	r10,140(sp)
 4008978:	5455883a 	add	r10,r10,r17
 400897c:	da802315 	stw	r10,140(sp)
 4008980:	103e4126 	beq	r2,zero,4008288 <__alt_data_end+0xfc008288>
 4008984:	d9402117 	ldw	r5,132(sp)
 4008988:	d9002017 	ldw	r4,128(sp)
 400898c:	d9801a04 	addi	r6,sp,104
 4008990:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008994:	103e3c26 	beq	r2,zero,4008288 <__alt_data_end+0xfc008288>
 4008998:	dd002117 	ldw	r20,132(sp)
 400899c:	a080030b 	ldhu	r2,12(r20)
 40089a0:	1080100c 	andi	r2,r2,64
 40089a4:	1001231e 	bne	r2,zero,4008e34 <___vfiprintf_internal_r+0x11ec>
 40089a8:	d8802317 	ldw	r2,140(sp)
 40089ac:	003d7b06 	br	4007f9c <__alt_data_end+0xfc007f9c>
 40089b0:	1000991e 	bne	r2,zero,4008c18 <___vfiprintf_internal_r+0xfd0>
 40089b4:	00c00044 	movi	r3,1
 40089b8:	9805883a 	mov	r2,r19
 40089bc:	dd400015 	stw	r21,0(sp)
 40089c0:	dcc00115 	stw	r19,4(sp)
 40089c4:	dcc01c15 	stw	r19,112(sp)
 40089c8:	d8c01b15 	stw	r3,108(sp)
 40089cc:	d811883a 	mov	r8,sp
 40089d0:	42000204 	addi	r8,r8,8
 40089d4:	a2c0010c 	andi	r11,r20,4
 40089d8:	583fe426 	beq	r11,zero,400896c <__alt_data_end+0xfc00896c>
 40089dc:	8ca7c83a 	sub	r19,r17,r18
 40089e0:	04ffe20e 	bge	zero,r19,400896c <__alt_data_end+0xfc00896c>
 40089e4:	01c00404 	movi	r7,16
 40089e8:	3cffcc0e 	bge	r7,r19,400891c <__alt_data_end+0xfc00891c>
 40089ec:	02810074 	movhi	r10,1025
 40089f0:	5281b904 	addi	r10,r10,1764
 40089f4:	d9001b17 	ldw	r4,108(sp)
 40089f8:	da802415 	stw	r10,144(sp)
 40089fc:	382b883a 	mov	r21,r7
 4008a00:	050001c4 	movi	r20,7
 4008a04:	df002017 	ldw	fp,128(sp)
 4008a08:	00000506 	br	4008a20 <___vfiprintf_internal_r+0xdd8>
 4008a0c:	21400084 	addi	r5,r4,2
 4008a10:	42000204 	addi	r8,r8,8
 4008a14:	1809883a 	mov	r4,r3
 4008a18:	9cfffc04 	addi	r19,r19,-16
 4008a1c:	acffc40e 	bge	r21,r19,4008930 <__alt_data_end+0xfc008930>
 4008a20:	10800404 	addi	r2,r2,16
 4008a24:	20c00044 	addi	r3,r4,1
 4008a28:	45800015 	stw	r22,0(r8)
 4008a2c:	45400115 	stw	r21,4(r8)
 4008a30:	d8801c15 	stw	r2,112(sp)
 4008a34:	d8c01b15 	stw	r3,108(sp)
 4008a38:	a0fff40e 	bge	r20,r3,4008a0c <__alt_data_end+0xfc008a0c>
 4008a3c:	1000041e 	bne	r2,zero,4008a50 <___vfiprintf_internal_r+0xe08>
 4008a40:	01400044 	movi	r5,1
 4008a44:	0009883a 	mov	r4,zero
 4008a48:	d811883a 	mov	r8,sp
 4008a4c:	003ff206 	br	4008a18 <__alt_data_end+0xfc008a18>
 4008a50:	d9402117 	ldw	r5,132(sp)
 4008a54:	d9801a04 	addi	r6,sp,104
 4008a58:	e009883a 	mov	r4,fp
 4008a5c:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008a60:	103fcd1e 	bne	r2,zero,4008998 <__alt_data_end+0xfc008998>
 4008a64:	d9001b17 	ldw	r4,108(sp)
 4008a68:	d8801c17 	ldw	r2,112(sp)
 4008a6c:	d811883a 	mov	r8,sp
 4008a70:	21400044 	addi	r5,r4,1
 4008a74:	003fe806 	br	4008a18 <__alt_data_end+0xfc008a18>
 4008a78:	d9402117 	ldw	r5,132(sp)
 4008a7c:	d9002017 	ldw	r4,128(sp)
 4008a80:	d9801a04 	addi	r6,sp,104
 4008a84:	d9c02b15 	stw	r7,172(sp)
 4008a88:	db402a15 	stw	r13,168(sp)
 4008a8c:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008a90:	d9c02b17 	ldw	r7,172(sp)
 4008a94:	db402a17 	ldw	r13,168(sp)
 4008a98:	103fbf1e 	bne	r2,zero,4008998 <__alt_data_end+0xfc008998>
 4008a9c:	d9401b17 	ldw	r5,108(sp)
 4008aa0:	d8801c17 	ldw	r2,112(sp)
 4008aa4:	d811883a 	mov	r8,sp
 4008aa8:	29800044 	addi	r6,r5,1
 4008aac:	003dc406 	br	40081c0 <__alt_data_end+0xfc0081c0>
 4008ab0:	1000d21e 	bne	r2,zero,4008dfc <___vfiprintf_internal_r+0x11b4>
 4008ab4:	d8c01d87 	ldb	r3,118(sp)
 4008ab8:	18009526 	beq	r3,zero,4008d10 <___vfiprintf_internal_r+0x10c8>
 4008abc:	00800044 	movi	r2,1
 4008ac0:	d8c01d84 	addi	r3,sp,118
 4008ac4:	1009883a 	mov	r4,r2
 4008ac8:	d8c00015 	stw	r3,0(sp)
 4008acc:	d8800115 	stw	r2,4(sp)
 4008ad0:	d811883a 	mov	r8,sp
 4008ad4:	200b883a 	mov	r5,r4
 4008ad8:	42000204 	addi	r8,r8,8
 4008adc:	21000044 	addi	r4,r4,1
 4008ae0:	003d9706 	br	4008140 <__alt_data_end+0xfc008140>
 4008ae4:	d9001d04 	addi	r4,sp,116
 4008ae8:	00800084 	movi	r2,2
 4008aec:	d9000015 	stw	r4,0(sp)
 4008af0:	d8800115 	stw	r2,4(sp)
 4008af4:	1809883a 	mov	r4,r3
 4008af8:	d811883a 	mov	r8,sp
 4008afc:	200b883a 	mov	r5,r4
 4008b00:	42000204 	addi	r8,r8,8
 4008b04:	21000044 	addi	r4,r4,1
 4008b08:	003f4e06 	br	4008844 <__alt_data_end+0xfc008844>
 4008b0c:	d8001d85 	stb	zero,118(sp)
 4008b10:	48005016 	blt	r9,zero,4008c54 <___vfiprintf_internal_r+0x100c>
 4008b14:	00ffdfc4 	movi	r3,-129
 4008b18:	94c4b03a 	or	r2,r18,r19
 4008b1c:	a0e8703a 	and	r20,r20,r3
 4008b20:	103d4426 	beq	r2,zero,4008034 <__alt_data_end+0xfc008034>
 4008b24:	0039883a 	mov	fp,zero
 4008b28:	d9002617 	ldw	r4,152(sp)
 4008b2c:	dd401a04 	addi	r21,sp,104
 4008b30:	908003cc 	andi	r2,r18,15
 4008b34:	9806973a 	slli	r3,r19,28
 4008b38:	2085883a 	add	r2,r4,r2
 4008b3c:	9024d13a 	srli	r18,r18,4
 4008b40:	10800003 	ldbu	r2,0(r2)
 4008b44:	9826d13a 	srli	r19,r19,4
 4008b48:	ad7fffc4 	addi	r21,r21,-1
 4008b4c:	1ca4b03a 	or	r18,r3,r18
 4008b50:	a8800005 	stb	r2,0(r21)
 4008b54:	94c4b03a 	or	r2,r18,r19
 4008b58:	103ff51e 	bne	r2,zero,4008b30 <__alt_data_end+0xfc008b30>
 4008b5c:	003e5906 	br	40084c4 <__alt_data_end+0xfc0084c4>
 4008b60:	d9402117 	ldw	r5,132(sp)
 4008b64:	d9002017 	ldw	r4,128(sp)
 4008b68:	d9801a04 	addi	r6,sp,104
 4008b6c:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008b70:	103f891e 	bne	r2,zero,4008998 <__alt_data_end+0xfc008998>
 4008b74:	d8801c17 	ldw	r2,112(sp)
 4008b78:	d811883a 	mov	r8,sp
 4008b7c:	003f9506 	br	40089d4 <__alt_data_end+0xfc0089d4>
 4008b80:	d9402117 	ldw	r5,132(sp)
 4008b84:	d9002017 	ldw	r4,128(sp)
 4008b88:	d9801a04 	addi	r6,sp,104
 4008b8c:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008b90:	103f811e 	bne	r2,zero,4008998 <__alt_data_end+0xfc008998>
 4008b94:	d811883a 	mov	r8,sp
 4008b98:	003ced06 	br	4007f50 <__alt_data_end+0xfc007f50>
 4008b9c:	d9402117 	ldw	r5,132(sp)
 4008ba0:	d9002017 	ldw	r4,128(sp)
 4008ba4:	d9801a04 	addi	r6,sp,104
 4008ba8:	da402c15 	stw	r9,176(sp)
 4008bac:	db802a15 	stw	r14,168(sp)
 4008bb0:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008bb4:	da402c17 	ldw	r9,176(sp)
 4008bb8:	db802a17 	ldw	r14,168(sp)
 4008bbc:	103f761e 	bne	r2,zero,4008998 <__alt_data_end+0xfc008998>
 4008bc0:	d9401b17 	ldw	r5,108(sp)
 4008bc4:	d8801c17 	ldw	r2,112(sp)
 4008bc8:	d811883a 	mov	r8,sp
 4008bcc:	29000044 	addi	r4,r5,1
 4008bd0:	003d5b06 	br	4008140 <__alt_data_end+0xfc008140>
 4008bd4:	d9402117 	ldw	r5,132(sp)
 4008bd8:	d9002017 	ldw	r4,128(sp)
 4008bdc:	d9801a04 	addi	r6,sp,104
 4008be0:	da402c15 	stw	r9,176(sp)
 4008be4:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008be8:	da402c17 	ldw	r9,176(sp)
 4008bec:	103f6a1e 	bne	r2,zero,4008998 <__alt_data_end+0xfc008998>
 4008bf0:	d9401b17 	ldw	r5,108(sp)
 4008bf4:	d8801c17 	ldw	r2,112(sp)
 4008bf8:	d811883a 	mov	r8,sp
 4008bfc:	29000044 	addi	r4,r5,1
 4008c00:	003f1006 	br	4008844 <__alt_data_end+0xfc008844>
 4008c04:	1000c31e 	bne	r2,zero,4008f14 <___vfiprintf_internal_r+0x12cc>
 4008c08:	01000044 	movi	r4,1
 4008c0c:	000b883a 	mov	r5,zero
 4008c10:	d811883a 	mov	r8,sp
 4008c14:	003f0d06 	br	400884c <__alt_data_end+0xfc00884c>
 4008c18:	d9402117 	ldw	r5,132(sp)
 4008c1c:	d9002017 	ldw	r4,128(sp)
 4008c20:	d9801a04 	addi	r6,sp,104
 4008c24:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008c28:	103f5b1e 	bne	r2,zero,4008998 <__alt_data_end+0xfc008998>
 4008c2c:	d9001b17 	ldw	r4,108(sp)
 4008c30:	d8801c17 	ldw	r2,112(sp)
 4008c34:	d811883a 	mov	r8,sp
 4008c38:	21000044 	addi	r4,r4,1
 4008c3c:	003d8006 	br	4008240 <__alt_data_end+0xfc008240>
 4008c40:	01010074 	movhi	r4,1025
 4008c44:	2100b504 	addi	r4,r4,724
 4008c48:	d9002615 	stw	r4,152(sp)
 4008c4c:	d8c02215 	stw	r3,136(sp)
 4008c50:	1029883a 	mov	r20,r2
 4008c54:	94c4b03a 	or	r2,r18,r19
 4008c58:	103fb21e 	bne	r2,zero,4008b24 <__alt_data_end+0xfc008b24>
 4008c5c:	0039883a 	mov	fp,zero
 4008c60:	00800084 	movi	r2,2
 4008c64:	003e6b06 	br	4008614 <__alt_data_end+0xfc008614>
 4008c68:	da802217 	ldw	r10,136(sp)
 4008c6c:	d8001d85 	stb	zero,118(sp)
 4008c70:	0027883a 	mov	r19,zero
 4008c74:	50800104 	addi	r2,r10,4
 4008c78:	54800017 	ldw	r18,0(r10)
 4008c7c:	483e6016 	blt	r9,zero,4008600 <__alt_data_end+0xfc008600>
 4008c80:	00ffdfc4 	movi	r3,-129
 4008c84:	d8802215 	stw	r2,136(sp)
 4008c88:	a0e8703a 	and	r20,r20,r3
 4008c8c:	0039883a 	mov	fp,zero
 4008c90:	903ebb26 	beq	r18,zero,4008780 <__alt_data_end+0xfc008780>
 4008c94:	00800244 	movi	r2,9
 4008c98:	14bdee36 	bltu	r2,r18,4008454 <__alt_data_end+0xfc008454>
 4008c9c:	003eba06 	br	4008788 <__alt_data_end+0xfc008788>
 4008ca0:	00800c04 	movi	r2,48
 4008ca4:	d8c01d45 	stb	r3,117(sp)
 4008ca8:	d8801d05 	stb	r2,116(sp)
 4008cac:	d8001d85 	stb	zero,118(sp)
 4008cb0:	a0c00094 	ori	r3,r20,2
 4008cb4:	4800a916 	blt	r9,zero,4008f5c <___vfiprintf_internal_r+0x1314>
 4008cb8:	00bfdfc4 	movi	r2,-129
 4008cbc:	a096703a 	and	r11,r20,r2
 4008cc0:	5d000094 	ori	r20,r11,2
 4008cc4:	0039883a 	mov	fp,zero
 4008cc8:	003f9706 	br	4008b28 <__alt_data_end+0xfc008b28>
 4008ccc:	8025883a 	mov	r18,r16
 4008cd0:	003c2e06 	br	4007d8c <__alt_data_end+0xfc007d8c>
 4008cd4:	00810074 	movhi	r2,1025
 4008cd8:	1080b504 	addi	r2,r2,724
 4008cdc:	0039883a 	mov	fp,zero
 4008ce0:	d8802615 	stw	r2,152(sp)
 4008ce4:	003f9006 	br	4008b28 <__alt_data_end+0xfc008b28>
 4008ce8:	04a5c83a 	sub	r18,zero,r18
 4008cec:	07000b44 	movi	fp,45
 4008cf0:	9004c03a 	cmpne	r2,r18,zero
 4008cf4:	04e7c83a 	sub	r19,zero,r19
 4008cf8:	df001d85 	stb	fp,118(sp)
 4008cfc:	98a7c83a 	sub	r19,r19,r2
 4008d00:	48009f16 	blt	r9,zero,4008f80 <___vfiprintf_internal_r+0x1338>
 4008d04:	00bfdfc4 	movi	r2,-129
 4008d08:	a0a8703a 	and	r20,r20,r2
 4008d0c:	003dd006 	br	4008450 <__alt_data_end+0xfc008450>
 4008d10:	70004c26 	beq	r14,zero,4008e44 <___vfiprintf_internal_r+0x11fc>
 4008d14:	00800084 	movi	r2,2
 4008d18:	d8c01d04 	addi	r3,sp,116
 4008d1c:	d8c00015 	stw	r3,0(sp)
 4008d20:	d8800115 	stw	r2,4(sp)
 4008d24:	01000044 	movi	r4,1
 4008d28:	d811883a 	mov	r8,sp
 4008d2c:	003f7306 	br	4008afc <__alt_data_end+0xfc008afc>
 4008d30:	a080100c 	andi	r2,r20,64
 4008d34:	da802217 	ldw	r10,136(sp)
 4008d38:	103e0626 	beq	r2,zero,4008554 <__alt_data_end+0xfc008554>
 4008d3c:	5480000f 	ldh	r18,0(r10)
 4008d40:	52800104 	addi	r10,r10,4
 4008d44:	da802215 	stw	r10,136(sp)
 4008d48:	9027d7fa 	srai	r19,r18,31
 4008d4c:	9805883a 	mov	r2,r19
 4008d50:	003db806 	br	4008434 <__alt_data_end+0xfc008434>
 4008d54:	a080040c 	andi	r2,r20,16
 4008d58:	1000091e 	bne	r2,zero,4008d80 <___vfiprintf_internal_r+0x1138>
 4008d5c:	a2c0100c 	andi	r11,r20,64
 4008d60:	58000726 	beq	r11,zero,4008d80 <___vfiprintf_internal_r+0x1138>
 4008d64:	da802217 	ldw	r10,136(sp)
 4008d68:	50800017 	ldw	r2,0(r10)
 4008d6c:	52800104 	addi	r10,r10,4
 4008d70:	da802215 	stw	r10,136(sp)
 4008d74:	da802317 	ldw	r10,140(sp)
 4008d78:	1280000d 	sth	r10,0(r2)
 4008d7c:	003be706 	br	4007d1c <__alt_data_end+0xfc007d1c>
 4008d80:	da802217 	ldw	r10,136(sp)
 4008d84:	50800017 	ldw	r2,0(r10)
 4008d88:	52800104 	addi	r10,r10,4
 4008d8c:	da802215 	stw	r10,136(sp)
 4008d90:	da802317 	ldw	r10,140(sp)
 4008d94:	12800015 	stw	r10,0(r2)
 4008d98:	003be006 	br	4007d1c <__alt_data_end+0xfc007d1c>
 4008d9c:	a080100c 	andi	r2,r20,64
 4008da0:	da802217 	ldw	r10,136(sp)
 4008da4:	10003026 	beq	r2,zero,4008e68 <___vfiprintf_internal_r+0x1220>
 4008da8:	5480000b 	ldhu	r18,0(r10)
 4008dac:	52800104 	addi	r10,r10,4
 4008db0:	0027883a 	mov	r19,zero
 4008db4:	da802215 	stw	r10,136(sp)
 4008db8:	003d8006 	br	40083bc <__alt_data_end+0xfc0083bc>
 4008dbc:	80c00007 	ldb	r3,0(r16)
 4008dc0:	003c0006 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 4008dc4:	a080100c 	andi	r2,r20,64
 4008dc8:	d8001d85 	stb	zero,118(sp)
 4008dcc:	da802217 	ldw	r10,136(sp)
 4008dd0:	1000201e 	bne	r2,zero,4008e54 <___vfiprintf_internal_r+0x120c>
 4008dd4:	50800104 	addi	r2,r10,4
 4008dd8:	54800017 	ldw	r18,0(r10)
 4008ddc:	0027883a 	mov	r19,zero
 4008de0:	483def0e 	bge	r9,zero,40085a0 <__alt_data_end+0xfc0085a0>
 4008de4:	94c6b03a 	or	r3,r18,r19
 4008de8:	d8802215 	stw	r2,136(sp)
 4008dec:	183d4e1e 	bne	r3,zero,4008328 <__alt_data_end+0xfc008328>
 4008df0:	0039883a 	mov	fp,zero
 4008df4:	0005883a 	mov	r2,zero
 4008df8:	003e0606 	br	4008614 <__alt_data_end+0xfc008614>
 4008dfc:	d9402117 	ldw	r5,132(sp)
 4008e00:	d9002017 	ldw	r4,128(sp)
 4008e04:	d9801a04 	addi	r6,sp,104
 4008e08:	da402c15 	stw	r9,176(sp)
 4008e0c:	db802a15 	stw	r14,168(sp)
 4008e10:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008e14:	da402c17 	ldw	r9,176(sp)
 4008e18:	db802a17 	ldw	r14,168(sp)
 4008e1c:	103ede1e 	bne	r2,zero,4008998 <__alt_data_end+0xfc008998>
 4008e20:	d9401b17 	ldw	r5,108(sp)
 4008e24:	d8801c17 	ldw	r2,112(sp)
 4008e28:	d811883a 	mov	r8,sp
 4008e2c:	29000044 	addi	r4,r5,1
 4008e30:	003e7406 	br	4008804 <__alt_data_end+0xfc008804>
 4008e34:	00bfffc4 	movi	r2,-1
 4008e38:	003c5806 	br	4007f9c <__alt_data_end+0xfc007f9c>
 4008e3c:	d811883a 	mov	r8,sp
 4008e40:	003ee806 	br	40089e4 <__alt_data_end+0xfc0089e4>
 4008e44:	000b883a 	mov	r5,zero
 4008e48:	01000044 	movi	r4,1
 4008e4c:	d811883a 	mov	r8,sp
 4008e50:	003e7c06 	br	4008844 <__alt_data_end+0xfc008844>
 4008e54:	50800104 	addi	r2,r10,4
 4008e58:	5480000b 	ldhu	r18,0(r10)
 4008e5c:	0027883a 	mov	r19,zero
 4008e60:	483dcf0e 	bge	r9,zero,40085a0 <__alt_data_end+0xfc0085a0>
 4008e64:	003fdf06 	br	4008de4 <__alt_data_end+0xfc008de4>
 4008e68:	54800017 	ldw	r18,0(r10)
 4008e6c:	52800104 	addi	r10,r10,4
 4008e70:	0027883a 	mov	r19,zero
 4008e74:	da802215 	stw	r10,136(sp)
 4008e78:	003d5006 	br	40083bc <__alt_data_end+0xfc0083bc>
 4008e7c:	50800104 	addi	r2,r10,4
 4008e80:	5480000b 	ldhu	r18,0(r10)
 4008e84:	0027883a 	mov	r19,zero
 4008e88:	483f7d0e 	bge	r9,zero,4008c80 <__alt_data_end+0xfc008c80>
 4008e8c:	003ddc06 	br	4008600 <__alt_data_end+0xfc008600>
 4008e90:	d8c02215 	stw	r3,136(sp)
 4008e94:	0039883a 	mov	fp,zero
 4008e98:	003ddb06 	br	4008608 <__alt_data_end+0xfc008608>
 4008e9c:	02810074 	movhi	r10,1025
 4008ea0:	5281b504 	addi	r10,r10,1748
 4008ea4:	da802415 	stw	r10,144(sp)
 4008ea8:	003e8306 	br	40088b8 <__alt_data_end+0xfc0088b8>
 4008eac:	d8801c17 	ldw	r2,112(sp)
 4008eb0:	dd002117 	ldw	r20,132(sp)
 4008eb4:	103eb926 	beq	r2,zero,400899c <__alt_data_end+0xfc00899c>
 4008eb8:	d9002017 	ldw	r4,128(sp)
 4008ebc:	d9801a04 	addi	r6,sp,104
 4008ec0:	a00b883a 	mov	r5,r20
 4008ec4:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008ec8:	003eb406 	br	400899c <__alt_data_end+0xfc00899c>
 4008ecc:	80c00043 	ldbu	r3,1(r16)
 4008ed0:	a5000814 	ori	r20,r20,32
 4008ed4:	84000044 	addi	r16,r16,1
 4008ed8:	18c03fcc 	andi	r3,r3,255
 4008edc:	18c0201c 	xori	r3,r3,128
 4008ee0:	18ffe004 	addi	r3,r3,-128
 4008ee4:	003bb706 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 4008ee8:	a809883a 	mov	r4,r21
 4008eec:	d8c02a15 	stw	r3,168(sp)
 4008ef0:	da002b15 	stw	r8,172(sp)
 4008ef4:	40024f40 	call	40024f4 <strlen>
 4008ef8:	d8c02a17 	ldw	r3,168(sp)
 4008efc:	1027883a 	mov	r19,r2
 4008f00:	df001d83 	ldbu	fp,118(sp)
 4008f04:	d8c02215 	stw	r3,136(sp)
 4008f08:	0013883a 	mov	r9,zero
 4008f0c:	da002b17 	ldw	r8,172(sp)
 4008f10:	003c4d06 	br	4008048 <__alt_data_end+0xfc008048>
 4008f14:	d9402117 	ldw	r5,132(sp)
 4008f18:	d9002017 	ldw	r4,128(sp)
 4008f1c:	d9801a04 	addi	r6,sp,104
 4008f20:	da402c15 	stw	r9,176(sp)
 4008f24:	4007b340 	call	4007b34 <__sprint_r.part.0>
 4008f28:	da402c17 	ldw	r9,176(sp)
 4008f2c:	103e9a1e 	bne	r2,zero,4008998 <__alt_data_end+0xfc008998>
 4008f30:	d9401b17 	ldw	r5,108(sp)
 4008f34:	d8801c17 	ldw	r2,112(sp)
 4008f38:	d811883a 	mov	r8,sp
 4008f3c:	29000044 	addi	r4,r5,1
 4008f40:	003e4206 	br	400884c <__alt_data_end+0xfc00884c>
 4008f44:	d9401b17 	ldw	r5,108(sp)
 4008f48:	01010074 	movhi	r4,1025
 4008f4c:	2101b904 	addi	r4,r4,1764
 4008f50:	d9002415 	stw	r4,144(sp)
 4008f54:	29400044 	addi	r5,r5,1
 4008f58:	003c6d06 	br	4008110 <__alt_data_end+0xfc008110>
 4008f5c:	0039883a 	mov	fp,zero
 4008f60:	00800084 	movi	r2,2
 4008f64:	10803fcc 	andi	r2,r2,255
 4008f68:	01000044 	movi	r4,1
 4008f6c:	11001e26 	beq	r2,r4,4008fe8 <___vfiprintf_internal_r+0x13a0>
 4008f70:	01000084 	movi	r4,2
 4008f74:	11001e1e 	bne	r2,r4,4008ff0 <___vfiprintf_internal_r+0x13a8>
 4008f78:	1829883a 	mov	r20,r3
 4008f7c:	003eea06 	br	4008b28 <__alt_data_end+0xfc008b28>
 4008f80:	a007883a 	mov	r3,r20
 4008f84:	00800044 	movi	r2,1
 4008f88:	003ff606 	br	4008f64 <__alt_data_end+0xfc008f64>
 4008f8c:	00800184 	movi	r2,6
 4008f90:	1240012e 	bgeu	r2,r9,4008f98 <___vfiprintf_internal_r+0x1350>
 4008f94:	1013883a 	mov	r9,r2
 4008f98:	4827883a 	mov	r19,r9
 4008f9c:	4825883a 	mov	r18,r9
 4008fa0:	48001516 	blt	r9,zero,4008ff8 <___vfiprintf_internal_r+0x13b0>
 4008fa4:	05410074 	movhi	r21,1025
 4008fa8:	d8c02215 	stw	r3,136(sp)
 4008fac:	ad40ba04 	addi	r21,r21,744
 4008fb0:	003d1406 	br	4008404 <__alt_data_end+0xfc008404>
 4008fb4:	02810074 	movhi	r10,1025
 4008fb8:	5281b504 	addi	r10,r10,1748
 4008fbc:	da802415 	stw	r10,144(sp)
 4008fc0:	200d883a 	mov	r6,r4
 4008fc4:	003c9106 	br	400820c <__alt_data_end+0xfc00820c>
 4008fc8:	5021883a 	mov	r16,r10
 4008fcc:	0013883a 	mov	r9,zero
 4008fd0:	003b7d06 	br	4007dc8 <__alt_data_end+0xfc007dc8>
 4008fd4:	4827883a 	mov	r19,r9
 4008fd8:	df001d83 	ldbu	fp,118(sp)
 4008fdc:	d8c02215 	stw	r3,136(sp)
 4008fe0:	0013883a 	mov	r9,zero
 4008fe4:	003c1806 	br	4008048 <__alt_data_end+0xfc008048>
 4008fe8:	1829883a 	mov	r20,r3
 4008fec:	003d1806 	br	4008450 <__alt_data_end+0xfc008450>
 4008ff0:	1829883a 	mov	r20,r3
 4008ff4:	003ccd06 	br	400832c <__alt_data_end+0xfc00832c>
 4008ff8:	0025883a 	mov	r18,zero
 4008ffc:	003fe906 	br	4008fa4 <__alt_data_end+0xfc008fa4>
 4009000:	d8802217 	ldw	r2,136(sp)
 4009004:	80c00043 	ldbu	r3,1(r16)
 4009008:	5021883a 	mov	r16,r10
 400900c:	12400017 	ldw	r9,0(r2)
 4009010:	10800104 	addi	r2,r2,4
 4009014:	d8802215 	stw	r2,136(sp)
 4009018:	483faf0e 	bge	r9,zero,4008ed8 <__alt_data_end+0xfc008ed8>
 400901c:	18c03fcc 	andi	r3,r3,255
 4009020:	18c0201c 	xori	r3,r3,128
 4009024:	027fffc4 	movi	r9,-1
 4009028:	18ffe004 	addi	r3,r3,-128
 400902c:	003b6506 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 4009030:	d9c01d85 	stb	r7,118(sp)
 4009034:	003ca006 	br	40082b8 <__alt_data_end+0xfc0082b8>
 4009038:	d9c01d85 	stb	r7,118(sp)
 400903c:	003cad06 	br	40082f4 <__alt_data_end+0xfc0082f4>
 4009040:	d9c01d85 	stb	r7,118(sp)
 4009044:	003d7d06 	br	400863c <__alt_data_end+0xfc00863c>
 4009048:	d9c01d85 	stb	r7,118(sp)
 400904c:	003d5f06 	br	40085cc <__alt_data_end+0xfc0085cc>
 4009050:	a080004c 	andi	r2,r20,1
 4009054:	0039883a 	mov	fp,zero
 4009058:	10000526 	beq	r2,zero,4009070 <___vfiprintf_internal_r+0x1428>
 400905c:	00800c04 	movi	r2,48
 4009060:	d88019c5 	stb	r2,103(sp)
 4009064:	dcc02717 	ldw	r19,156(sp)
 4009068:	dd4019c4 	addi	r21,sp,103
 400906c:	003bf606 	br	4008048 <__alt_data_end+0xfc008048>
 4009070:	0027883a 	mov	r19,zero
 4009074:	dd401a04 	addi	r21,sp,104
 4009078:	003bf306 	br	4008048 <__alt_data_end+0xfc008048>
 400907c:	d9c01d85 	stb	r7,118(sp)
 4009080:	003dc806 	br	40087a4 <__alt_data_end+0xfc0087a4>
 4009084:	d9c01d85 	stb	r7,118(sp)
 4009088:	003d3a06 	br	4008574 <__alt_data_end+0xfc008574>
 400908c:	d9c01d85 	stb	r7,118(sp)
 4009090:	003d2a06 	br	400853c <__alt_data_end+0xfc00853c>
 4009094:	d9c01d85 	stb	r7,118(sp)
 4009098:	003cde06 	br	4008414 <__alt_data_end+0xfc008414>
 400909c:	d9c01d85 	stb	r7,118(sp)
 40090a0:	003cbc06 	br	4008394 <__alt_data_end+0xfc008394>

040090a4 <__vfiprintf_internal>:
 40090a4:	00810074 	movhi	r2,1025
 40090a8:	1088c504 	addi	r2,r2,8980
 40090ac:	300f883a 	mov	r7,r6
 40090b0:	280d883a 	mov	r6,r5
 40090b4:	200b883a 	mov	r5,r4
 40090b8:	11000017 	ldw	r4,0(r2)
 40090bc:	4007c481 	jmpi	4007c48 <___vfiprintf_internal_r>

040090c0 <__sbprintf>:
 40090c0:	2880030b 	ldhu	r2,12(r5)
 40090c4:	2ac01917 	ldw	r11,100(r5)
 40090c8:	2a80038b 	ldhu	r10,14(r5)
 40090cc:	2a400717 	ldw	r9,28(r5)
 40090d0:	2a000917 	ldw	r8,36(r5)
 40090d4:	defee204 	addi	sp,sp,-1144
 40090d8:	00c10004 	movi	r3,1024
 40090dc:	dc011a15 	stw	r16,1128(sp)
 40090e0:	10bfff4c 	andi	r2,r2,65533
 40090e4:	2821883a 	mov	r16,r5
 40090e8:	d8cb883a 	add	r5,sp,r3
 40090ec:	dc811c15 	stw	r18,1136(sp)
 40090f0:	dc411b15 	stw	r17,1132(sp)
 40090f4:	dfc11d15 	stw	ra,1140(sp)
 40090f8:	2025883a 	mov	r18,r4
 40090fc:	d881030d 	sth	r2,1036(sp)
 4009100:	dac11915 	stw	r11,1124(sp)
 4009104:	da81038d 	sth	r10,1038(sp)
 4009108:	da410715 	stw	r9,1052(sp)
 400910c:	da010915 	stw	r8,1060(sp)
 4009110:	dec10015 	stw	sp,1024(sp)
 4009114:	dec10415 	stw	sp,1040(sp)
 4009118:	d8c10215 	stw	r3,1032(sp)
 400911c:	d8c10515 	stw	r3,1044(sp)
 4009120:	d8010615 	stw	zero,1048(sp)
 4009124:	4007c480 	call	4007c48 <___vfiprintf_internal_r>
 4009128:	1023883a 	mov	r17,r2
 400912c:	10000416 	blt	r2,zero,4009140 <__sbprintf+0x80>
 4009130:	d9410004 	addi	r5,sp,1024
 4009134:	9009883a 	mov	r4,r18
 4009138:	4000e700 	call	4000e70 <_fflush_r>
 400913c:	10000d1e 	bne	r2,zero,4009174 <__sbprintf+0xb4>
 4009140:	d881030b 	ldhu	r2,1036(sp)
 4009144:	1080100c 	andi	r2,r2,64
 4009148:	10000326 	beq	r2,zero,4009158 <__sbprintf+0x98>
 400914c:	8080030b 	ldhu	r2,12(r16)
 4009150:	10801014 	ori	r2,r2,64
 4009154:	8080030d 	sth	r2,12(r16)
 4009158:	8805883a 	mov	r2,r17
 400915c:	dfc11d17 	ldw	ra,1140(sp)
 4009160:	dc811c17 	ldw	r18,1136(sp)
 4009164:	dc411b17 	ldw	r17,1132(sp)
 4009168:	dc011a17 	ldw	r16,1128(sp)
 400916c:	dec11e04 	addi	sp,sp,1144
 4009170:	f800283a 	ret
 4009174:	047fffc4 	movi	r17,-1
 4009178:	003ff106 	br	4009140 <__alt_data_end+0xfc009140>

0400917c <_calloc_r>:
 400917c:	298b383a 	mul	r5,r5,r6
 4009180:	defffe04 	addi	sp,sp,-8
 4009184:	dfc00115 	stw	ra,4(sp)
 4009188:	dc000015 	stw	r16,0(sp)
 400918c:	40018580 	call	4001858 <_malloc_r>
 4009190:	10002926 	beq	r2,zero,4009238 <_calloc_r+0xbc>
 4009194:	11bfff17 	ldw	r6,-4(r2)
 4009198:	1021883a 	mov	r16,r2
 400919c:	00bfff04 	movi	r2,-4
 40091a0:	308c703a 	and	r6,r6,r2
 40091a4:	00c00904 	movi	r3,36
 40091a8:	308d883a 	add	r6,r6,r2
 40091ac:	19801636 	bltu	r3,r6,4009208 <_calloc_r+0x8c>
 40091b0:	008004c4 	movi	r2,19
 40091b4:	11800b2e 	bgeu	r2,r6,40091e4 <_calloc_r+0x68>
 40091b8:	80000015 	stw	zero,0(r16)
 40091bc:	80000115 	stw	zero,4(r16)
 40091c0:	008006c4 	movi	r2,27
 40091c4:	11801a2e 	bgeu	r2,r6,4009230 <_calloc_r+0xb4>
 40091c8:	80000215 	stw	zero,8(r16)
 40091cc:	80000315 	stw	zero,12(r16)
 40091d0:	30c0151e 	bne	r6,r3,4009228 <_calloc_r+0xac>
 40091d4:	80000415 	stw	zero,16(r16)
 40091d8:	80800604 	addi	r2,r16,24
 40091dc:	80000515 	stw	zero,20(r16)
 40091e0:	00000106 	br	40091e8 <_calloc_r+0x6c>
 40091e4:	8005883a 	mov	r2,r16
 40091e8:	10000015 	stw	zero,0(r2)
 40091ec:	10000115 	stw	zero,4(r2)
 40091f0:	10000215 	stw	zero,8(r2)
 40091f4:	8005883a 	mov	r2,r16
 40091f8:	dfc00117 	ldw	ra,4(sp)
 40091fc:	dc000017 	ldw	r16,0(sp)
 4009200:	dec00204 	addi	sp,sp,8
 4009204:	f800283a 	ret
 4009208:	000b883a 	mov	r5,zero
 400920c:	8009883a 	mov	r4,r16
 4009210:	40020640 	call	4002064 <memset>
 4009214:	8005883a 	mov	r2,r16
 4009218:	dfc00117 	ldw	ra,4(sp)
 400921c:	dc000017 	ldw	r16,0(sp)
 4009220:	dec00204 	addi	sp,sp,8
 4009224:	f800283a 	ret
 4009228:	80800404 	addi	r2,r16,16
 400922c:	003fee06 	br	40091e8 <__alt_data_end+0xfc0091e8>
 4009230:	80800204 	addi	r2,r16,8
 4009234:	003fec06 	br	40091e8 <__alt_data_end+0xfc0091e8>
 4009238:	0005883a 	mov	r2,zero
 400923c:	003fee06 	br	40091f8 <__alt_data_end+0xfc0091f8>

04009240 <__fputwc>:
 4009240:	defff804 	addi	sp,sp,-32
 4009244:	dcc00415 	stw	r19,16(sp)
 4009248:	dc800315 	stw	r18,12(sp)
 400924c:	dc000115 	stw	r16,4(sp)
 4009250:	dfc00715 	stw	ra,28(sp)
 4009254:	dd400615 	stw	r21,24(sp)
 4009258:	dd000515 	stw	r20,20(sp)
 400925c:	dc400215 	stw	r17,8(sp)
 4009260:	2027883a 	mov	r19,r4
 4009264:	2825883a 	mov	r18,r5
 4009268:	3021883a 	mov	r16,r6
 400926c:	40065c80 	call	40065c8 <__locale_mb_cur_max>
 4009270:	00c00044 	movi	r3,1
 4009274:	10c03e26 	beq	r2,r3,4009370 <__fputwc+0x130>
 4009278:	81c01704 	addi	r7,r16,92
 400927c:	900d883a 	mov	r6,r18
 4009280:	d80b883a 	mov	r5,sp
 4009284:	9809883a 	mov	r4,r19
 4009288:	400a1cc0 	call	400a1cc <_wcrtomb_r>
 400928c:	1029883a 	mov	r20,r2
 4009290:	00bfffc4 	movi	r2,-1
 4009294:	a0802026 	beq	r20,r2,4009318 <__fputwc+0xd8>
 4009298:	d9400003 	ldbu	r5,0(sp)
 400929c:	a0001c26 	beq	r20,zero,4009310 <__fputwc+0xd0>
 40092a0:	0023883a 	mov	r17,zero
 40092a4:	05400284 	movi	r21,10
 40092a8:	00000906 	br	40092d0 <__fputwc+0x90>
 40092ac:	80800017 	ldw	r2,0(r16)
 40092b0:	11400005 	stb	r5,0(r2)
 40092b4:	80c00017 	ldw	r3,0(r16)
 40092b8:	18c00044 	addi	r3,r3,1
 40092bc:	80c00015 	stw	r3,0(r16)
 40092c0:	8c400044 	addi	r17,r17,1
 40092c4:	dc45883a 	add	r2,sp,r17
 40092c8:	8d00112e 	bgeu	r17,r20,4009310 <__fputwc+0xd0>
 40092cc:	11400003 	ldbu	r5,0(r2)
 40092d0:	80c00217 	ldw	r3,8(r16)
 40092d4:	18ffffc4 	addi	r3,r3,-1
 40092d8:	80c00215 	stw	r3,8(r16)
 40092dc:	183ff30e 	bge	r3,zero,40092ac <__alt_data_end+0xfc0092ac>
 40092e0:	80800617 	ldw	r2,24(r16)
 40092e4:	18801916 	blt	r3,r2,400934c <__fputwc+0x10c>
 40092e8:	80800017 	ldw	r2,0(r16)
 40092ec:	11400005 	stb	r5,0(r2)
 40092f0:	80800017 	ldw	r2,0(r16)
 40092f4:	10c00003 	ldbu	r3,0(r2)
 40092f8:	10800044 	addi	r2,r2,1
 40092fc:	1d402326 	beq	r3,r21,400938c <__fputwc+0x14c>
 4009300:	80800015 	stw	r2,0(r16)
 4009304:	8c400044 	addi	r17,r17,1
 4009308:	dc45883a 	add	r2,sp,r17
 400930c:	8d3fef36 	bltu	r17,r20,40092cc <__alt_data_end+0xfc0092cc>
 4009310:	9005883a 	mov	r2,r18
 4009314:	00000406 	br	4009328 <__fputwc+0xe8>
 4009318:	80c0030b 	ldhu	r3,12(r16)
 400931c:	a005883a 	mov	r2,r20
 4009320:	18c01014 	ori	r3,r3,64
 4009324:	80c0030d 	sth	r3,12(r16)
 4009328:	dfc00717 	ldw	ra,28(sp)
 400932c:	dd400617 	ldw	r21,24(sp)
 4009330:	dd000517 	ldw	r20,20(sp)
 4009334:	dcc00417 	ldw	r19,16(sp)
 4009338:	dc800317 	ldw	r18,12(sp)
 400933c:	dc400217 	ldw	r17,8(sp)
 4009340:	dc000117 	ldw	r16,4(sp)
 4009344:	dec00804 	addi	sp,sp,32
 4009348:	f800283a 	ret
 400934c:	800d883a 	mov	r6,r16
 4009350:	29403fcc 	andi	r5,r5,255
 4009354:	9809883a 	mov	r4,r19
 4009358:	400a0740 	call	400a074 <__swbuf_r>
 400935c:	10bfffe0 	cmpeqi	r2,r2,-1
 4009360:	10803fcc 	andi	r2,r2,255
 4009364:	103fd626 	beq	r2,zero,40092c0 <__alt_data_end+0xfc0092c0>
 4009368:	00bfffc4 	movi	r2,-1
 400936c:	003fee06 	br	4009328 <__alt_data_end+0xfc009328>
 4009370:	90ffffc4 	addi	r3,r18,-1
 4009374:	01003f84 	movi	r4,254
 4009378:	20ffbf36 	bltu	r4,r3,4009278 <__alt_data_end+0xfc009278>
 400937c:	900b883a 	mov	r5,r18
 4009380:	dc800005 	stb	r18,0(sp)
 4009384:	1029883a 	mov	r20,r2
 4009388:	003fc506 	br	40092a0 <__alt_data_end+0xfc0092a0>
 400938c:	800d883a 	mov	r6,r16
 4009390:	a80b883a 	mov	r5,r21
 4009394:	9809883a 	mov	r4,r19
 4009398:	400a0740 	call	400a074 <__swbuf_r>
 400939c:	10bfffe0 	cmpeqi	r2,r2,-1
 40093a0:	003fef06 	br	4009360 <__alt_data_end+0xfc009360>

040093a4 <_fputwc_r>:
 40093a4:	3080030b 	ldhu	r2,12(r6)
 40093a8:	10c8000c 	andi	r3,r2,8192
 40093ac:	1800051e 	bne	r3,zero,40093c4 <_fputwc_r+0x20>
 40093b0:	30c01917 	ldw	r3,100(r6)
 40093b4:	10880014 	ori	r2,r2,8192
 40093b8:	3080030d 	sth	r2,12(r6)
 40093bc:	18880014 	ori	r2,r3,8192
 40093c0:	30801915 	stw	r2,100(r6)
 40093c4:	40092401 	jmpi	4009240 <__fputwc>

040093c8 <fputwc>:
 40093c8:	00810074 	movhi	r2,1025
 40093cc:	defffc04 	addi	sp,sp,-16
 40093d0:	1088c504 	addi	r2,r2,8980
 40093d4:	dc000115 	stw	r16,4(sp)
 40093d8:	14000017 	ldw	r16,0(r2)
 40093dc:	dc400215 	stw	r17,8(sp)
 40093e0:	dfc00315 	stw	ra,12(sp)
 40093e4:	2023883a 	mov	r17,r4
 40093e8:	80000226 	beq	r16,zero,40093f4 <fputwc+0x2c>
 40093ec:	80800e17 	ldw	r2,56(r16)
 40093f0:	10001026 	beq	r2,zero,4009434 <fputwc+0x6c>
 40093f4:	2880030b 	ldhu	r2,12(r5)
 40093f8:	10c8000c 	andi	r3,r2,8192
 40093fc:	1800051e 	bne	r3,zero,4009414 <fputwc+0x4c>
 4009400:	28c01917 	ldw	r3,100(r5)
 4009404:	10880014 	ori	r2,r2,8192
 4009408:	2880030d 	sth	r2,12(r5)
 400940c:	18880014 	ori	r2,r3,8192
 4009410:	28801915 	stw	r2,100(r5)
 4009414:	280d883a 	mov	r6,r5
 4009418:	8009883a 	mov	r4,r16
 400941c:	880b883a 	mov	r5,r17
 4009420:	dfc00317 	ldw	ra,12(sp)
 4009424:	dc400217 	ldw	r17,8(sp)
 4009428:	dc000117 	ldw	r16,4(sp)
 400942c:	dec00404 	addi	sp,sp,16
 4009430:	40092401 	jmpi	4009240 <__fputwc>
 4009434:	8009883a 	mov	r4,r16
 4009438:	d9400015 	stw	r5,0(sp)
 400943c:	400124c0 	call	400124c <__sinit>
 4009440:	d9400017 	ldw	r5,0(sp)
 4009444:	003feb06 	br	40093f4 <__alt_data_end+0xfc0093f4>

04009448 <_fstat_r>:
 4009448:	defffd04 	addi	sp,sp,-12
 400944c:	2805883a 	mov	r2,r5
 4009450:	dc000015 	stw	r16,0(sp)
 4009454:	04010074 	movhi	r16,1025
 4009458:	dc400115 	stw	r17,4(sp)
 400945c:	840fa304 	addi	r16,r16,16012
 4009460:	2023883a 	mov	r17,r4
 4009464:	300b883a 	mov	r5,r6
 4009468:	1009883a 	mov	r4,r2
 400946c:	dfc00215 	stw	ra,8(sp)
 4009470:	80000015 	stw	zero,0(r16)
 4009474:	400d7f40 	call	400d7f4 <fstat>
 4009478:	00ffffc4 	movi	r3,-1
 400947c:	10c00526 	beq	r2,r3,4009494 <_fstat_r+0x4c>
 4009480:	dfc00217 	ldw	ra,8(sp)
 4009484:	dc400117 	ldw	r17,4(sp)
 4009488:	dc000017 	ldw	r16,0(sp)
 400948c:	dec00304 	addi	sp,sp,12
 4009490:	f800283a 	ret
 4009494:	80c00017 	ldw	r3,0(r16)
 4009498:	183ff926 	beq	r3,zero,4009480 <__alt_data_end+0xfc009480>
 400949c:	88c00015 	stw	r3,0(r17)
 40094a0:	003ff706 	br	4009480 <__alt_data_end+0xfc009480>

040094a4 <__sfvwrite_r>:
 40094a4:	30800217 	ldw	r2,8(r6)
 40094a8:	10006726 	beq	r2,zero,4009648 <__sfvwrite_r+0x1a4>
 40094ac:	28c0030b 	ldhu	r3,12(r5)
 40094b0:	defff404 	addi	sp,sp,-48
 40094b4:	dd400715 	stw	r21,28(sp)
 40094b8:	dd000615 	stw	r20,24(sp)
 40094bc:	dc000215 	stw	r16,8(sp)
 40094c0:	dfc00b15 	stw	ra,44(sp)
 40094c4:	df000a15 	stw	fp,40(sp)
 40094c8:	ddc00915 	stw	r23,36(sp)
 40094cc:	dd800815 	stw	r22,32(sp)
 40094d0:	dcc00515 	stw	r19,20(sp)
 40094d4:	dc800415 	stw	r18,16(sp)
 40094d8:	dc400315 	stw	r17,12(sp)
 40094dc:	1880020c 	andi	r2,r3,8
 40094e0:	2821883a 	mov	r16,r5
 40094e4:	202b883a 	mov	r21,r4
 40094e8:	3029883a 	mov	r20,r6
 40094ec:	10002726 	beq	r2,zero,400958c <__sfvwrite_r+0xe8>
 40094f0:	28800417 	ldw	r2,16(r5)
 40094f4:	10002526 	beq	r2,zero,400958c <__sfvwrite_r+0xe8>
 40094f8:	1880008c 	andi	r2,r3,2
 40094fc:	a4400017 	ldw	r17,0(r20)
 4009500:	10002a26 	beq	r2,zero,40095ac <__sfvwrite_r+0x108>
 4009504:	05a00034 	movhi	r22,32768
 4009508:	0027883a 	mov	r19,zero
 400950c:	0025883a 	mov	r18,zero
 4009510:	b5bf0004 	addi	r22,r22,-1024
 4009514:	980d883a 	mov	r6,r19
 4009518:	a809883a 	mov	r4,r21
 400951c:	90004626 	beq	r18,zero,4009638 <__sfvwrite_r+0x194>
 4009520:	900f883a 	mov	r7,r18
 4009524:	b480022e 	bgeu	r22,r18,4009530 <__sfvwrite_r+0x8c>
 4009528:	01e00034 	movhi	r7,32768
 400952c:	39ff0004 	addi	r7,r7,-1024
 4009530:	80800917 	ldw	r2,36(r16)
 4009534:	81400717 	ldw	r5,28(r16)
 4009538:	103ee83a 	callr	r2
 400953c:	0080570e 	bge	zero,r2,400969c <__sfvwrite_r+0x1f8>
 4009540:	a0c00217 	ldw	r3,8(r20)
 4009544:	98a7883a 	add	r19,r19,r2
 4009548:	90a5c83a 	sub	r18,r18,r2
 400954c:	1885c83a 	sub	r2,r3,r2
 4009550:	a0800215 	stw	r2,8(r20)
 4009554:	103fef1e 	bne	r2,zero,4009514 <__alt_data_end+0xfc009514>
 4009558:	0005883a 	mov	r2,zero
 400955c:	dfc00b17 	ldw	ra,44(sp)
 4009560:	df000a17 	ldw	fp,40(sp)
 4009564:	ddc00917 	ldw	r23,36(sp)
 4009568:	dd800817 	ldw	r22,32(sp)
 400956c:	dd400717 	ldw	r21,28(sp)
 4009570:	dd000617 	ldw	r20,24(sp)
 4009574:	dcc00517 	ldw	r19,20(sp)
 4009578:	dc800417 	ldw	r18,16(sp)
 400957c:	dc400317 	ldw	r17,12(sp)
 4009580:	dc000217 	ldw	r16,8(sp)
 4009584:	dec00c04 	addi	sp,sp,48
 4009588:	f800283a 	ret
 400958c:	800b883a 	mov	r5,r16
 4009590:	a809883a 	mov	r4,r21
 4009594:	4004b100 	call	4004b10 <__swsetup_r>
 4009598:	1000eb1e 	bne	r2,zero,4009948 <__sfvwrite_r+0x4a4>
 400959c:	80c0030b 	ldhu	r3,12(r16)
 40095a0:	a4400017 	ldw	r17,0(r20)
 40095a4:	1880008c 	andi	r2,r3,2
 40095a8:	103fd61e 	bne	r2,zero,4009504 <__alt_data_end+0xfc009504>
 40095ac:	1880004c 	andi	r2,r3,1
 40095b0:	10003f1e 	bne	r2,zero,40096b0 <__sfvwrite_r+0x20c>
 40095b4:	0039883a 	mov	fp,zero
 40095b8:	0025883a 	mov	r18,zero
 40095bc:	90001a26 	beq	r18,zero,4009628 <__sfvwrite_r+0x184>
 40095c0:	1880800c 	andi	r2,r3,512
 40095c4:	84c00217 	ldw	r19,8(r16)
 40095c8:	10002126 	beq	r2,zero,4009650 <__sfvwrite_r+0x1ac>
 40095cc:	982f883a 	mov	r23,r19
 40095d0:	94c09336 	bltu	r18,r19,4009820 <__sfvwrite_r+0x37c>
 40095d4:	1881200c 	andi	r2,r3,1152
 40095d8:	10009e1e 	bne	r2,zero,4009854 <__sfvwrite_r+0x3b0>
 40095dc:	81000017 	ldw	r4,0(r16)
 40095e0:	b80d883a 	mov	r6,r23
 40095e4:	e00b883a 	mov	r5,fp
 40095e8:	40099b40 	call	40099b4 <memmove>
 40095ec:	80c00217 	ldw	r3,8(r16)
 40095f0:	81000017 	ldw	r4,0(r16)
 40095f4:	9005883a 	mov	r2,r18
 40095f8:	1ce7c83a 	sub	r19,r3,r19
 40095fc:	25cf883a 	add	r7,r4,r23
 4009600:	84c00215 	stw	r19,8(r16)
 4009604:	81c00015 	stw	r7,0(r16)
 4009608:	a0c00217 	ldw	r3,8(r20)
 400960c:	e0b9883a 	add	fp,fp,r2
 4009610:	90a5c83a 	sub	r18,r18,r2
 4009614:	18a7c83a 	sub	r19,r3,r2
 4009618:	a4c00215 	stw	r19,8(r20)
 400961c:	983fce26 	beq	r19,zero,4009558 <__alt_data_end+0xfc009558>
 4009620:	80c0030b 	ldhu	r3,12(r16)
 4009624:	903fe61e 	bne	r18,zero,40095c0 <__alt_data_end+0xfc0095c0>
 4009628:	8f000017 	ldw	fp,0(r17)
 400962c:	8c800117 	ldw	r18,4(r17)
 4009630:	8c400204 	addi	r17,r17,8
 4009634:	003fe106 	br	40095bc <__alt_data_end+0xfc0095bc>
 4009638:	8cc00017 	ldw	r19,0(r17)
 400963c:	8c800117 	ldw	r18,4(r17)
 4009640:	8c400204 	addi	r17,r17,8
 4009644:	003fb306 	br	4009514 <__alt_data_end+0xfc009514>
 4009648:	0005883a 	mov	r2,zero
 400964c:	f800283a 	ret
 4009650:	81000017 	ldw	r4,0(r16)
 4009654:	80800417 	ldw	r2,16(r16)
 4009658:	11005736 	bltu	r2,r4,40097b8 <__sfvwrite_r+0x314>
 400965c:	85c00517 	ldw	r23,20(r16)
 4009660:	95c05536 	bltu	r18,r23,40097b8 <__sfvwrite_r+0x314>
 4009664:	00a00034 	movhi	r2,32768
 4009668:	10bfffc4 	addi	r2,r2,-1
 400966c:	9009883a 	mov	r4,r18
 4009670:	1480012e 	bgeu	r2,r18,4009678 <__sfvwrite_r+0x1d4>
 4009674:	1009883a 	mov	r4,r2
 4009678:	b80b883a 	mov	r5,r23
 400967c:	400ae640 	call	400ae64 <__divsi3>
 4009680:	15cf383a 	mul	r7,r2,r23
 4009684:	81400717 	ldw	r5,28(r16)
 4009688:	80800917 	ldw	r2,36(r16)
 400968c:	e00d883a 	mov	r6,fp
 4009690:	a809883a 	mov	r4,r21
 4009694:	103ee83a 	callr	r2
 4009698:	00bfdb16 	blt	zero,r2,4009608 <__alt_data_end+0xfc009608>
 400969c:	8080030b 	ldhu	r2,12(r16)
 40096a0:	10801014 	ori	r2,r2,64
 40096a4:	8080030d 	sth	r2,12(r16)
 40096a8:	00bfffc4 	movi	r2,-1
 40096ac:	003fab06 	br	400955c <__alt_data_end+0xfc00955c>
 40096b0:	0027883a 	mov	r19,zero
 40096b4:	0011883a 	mov	r8,zero
 40096b8:	0039883a 	mov	fp,zero
 40096bc:	0025883a 	mov	r18,zero
 40096c0:	90001f26 	beq	r18,zero,4009740 <__sfvwrite_r+0x29c>
 40096c4:	40005a26 	beq	r8,zero,4009830 <__sfvwrite_r+0x38c>
 40096c8:	982d883a 	mov	r22,r19
 40096cc:	94c0012e 	bgeu	r18,r19,40096d4 <__sfvwrite_r+0x230>
 40096d0:	902d883a 	mov	r22,r18
 40096d4:	81000017 	ldw	r4,0(r16)
 40096d8:	80800417 	ldw	r2,16(r16)
 40096dc:	b02f883a 	mov	r23,r22
 40096e0:	81c00517 	ldw	r7,20(r16)
 40096e4:	1100032e 	bgeu	r2,r4,40096f4 <__sfvwrite_r+0x250>
 40096e8:	80c00217 	ldw	r3,8(r16)
 40096ec:	38c7883a 	add	r3,r7,r3
 40096f0:	1d801816 	blt	r3,r22,4009754 <__sfvwrite_r+0x2b0>
 40096f4:	b1c03e16 	blt	r22,r7,40097f0 <__sfvwrite_r+0x34c>
 40096f8:	80800917 	ldw	r2,36(r16)
 40096fc:	81400717 	ldw	r5,28(r16)
 4009700:	e00d883a 	mov	r6,fp
 4009704:	da000115 	stw	r8,4(sp)
 4009708:	a809883a 	mov	r4,r21
 400970c:	103ee83a 	callr	r2
 4009710:	102f883a 	mov	r23,r2
 4009714:	da000117 	ldw	r8,4(sp)
 4009718:	00bfe00e 	bge	zero,r2,400969c <__alt_data_end+0xfc00969c>
 400971c:	9de7c83a 	sub	r19,r19,r23
 4009720:	98001f26 	beq	r19,zero,40097a0 <__sfvwrite_r+0x2fc>
 4009724:	a0800217 	ldw	r2,8(r20)
 4009728:	e5f9883a 	add	fp,fp,r23
 400972c:	95e5c83a 	sub	r18,r18,r23
 4009730:	15efc83a 	sub	r23,r2,r23
 4009734:	a5c00215 	stw	r23,8(r20)
 4009738:	b83f8726 	beq	r23,zero,4009558 <__alt_data_end+0xfc009558>
 400973c:	903fe11e 	bne	r18,zero,40096c4 <__alt_data_end+0xfc0096c4>
 4009740:	8f000017 	ldw	fp,0(r17)
 4009744:	8c800117 	ldw	r18,4(r17)
 4009748:	0011883a 	mov	r8,zero
 400974c:	8c400204 	addi	r17,r17,8
 4009750:	003fdb06 	br	40096c0 <__alt_data_end+0xfc0096c0>
 4009754:	180d883a 	mov	r6,r3
 4009758:	e00b883a 	mov	r5,fp
 400975c:	da000115 	stw	r8,4(sp)
 4009760:	d8c00015 	stw	r3,0(sp)
 4009764:	40099b40 	call	40099b4 <memmove>
 4009768:	d8c00017 	ldw	r3,0(sp)
 400976c:	80800017 	ldw	r2,0(r16)
 4009770:	800b883a 	mov	r5,r16
 4009774:	a809883a 	mov	r4,r21
 4009778:	10c5883a 	add	r2,r2,r3
 400977c:	80800015 	stw	r2,0(r16)
 4009780:	d8c00015 	stw	r3,0(sp)
 4009784:	4000e700 	call	4000e70 <_fflush_r>
 4009788:	d8c00017 	ldw	r3,0(sp)
 400978c:	da000117 	ldw	r8,4(sp)
 4009790:	103fc21e 	bne	r2,zero,400969c <__alt_data_end+0xfc00969c>
 4009794:	182f883a 	mov	r23,r3
 4009798:	9de7c83a 	sub	r19,r19,r23
 400979c:	983fe11e 	bne	r19,zero,4009724 <__alt_data_end+0xfc009724>
 40097a0:	800b883a 	mov	r5,r16
 40097a4:	a809883a 	mov	r4,r21
 40097a8:	4000e700 	call	4000e70 <_fflush_r>
 40097ac:	103fbb1e 	bne	r2,zero,400969c <__alt_data_end+0xfc00969c>
 40097b0:	0011883a 	mov	r8,zero
 40097b4:	003fdb06 	br	4009724 <__alt_data_end+0xfc009724>
 40097b8:	94c0012e 	bgeu	r18,r19,40097c0 <__sfvwrite_r+0x31c>
 40097bc:	9027883a 	mov	r19,r18
 40097c0:	980d883a 	mov	r6,r19
 40097c4:	e00b883a 	mov	r5,fp
 40097c8:	40099b40 	call	40099b4 <memmove>
 40097cc:	80800217 	ldw	r2,8(r16)
 40097d0:	80c00017 	ldw	r3,0(r16)
 40097d4:	14c5c83a 	sub	r2,r2,r19
 40097d8:	1cc7883a 	add	r3,r3,r19
 40097dc:	80800215 	stw	r2,8(r16)
 40097e0:	80c00015 	stw	r3,0(r16)
 40097e4:	10004326 	beq	r2,zero,40098f4 <__sfvwrite_r+0x450>
 40097e8:	9805883a 	mov	r2,r19
 40097ec:	003f8606 	br	4009608 <__alt_data_end+0xfc009608>
 40097f0:	b00d883a 	mov	r6,r22
 40097f4:	e00b883a 	mov	r5,fp
 40097f8:	da000115 	stw	r8,4(sp)
 40097fc:	40099b40 	call	40099b4 <memmove>
 4009800:	80800217 	ldw	r2,8(r16)
 4009804:	80c00017 	ldw	r3,0(r16)
 4009808:	da000117 	ldw	r8,4(sp)
 400980c:	1585c83a 	sub	r2,r2,r22
 4009810:	1dad883a 	add	r22,r3,r22
 4009814:	80800215 	stw	r2,8(r16)
 4009818:	85800015 	stw	r22,0(r16)
 400981c:	003fbf06 	br	400971c <__alt_data_end+0xfc00971c>
 4009820:	81000017 	ldw	r4,0(r16)
 4009824:	9027883a 	mov	r19,r18
 4009828:	902f883a 	mov	r23,r18
 400982c:	003f6c06 	br	40095e0 <__alt_data_end+0xfc0095e0>
 4009830:	900d883a 	mov	r6,r18
 4009834:	01400284 	movi	r5,10
 4009838:	e009883a 	mov	r4,fp
 400983c:	40068380 	call	4006838 <memchr>
 4009840:	10003e26 	beq	r2,zero,400993c <__sfvwrite_r+0x498>
 4009844:	10800044 	addi	r2,r2,1
 4009848:	1727c83a 	sub	r19,r2,fp
 400984c:	02000044 	movi	r8,1
 4009850:	003f9d06 	br	40096c8 <__alt_data_end+0xfc0096c8>
 4009854:	80800517 	ldw	r2,20(r16)
 4009858:	81400417 	ldw	r5,16(r16)
 400985c:	81c00017 	ldw	r7,0(r16)
 4009860:	10a7883a 	add	r19,r2,r2
 4009864:	9885883a 	add	r2,r19,r2
 4009868:	1026d7fa 	srli	r19,r2,31
 400986c:	396dc83a 	sub	r22,r7,r5
 4009870:	b1000044 	addi	r4,r22,1
 4009874:	9885883a 	add	r2,r19,r2
 4009878:	1027d07a 	srai	r19,r2,1
 400987c:	2485883a 	add	r2,r4,r18
 4009880:	980d883a 	mov	r6,r19
 4009884:	9880022e 	bgeu	r19,r2,4009890 <__sfvwrite_r+0x3ec>
 4009888:	1027883a 	mov	r19,r2
 400988c:	100d883a 	mov	r6,r2
 4009890:	18c1000c 	andi	r3,r3,1024
 4009894:	18001c26 	beq	r3,zero,4009908 <__sfvwrite_r+0x464>
 4009898:	300b883a 	mov	r5,r6
 400989c:	a809883a 	mov	r4,r21
 40098a0:	40018580 	call	4001858 <_malloc_r>
 40098a4:	102f883a 	mov	r23,r2
 40098a8:	10002926 	beq	r2,zero,4009950 <__sfvwrite_r+0x4ac>
 40098ac:	81400417 	ldw	r5,16(r16)
 40098b0:	b00d883a 	mov	r6,r22
 40098b4:	1009883a 	mov	r4,r2
 40098b8:	400691c0 	call	400691c <memcpy>
 40098bc:	8080030b 	ldhu	r2,12(r16)
 40098c0:	00fedfc4 	movi	r3,-1153
 40098c4:	10c4703a 	and	r2,r2,r3
 40098c8:	10802014 	ori	r2,r2,128
 40098cc:	8080030d 	sth	r2,12(r16)
 40098d0:	bd89883a 	add	r4,r23,r22
 40098d4:	9d8fc83a 	sub	r7,r19,r22
 40098d8:	85c00415 	stw	r23,16(r16)
 40098dc:	84c00515 	stw	r19,20(r16)
 40098e0:	81000015 	stw	r4,0(r16)
 40098e4:	9027883a 	mov	r19,r18
 40098e8:	81c00215 	stw	r7,8(r16)
 40098ec:	902f883a 	mov	r23,r18
 40098f0:	003f3b06 	br	40095e0 <__alt_data_end+0xfc0095e0>
 40098f4:	800b883a 	mov	r5,r16
 40098f8:	a809883a 	mov	r4,r21
 40098fc:	4000e700 	call	4000e70 <_fflush_r>
 4009900:	103fb926 	beq	r2,zero,40097e8 <__alt_data_end+0xfc0097e8>
 4009904:	003f6506 	br	400969c <__alt_data_end+0xfc00969c>
 4009908:	a809883a 	mov	r4,r21
 400990c:	4009b100 	call	4009b10 <_realloc_r>
 4009910:	102f883a 	mov	r23,r2
 4009914:	103fee1e 	bne	r2,zero,40098d0 <__alt_data_end+0xfc0098d0>
 4009918:	81400417 	ldw	r5,16(r16)
 400991c:	a809883a 	mov	r4,r21
 4009920:	40013c00 	call	40013c0 <_free_r>
 4009924:	8080030b 	ldhu	r2,12(r16)
 4009928:	00ffdfc4 	movi	r3,-129
 400992c:	1884703a 	and	r2,r3,r2
 4009930:	00c00304 	movi	r3,12
 4009934:	a8c00015 	stw	r3,0(r21)
 4009938:	003f5906 	br	40096a0 <__alt_data_end+0xfc0096a0>
 400993c:	94c00044 	addi	r19,r18,1
 4009940:	02000044 	movi	r8,1
 4009944:	003f6006 	br	40096c8 <__alt_data_end+0xfc0096c8>
 4009948:	00bfffc4 	movi	r2,-1
 400994c:	003f0306 	br	400955c <__alt_data_end+0xfc00955c>
 4009950:	00800304 	movi	r2,12
 4009954:	a8800015 	stw	r2,0(r21)
 4009958:	8080030b 	ldhu	r2,12(r16)
 400995c:	003f5006 	br	40096a0 <__alt_data_end+0xfc0096a0>

04009960 <_isatty_r>:
 4009960:	defffd04 	addi	sp,sp,-12
 4009964:	dc000015 	stw	r16,0(sp)
 4009968:	04010074 	movhi	r16,1025
 400996c:	dc400115 	stw	r17,4(sp)
 4009970:	840fa304 	addi	r16,r16,16012
 4009974:	2023883a 	mov	r17,r4
 4009978:	2809883a 	mov	r4,r5
 400997c:	dfc00215 	stw	ra,8(sp)
 4009980:	80000015 	stw	zero,0(r16)
 4009984:	400d8e00 	call	400d8e0 <isatty>
 4009988:	00ffffc4 	movi	r3,-1
 400998c:	10c00526 	beq	r2,r3,40099a4 <_isatty_r+0x44>
 4009990:	dfc00217 	ldw	ra,8(sp)
 4009994:	dc400117 	ldw	r17,4(sp)
 4009998:	dc000017 	ldw	r16,0(sp)
 400999c:	dec00304 	addi	sp,sp,12
 40099a0:	f800283a 	ret
 40099a4:	80c00017 	ldw	r3,0(r16)
 40099a8:	183ff926 	beq	r3,zero,4009990 <__alt_data_end+0xfc009990>
 40099ac:	88c00015 	stw	r3,0(r17)
 40099b0:	003ff706 	br	4009990 <__alt_data_end+0xfc009990>

040099b4 <memmove>:
 40099b4:	2005883a 	mov	r2,r4
 40099b8:	29000b2e 	bgeu	r5,r4,40099e8 <memmove+0x34>
 40099bc:	298f883a 	add	r7,r5,r6
 40099c0:	21c0092e 	bgeu	r4,r7,40099e8 <memmove+0x34>
 40099c4:	2187883a 	add	r3,r4,r6
 40099c8:	198bc83a 	sub	r5,r3,r6
 40099cc:	30004826 	beq	r6,zero,4009af0 <memmove+0x13c>
 40099d0:	39ffffc4 	addi	r7,r7,-1
 40099d4:	39000003 	ldbu	r4,0(r7)
 40099d8:	18ffffc4 	addi	r3,r3,-1
 40099dc:	19000005 	stb	r4,0(r3)
 40099e0:	28fffb1e 	bne	r5,r3,40099d0 <__alt_data_end+0xfc0099d0>
 40099e4:	f800283a 	ret
 40099e8:	00c003c4 	movi	r3,15
 40099ec:	1980412e 	bgeu	r3,r6,4009af4 <memmove+0x140>
 40099f0:	2886b03a 	or	r3,r5,r2
 40099f4:	18c000cc 	andi	r3,r3,3
 40099f8:	1800401e 	bne	r3,zero,4009afc <memmove+0x148>
 40099fc:	33fffc04 	addi	r15,r6,-16
 4009a00:	781ed13a 	srli	r15,r15,4
 4009a04:	28c00104 	addi	r3,r5,4
 4009a08:	13400104 	addi	r13,r2,4
 4009a0c:	781c913a 	slli	r14,r15,4
 4009a10:	2b000204 	addi	r12,r5,8
 4009a14:	12c00204 	addi	r11,r2,8
 4009a18:	73800504 	addi	r14,r14,20
 4009a1c:	2a800304 	addi	r10,r5,12
 4009a20:	12400304 	addi	r9,r2,12
 4009a24:	2b9d883a 	add	r14,r5,r14
 4009a28:	2811883a 	mov	r8,r5
 4009a2c:	100f883a 	mov	r7,r2
 4009a30:	41000017 	ldw	r4,0(r8)
 4009a34:	39c00404 	addi	r7,r7,16
 4009a38:	18c00404 	addi	r3,r3,16
 4009a3c:	393ffc15 	stw	r4,-16(r7)
 4009a40:	193ffc17 	ldw	r4,-16(r3)
 4009a44:	6b400404 	addi	r13,r13,16
 4009a48:	5ac00404 	addi	r11,r11,16
 4009a4c:	693ffc15 	stw	r4,-16(r13)
 4009a50:	61000017 	ldw	r4,0(r12)
 4009a54:	4a400404 	addi	r9,r9,16
 4009a58:	42000404 	addi	r8,r8,16
 4009a5c:	593ffc15 	stw	r4,-16(r11)
 4009a60:	51000017 	ldw	r4,0(r10)
 4009a64:	63000404 	addi	r12,r12,16
 4009a68:	52800404 	addi	r10,r10,16
 4009a6c:	493ffc15 	stw	r4,-16(r9)
 4009a70:	1bbfef1e 	bne	r3,r14,4009a30 <__alt_data_end+0xfc009a30>
 4009a74:	79000044 	addi	r4,r15,1
 4009a78:	2008913a 	slli	r4,r4,4
 4009a7c:	328003cc 	andi	r10,r6,15
 4009a80:	02c000c4 	movi	r11,3
 4009a84:	1107883a 	add	r3,r2,r4
 4009a88:	290b883a 	add	r5,r5,r4
 4009a8c:	5a801e2e 	bgeu	r11,r10,4009b08 <memmove+0x154>
 4009a90:	1813883a 	mov	r9,r3
 4009a94:	2811883a 	mov	r8,r5
 4009a98:	500f883a 	mov	r7,r10
 4009a9c:	41000017 	ldw	r4,0(r8)
 4009aa0:	4a400104 	addi	r9,r9,4
 4009aa4:	39ffff04 	addi	r7,r7,-4
 4009aa8:	493fff15 	stw	r4,-4(r9)
 4009aac:	42000104 	addi	r8,r8,4
 4009ab0:	59fffa36 	bltu	r11,r7,4009a9c <__alt_data_end+0xfc009a9c>
 4009ab4:	513fff04 	addi	r4,r10,-4
 4009ab8:	2008d0ba 	srli	r4,r4,2
 4009abc:	318000cc 	andi	r6,r6,3
 4009ac0:	21000044 	addi	r4,r4,1
 4009ac4:	2109883a 	add	r4,r4,r4
 4009ac8:	2109883a 	add	r4,r4,r4
 4009acc:	1907883a 	add	r3,r3,r4
 4009ad0:	290b883a 	add	r5,r5,r4
 4009ad4:	30000b26 	beq	r6,zero,4009b04 <memmove+0x150>
 4009ad8:	198d883a 	add	r6,r3,r6
 4009adc:	29c00003 	ldbu	r7,0(r5)
 4009ae0:	18c00044 	addi	r3,r3,1
 4009ae4:	29400044 	addi	r5,r5,1
 4009ae8:	19ffffc5 	stb	r7,-1(r3)
 4009aec:	19bffb1e 	bne	r3,r6,4009adc <__alt_data_end+0xfc009adc>
 4009af0:	f800283a 	ret
 4009af4:	1007883a 	mov	r3,r2
 4009af8:	003ff606 	br	4009ad4 <__alt_data_end+0xfc009ad4>
 4009afc:	1007883a 	mov	r3,r2
 4009b00:	003ff506 	br	4009ad8 <__alt_data_end+0xfc009ad8>
 4009b04:	f800283a 	ret
 4009b08:	500d883a 	mov	r6,r10
 4009b0c:	003ff106 	br	4009ad4 <__alt_data_end+0xfc009ad4>

04009b10 <_realloc_r>:
 4009b10:	defff604 	addi	sp,sp,-40
 4009b14:	dc800215 	stw	r18,8(sp)
 4009b18:	dfc00915 	stw	ra,36(sp)
 4009b1c:	df000815 	stw	fp,32(sp)
 4009b20:	ddc00715 	stw	r23,28(sp)
 4009b24:	dd800615 	stw	r22,24(sp)
 4009b28:	dd400515 	stw	r21,20(sp)
 4009b2c:	dd000415 	stw	r20,16(sp)
 4009b30:	dcc00315 	stw	r19,12(sp)
 4009b34:	dc400115 	stw	r17,4(sp)
 4009b38:	dc000015 	stw	r16,0(sp)
 4009b3c:	3025883a 	mov	r18,r6
 4009b40:	2800b726 	beq	r5,zero,4009e20 <_realloc_r+0x310>
 4009b44:	282b883a 	mov	r21,r5
 4009b48:	2029883a 	mov	r20,r4
 4009b4c:	400dbfc0 	call	400dbfc <__malloc_lock>
 4009b50:	a8bfff17 	ldw	r2,-4(r21)
 4009b54:	043fff04 	movi	r16,-4
 4009b58:	90c002c4 	addi	r3,r18,11
 4009b5c:	01000584 	movi	r4,22
 4009b60:	acfffe04 	addi	r19,r21,-8
 4009b64:	1420703a 	and	r16,r2,r16
 4009b68:	20c0332e 	bgeu	r4,r3,4009c38 <_realloc_r+0x128>
 4009b6c:	047ffe04 	movi	r17,-8
 4009b70:	1c62703a 	and	r17,r3,r17
 4009b74:	8807883a 	mov	r3,r17
 4009b78:	88005816 	blt	r17,zero,4009cdc <_realloc_r+0x1cc>
 4009b7c:	8c805736 	bltu	r17,r18,4009cdc <_realloc_r+0x1cc>
 4009b80:	80c0300e 	bge	r16,r3,4009c44 <_realloc_r+0x134>
 4009b84:	07010074 	movhi	fp,1025
 4009b88:	e7031704 	addi	fp,fp,3164
 4009b8c:	e1c00217 	ldw	r7,8(fp)
 4009b90:	9c09883a 	add	r4,r19,r16
 4009b94:	22000117 	ldw	r8,4(r4)
 4009b98:	21c06326 	beq	r4,r7,4009d28 <_realloc_r+0x218>
 4009b9c:	017fff84 	movi	r5,-2
 4009ba0:	414a703a 	and	r5,r8,r5
 4009ba4:	214b883a 	add	r5,r4,r5
 4009ba8:	29800117 	ldw	r6,4(r5)
 4009bac:	3180004c 	andi	r6,r6,1
 4009bb0:	30003f26 	beq	r6,zero,4009cb0 <_realloc_r+0x1a0>
 4009bb4:	1080004c 	andi	r2,r2,1
 4009bb8:	10008326 	beq	r2,zero,4009dc8 <_realloc_r+0x2b8>
 4009bbc:	900b883a 	mov	r5,r18
 4009bc0:	a009883a 	mov	r4,r20
 4009bc4:	40018580 	call	4001858 <_malloc_r>
 4009bc8:	1025883a 	mov	r18,r2
 4009bcc:	10011e26 	beq	r2,zero,400a048 <_realloc_r+0x538>
 4009bd0:	a93fff17 	ldw	r4,-4(r21)
 4009bd4:	10fffe04 	addi	r3,r2,-8
 4009bd8:	00bfff84 	movi	r2,-2
 4009bdc:	2084703a 	and	r2,r4,r2
 4009be0:	9885883a 	add	r2,r19,r2
 4009be4:	1880ee26 	beq	r3,r2,4009fa0 <_realloc_r+0x490>
 4009be8:	81bfff04 	addi	r6,r16,-4
 4009bec:	00800904 	movi	r2,36
 4009bf0:	1180b836 	bltu	r2,r6,4009ed4 <_realloc_r+0x3c4>
 4009bf4:	00c004c4 	movi	r3,19
 4009bf8:	19809636 	bltu	r3,r6,4009e54 <_realloc_r+0x344>
 4009bfc:	9005883a 	mov	r2,r18
 4009c00:	a807883a 	mov	r3,r21
 4009c04:	19000017 	ldw	r4,0(r3)
 4009c08:	11000015 	stw	r4,0(r2)
 4009c0c:	19000117 	ldw	r4,4(r3)
 4009c10:	11000115 	stw	r4,4(r2)
 4009c14:	18c00217 	ldw	r3,8(r3)
 4009c18:	10c00215 	stw	r3,8(r2)
 4009c1c:	a80b883a 	mov	r5,r21
 4009c20:	a009883a 	mov	r4,r20
 4009c24:	40013c00 	call	40013c0 <_free_r>
 4009c28:	a009883a 	mov	r4,r20
 4009c2c:	400dc200 	call	400dc20 <__malloc_unlock>
 4009c30:	9005883a 	mov	r2,r18
 4009c34:	00001206 	br	4009c80 <_realloc_r+0x170>
 4009c38:	00c00404 	movi	r3,16
 4009c3c:	1823883a 	mov	r17,r3
 4009c40:	003fce06 	br	4009b7c <__alt_data_end+0xfc009b7c>
 4009c44:	a825883a 	mov	r18,r21
 4009c48:	8445c83a 	sub	r2,r16,r17
 4009c4c:	00c003c4 	movi	r3,15
 4009c50:	18802636 	bltu	r3,r2,4009cec <_realloc_r+0x1dc>
 4009c54:	99800117 	ldw	r6,4(r19)
 4009c58:	9c07883a 	add	r3,r19,r16
 4009c5c:	3180004c 	andi	r6,r6,1
 4009c60:	3420b03a 	or	r16,r6,r16
 4009c64:	9c000115 	stw	r16,4(r19)
 4009c68:	18800117 	ldw	r2,4(r3)
 4009c6c:	10800054 	ori	r2,r2,1
 4009c70:	18800115 	stw	r2,4(r3)
 4009c74:	a009883a 	mov	r4,r20
 4009c78:	400dc200 	call	400dc20 <__malloc_unlock>
 4009c7c:	9005883a 	mov	r2,r18
 4009c80:	dfc00917 	ldw	ra,36(sp)
 4009c84:	df000817 	ldw	fp,32(sp)
 4009c88:	ddc00717 	ldw	r23,28(sp)
 4009c8c:	dd800617 	ldw	r22,24(sp)
 4009c90:	dd400517 	ldw	r21,20(sp)
 4009c94:	dd000417 	ldw	r20,16(sp)
 4009c98:	dcc00317 	ldw	r19,12(sp)
 4009c9c:	dc800217 	ldw	r18,8(sp)
 4009ca0:	dc400117 	ldw	r17,4(sp)
 4009ca4:	dc000017 	ldw	r16,0(sp)
 4009ca8:	dec00a04 	addi	sp,sp,40
 4009cac:	f800283a 	ret
 4009cb0:	017fff04 	movi	r5,-4
 4009cb4:	414a703a 	and	r5,r8,r5
 4009cb8:	814d883a 	add	r6,r16,r5
 4009cbc:	30c01f16 	blt	r6,r3,4009d3c <_realloc_r+0x22c>
 4009cc0:	20800317 	ldw	r2,12(r4)
 4009cc4:	20c00217 	ldw	r3,8(r4)
 4009cc8:	a825883a 	mov	r18,r21
 4009ccc:	3021883a 	mov	r16,r6
 4009cd0:	18800315 	stw	r2,12(r3)
 4009cd4:	10c00215 	stw	r3,8(r2)
 4009cd8:	003fdb06 	br	4009c48 <__alt_data_end+0xfc009c48>
 4009cdc:	00800304 	movi	r2,12
 4009ce0:	a0800015 	stw	r2,0(r20)
 4009ce4:	0005883a 	mov	r2,zero
 4009ce8:	003fe506 	br	4009c80 <__alt_data_end+0xfc009c80>
 4009cec:	98c00117 	ldw	r3,4(r19)
 4009cf0:	9c4b883a 	add	r5,r19,r17
 4009cf4:	11000054 	ori	r4,r2,1
 4009cf8:	18c0004c 	andi	r3,r3,1
 4009cfc:	1c62b03a 	or	r17,r3,r17
 4009d00:	9c400115 	stw	r17,4(r19)
 4009d04:	29000115 	stw	r4,4(r5)
 4009d08:	2885883a 	add	r2,r5,r2
 4009d0c:	10c00117 	ldw	r3,4(r2)
 4009d10:	29400204 	addi	r5,r5,8
 4009d14:	a009883a 	mov	r4,r20
 4009d18:	18c00054 	ori	r3,r3,1
 4009d1c:	10c00115 	stw	r3,4(r2)
 4009d20:	40013c00 	call	40013c0 <_free_r>
 4009d24:	003fd306 	br	4009c74 <__alt_data_end+0xfc009c74>
 4009d28:	017fff04 	movi	r5,-4
 4009d2c:	414a703a 	and	r5,r8,r5
 4009d30:	89800404 	addi	r6,r17,16
 4009d34:	8151883a 	add	r8,r16,r5
 4009d38:	4180590e 	bge	r8,r6,4009ea0 <_realloc_r+0x390>
 4009d3c:	1080004c 	andi	r2,r2,1
 4009d40:	103f9e1e 	bne	r2,zero,4009bbc <__alt_data_end+0xfc009bbc>
 4009d44:	adbffe17 	ldw	r22,-8(r21)
 4009d48:	00bfff04 	movi	r2,-4
 4009d4c:	9dadc83a 	sub	r22,r19,r22
 4009d50:	b1800117 	ldw	r6,4(r22)
 4009d54:	3084703a 	and	r2,r6,r2
 4009d58:	20002026 	beq	r4,zero,4009ddc <_realloc_r+0x2cc>
 4009d5c:	80af883a 	add	r23,r16,r2
 4009d60:	b96f883a 	add	r23,r23,r5
 4009d64:	21c05f26 	beq	r4,r7,4009ee4 <_realloc_r+0x3d4>
 4009d68:	b8c01c16 	blt	r23,r3,4009ddc <_realloc_r+0x2cc>
 4009d6c:	20800317 	ldw	r2,12(r4)
 4009d70:	20c00217 	ldw	r3,8(r4)
 4009d74:	81bfff04 	addi	r6,r16,-4
 4009d78:	01000904 	movi	r4,36
 4009d7c:	18800315 	stw	r2,12(r3)
 4009d80:	10c00215 	stw	r3,8(r2)
 4009d84:	b0c00217 	ldw	r3,8(r22)
 4009d88:	b0800317 	ldw	r2,12(r22)
 4009d8c:	b4800204 	addi	r18,r22,8
 4009d90:	18800315 	stw	r2,12(r3)
 4009d94:	10c00215 	stw	r3,8(r2)
 4009d98:	21801b36 	bltu	r4,r6,4009e08 <_realloc_r+0x2f8>
 4009d9c:	008004c4 	movi	r2,19
 4009da0:	1180352e 	bgeu	r2,r6,4009e78 <_realloc_r+0x368>
 4009da4:	a8800017 	ldw	r2,0(r21)
 4009da8:	b0800215 	stw	r2,8(r22)
 4009dac:	a8800117 	ldw	r2,4(r21)
 4009db0:	b0800315 	stw	r2,12(r22)
 4009db4:	008006c4 	movi	r2,27
 4009db8:	11807f36 	bltu	r2,r6,4009fb8 <_realloc_r+0x4a8>
 4009dbc:	b0800404 	addi	r2,r22,16
 4009dc0:	ad400204 	addi	r21,r21,8
 4009dc4:	00002d06 	br	4009e7c <_realloc_r+0x36c>
 4009dc8:	adbffe17 	ldw	r22,-8(r21)
 4009dcc:	00bfff04 	movi	r2,-4
 4009dd0:	9dadc83a 	sub	r22,r19,r22
 4009dd4:	b1000117 	ldw	r4,4(r22)
 4009dd8:	2084703a 	and	r2,r4,r2
 4009ddc:	b03f7726 	beq	r22,zero,4009bbc <__alt_data_end+0xfc009bbc>
 4009de0:	80af883a 	add	r23,r16,r2
 4009de4:	b8ff7516 	blt	r23,r3,4009bbc <__alt_data_end+0xfc009bbc>
 4009de8:	b0800317 	ldw	r2,12(r22)
 4009dec:	b0c00217 	ldw	r3,8(r22)
 4009df0:	81bfff04 	addi	r6,r16,-4
 4009df4:	01000904 	movi	r4,36
 4009df8:	18800315 	stw	r2,12(r3)
 4009dfc:	10c00215 	stw	r3,8(r2)
 4009e00:	b4800204 	addi	r18,r22,8
 4009e04:	21bfe52e 	bgeu	r4,r6,4009d9c <__alt_data_end+0xfc009d9c>
 4009e08:	a80b883a 	mov	r5,r21
 4009e0c:	9009883a 	mov	r4,r18
 4009e10:	40099b40 	call	40099b4 <memmove>
 4009e14:	b821883a 	mov	r16,r23
 4009e18:	b027883a 	mov	r19,r22
 4009e1c:	003f8a06 	br	4009c48 <__alt_data_end+0xfc009c48>
 4009e20:	300b883a 	mov	r5,r6
 4009e24:	dfc00917 	ldw	ra,36(sp)
 4009e28:	df000817 	ldw	fp,32(sp)
 4009e2c:	ddc00717 	ldw	r23,28(sp)
 4009e30:	dd800617 	ldw	r22,24(sp)
 4009e34:	dd400517 	ldw	r21,20(sp)
 4009e38:	dd000417 	ldw	r20,16(sp)
 4009e3c:	dcc00317 	ldw	r19,12(sp)
 4009e40:	dc800217 	ldw	r18,8(sp)
 4009e44:	dc400117 	ldw	r17,4(sp)
 4009e48:	dc000017 	ldw	r16,0(sp)
 4009e4c:	dec00a04 	addi	sp,sp,40
 4009e50:	40018581 	jmpi	4001858 <_malloc_r>
 4009e54:	a8c00017 	ldw	r3,0(r21)
 4009e58:	90c00015 	stw	r3,0(r18)
 4009e5c:	a8c00117 	ldw	r3,4(r21)
 4009e60:	90c00115 	stw	r3,4(r18)
 4009e64:	00c006c4 	movi	r3,27
 4009e68:	19804536 	bltu	r3,r6,4009f80 <_realloc_r+0x470>
 4009e6c:	90800204 	addi	r2,r18,8
 4009e70:	a8c00204 	addi	r3,r21,8
 4009e74:	003f6306 	br	4009c04 <__alt_data_end+0xfc009c04>
 4009e78:	9005883a 	mov	r2,r18
 4009e7c:	a8c00017 	ldw	r3,0(r21)
 4009e80:	b821883a 	mov	r16,r23
 4009e84:	b027883a 	mov	r19,r22
 4009e88:	10c00015 	stw	r3,0(r2)
 4009e8c:	a8c00117 	ldw	r3,4(r21)
 4009e90:	10c00115 	stw	r3,4(r2)
 4009e94:	a8c00217 	ldw	r3,8(r21)
 4009e98:	10c00215 	stw	r3,8(r2)
 4009e9c:	003f6a06 	br	4009c48 <__alt_data_end+0xfc009c48>
 4009ea0:	9c67883a 	add	r19,r19,r17
 4009ea4:	4445c83a 	sub	r2,r8,r17
 4009ea8:	e4c00215 	stw	r19,8(fp)
 4009eac:	10800054 	ori	r2,r2,1
 4009eb0:	98800115 	stw	r2,4(r19)
 4009eb4:	a8bfff17 	ldw	r2,-4(r21)
 4009eb8:	a009883a 	mov	r4,r20
 4009ebc:	1080004c 	andi	r2,r2,1
 4009ec0:	1462b03a 	or	r17,r2,r17
 4009ec4:	ac7fff15 	stw	r17,-4(r21)
 4009ec8:	400dc200 	call	400dc20 <__malloc_unlock>
 4009ecc:	a805883a 	mov	r2,r21
 4009ed0:	003f6b06 	br	4009c80 <__alt_data_end+0xfc009c80>
 4009ed4:	a80b883a 	mov	r5,r21
 4009ed8:	9009883a 	mov	r4,r18
 4009edc:	40099b40 	call	40099b4 <memmove>
 4009ee0:	003f4e06 	br	4009c1c <__alt_data_end+0xfc009c1c>
 4009ee4:	89000404 	addi	r4,r17,16
 4009ee8:	b93fbc16 	blt	r23,r4,4009ddc <__alt_data_end+0xfc009ddc>
 4009eec:	b0800317 	ldw	r2,12(r22)
 4009ef0:	b0c00217 	ldw	r3,8(r22)
 4009ef4:	81bfff04 	addi	r6,r16,-4
 4009ef8:	01000904 	movi	r4,36
 4009efc:	18800315 	stw	r2,12(r3)
 4009f00:	10c00215 	stw	r3,8(r2)
 4009f04:	b4800204 	addi	r18,r22,8
 4009f08:	21804336 	bltu	r4,r6,400a018 <_realloc_r+0x508>
 4009f0c:	008004c4 	movi	r2,19
 4009f10:	11803f2e 	bgeu	r2,r6,400a010 <_realloc_r+0x500>
 4009f14:	a8800017 	ldw	r2,0(r21)
 4009f18:	b0800215 	stw	r2,8(r22)
 4009f1c:	a8800117 	ldw	r2,4(r21)
 4009f20:	b0800315 	stw	r2,12(r22)
 4009f24:	008006c4 	movi	r2,27
 4009f28:	11803f36 	bltu	r2,r6,400a028 <_realloc_r+0x518>
 4009f2c:	b0800404 	addi	r2,r22,16
 4009f30:	ad400204 	addi	r21,r21,8
 4009f34:	a8c00017 	ldw	r3,0(r21)
 4009f38:	10c00015 	stw	r3,0(r2)
 4009f3c:	a8c00117 	ldw	r3,4(r21)
 4009f40:	10c00115 	stw	r3,4(r2)
 4009f44:	a8c00217 	ldw	r3,8(r21)
 4009f48:	10c00215 	stw	r3,8(r2)
 4009f4c:	b447883a 	add	r3,r22,r17
 4009f50:	bc45c83a 	sub	r2,r23,r17
 4009f54:	e0c00215 	stw	r3,8(fp)
 4009f58:	10800054 	ori	r2,r2,1
 4009f5c:	18800115 	stw	r2,4(r3)
 4009f60:	b0800117 	ldw	r2,4(r22)
 4009f64:	a009883a 	mov	r4,r20
 4009f68:	1080004c 	andi	r2,r2,1
 4009f6c:	1462b03a 	or	r17,r2,r17
 4009f70:	b4400115 	stw	r17,4(r22)
 4009f74:	400dc200 	call	400dc20 <__malloc_unlock>
 4009f78:	9005883a 	mov	r2,r18
 4009f7c:	003f4006 	br	4009c80 <__alt_data_end+0xfc009c80>
 4009f80:	a8c00217 	ldw	r3,8(r21)
 4009f84:	90c00215 	stw	r3,8(r18)
 4009f88:	a8c00317 	ldw	r3,12(r21)
 4009f8c:	90c00315 	stw	r3,12(r18)
 4009f90:	30801126 	beq	r6,r2,4009fd8 <_realloc_r+0x4c8>
 4009f94:	90800404 	addi	r2,r18,16
 4009f98:	a8c00404 	addi	r3,r21,16
 4009f9c:	003f1906 	br	4009c04 <__alt_data_end+0xfc009c04>
 4009fa0:	90ffff17 	ldw	r3,-4(r18)
 4009fa4:	00bfff04 	movi	r2,-4
 4009fa8:	a825883a 	mov	r18,r21
 4009fac:	1884703a 	and	r2,r3,r2
 4009fb0:	80a1883a 	add	r16,r16,r2
 4009fb4:	003f2406 	br	4009c48 <__alt_data_end+0xfc009c48>
 4009fb8:	a8800217 	ldw	r2,8(r21)
 4009fbc:	b0800415 	stw	r2,16(r22)
 4009fc0:	a8800317 	ldw	r2,12(r21)
 4009fc4:	b0800515 	stw	r2,20(r22)
 4009fc8:	31000a26 	beq	r6,r4,4009ff4 <_realloc_r+0x4e4>
 4009fcc:	b0800604 	addi	r2,r22,24
 4009fd0:	ad400404 	addi	r21,r21,16
 4009fd4:	003fa906 	br	4009e7c <__alt_data_end+0xfc009e7c>
 4009fd8:	a9000417 	ldw	r4,16(r21)
 4009fdc:	90800604 	addi	r2,r18,24
 4009fe0:	a8c00604 	addi	r3,r21,24
 4009fe4:	91000415 	stw	r4,16(r18)
 4009fe8:	a9000517 	ldw	r4,20(r21)
 4009fec:	91000515 	stw	r4,20(r18)
 4009ff0:	003f0406 	br	4009c04 <__alt_data_end+0xfc009c04>
 4009ff4:	a8c00417 	ldw	r3,16(r21)
 4009ff8:	ad400604 	addi	r21,r21,24
 4009ffc:	b0800804 	addi	r2,r22,32
 400a000:	b0c00615 	stw	r3,24(r22)
 400a004:	a8ffff17 	ldw	r3,-4(r21)
 400a008:	b0c00715 	stw	r3,28(r22)
 400a00c:	003f9b06 	br	4009e7c <__alt_data_end+0xfc009e7c>
 400a010:	9005883a 	mov	r2,r18
 400a014:	003fc706 	br	4009f34 <__alt_data_end+0xfc009f34>
 400a018:	a80b883a 	mov	r5,r21
 400a01c:	9009883a 	mov	r4,r18
 400a020:	40099b40 	call	40099b4 <memmove>
 400a024:	003fc906 	br	4009f4c <__alt_data_end+0xfc009f4c>
 400a028:	a8800217 	ldw	r2,8(r21)
 400a02c:	b0800415 	stw	r2,16(r22)
 400a030:	a8800317 	ldw	r2,12(r21)
 400a034:	b0800515 	stw	r2,20(r22)
 400a038:	31000726 	beq	r6,r4,400a058 <_realloc_r+0x548>
 400a03c:	b0800604 	addi	r2,r22,24
 400a040:	ad400404 	addi	r21,r21,16
 400a044:	003fbb06 	br	4009f34 <__alt_data_end+0xfc009f34>
 400a048:	a009883a 	mov	r4,r20
 400a04c:	400dc200 	call	400dc20 <__malloc_unlock>
 400a050:	0005883a 	mov	r2,zero
 400a054:	003f0a06 	br	4009c80 <__alt_data_end+0xfc009c80>
 400a058:	a8c00417 	ldw	r3,16(r21)
 400a05c:	ad400604 	addi	r21,r21,24
 400a060:	b0800804 	addi	r2,r22,32
 400a064:	b0c00615 	stw	r3,24(r22)
 400a068:	a8ffff17 	ldw	r3,-4(r21)
 400a06c:	b0c00715 	stw	r3,28(r22)
 400a070:	003fb006 	br	4009f34 <__alt_data_end+0xfc009f34>

0400a074 <__swbuf_r>:
 400a074:	defffb04 	addi	sp,sp,-20
 400a078:	dcc00315 	stw	r19,12(sp)
 400a07c:	dc800215 	stw	r18,8(sp)
 400a080:	dc000015 	stw	r16,0(sp)
 400a084:	dfc00415 	stw	ra,16(sp)
 400a088:	dc400115 	stw	r17,4(sp)
 400a08c:	2025883a 	mov	r18,r4
 400a090:	2827883a 	mov	r19,r5
 400a094:	3021883a 	mov	r16,r6
 400a098:	20000226 	beq	r4,zero,400a0a4 <__swbuf_r+0x30>
 400a09c:	20800e17 	ldw	r2,56(r4)
 400a0a0:	10004226 	beq	r2,zero,400a1ac <__swbuf_r+0x138>
 400a0a4:	80800617 	ldw	r2,24(r16)
 400a0a8:	8100030b 	ldhu	r4,12(r16)
 400a0ac:	80800215 	stw	r2,8(r16)
 400a0b0:	2080020c 	andi	r2,r4,8
 400a0b4:	10003626 	beq	r2,zero,400a190 <__swbuf_r+0x11c>
 400a0b8:	80c00417 	ldw	r3,16(r16)
 400a0bc:	18003426 	beq	r3,zero,400a190 <__swbuf_r+0x11c>
 400a0c0:	2088000c 	andi	r2,r4,8192
 400a0c4:	9c403fcc 	andi	r17,r19,255
 400a0c8:	10001a26 	beq	r2,zero,400a134 <__swbuf_r+0xc0>
 400a0cc:	80800017 	ldw	r2,0(r16)
 400a0d0:	81000517 	ldw	r4,20(r16)
 400a0d4:	10c7c83a 	sub	r3,r2,r3
 400a0d8:	1900200e 	bge	r3,r4,400a15c <__swbuf_r+0xe8>
 400a0dc:	18c00044 	addi	r3,r3,1
 400a0e0:	81000217 	ldw	r4,8(r16)
 400a0e4:	11400044 	addi	r5,r2,1
 400a0e8:	81400015 	stw	r5,0(r16)
 400a0ec:	213fffc4 	addi	r4,r4,-1
 400a0f0:	81000215 	stw	r4,8(r16)
 400a0f4:	14c00005 	stb	r19,0(r2)
 400a0f8:	80800517 	ldw	r2,20(r16)
 400a0fc:	10c01e26 	beq	r2,r3,400a178 <__swbuf_r+0x104>
 400a100:	8080030b 	ldhu	r2,12(r16)
 400a104:	1080004c 	andi	r2,r2,1
 400a108:	10000226 	beq	r2,zero,400a114 <__swbuf_r+0xa0>
 400a10c:	00800284 	movi	r2,10
 400a110:	88801926 	beq	r17,r2,400a178 <__swbuf_r+0x104>
 400a114:	8805883a 	mov	r2,r17
 400a118:	dfc00417 	ldw	ra,16(sp)
 400a11c:	dcc00317 	ldw	r19,12(sp)
 400a120:	dc800217 	ldw	r18,8(sp)
 400a124:	dc400117 	ldw	r17,4(sp)
 400a128:	dc000017 	ldw	r16,0(sp)
 400a12c:	dec00504 	addi	sp,sp,20
 400a130:	f800283a 	ret
 400a134:	81401917 	ldw	r5,100(r16)
 400a138:	00b7ffc4 	movi	r2,-8193
 400a13c:	21080014 	ori	r4,r4,8192
 400a140:	2884703a 	and	r2,r5,r2
 400a144:	80801915 	stw	r2,100(r16)
 400a148:	80800017 	ldw	r2,0(r16)
 400a14c:	8100030d 	sth	r4,12(r16)
 400a150:	81000517 	ldw	r4,20(r16)
 400a154:	10c7c83a 	sub	r3,r2,r3
 400a158:	193fe016 	blt	r3,r4,400a0dc <__alt_data_end+0xfc00a0dc>
 400a15c:	800b883a 	mov	r5,r16
 400a160:	9009883a 	mov	r4,r18
 400a164:	4000e700 	call	4000e70 <_fflush_r>
 400a168:	1000071e 	bne	r2,zero,400a188 <__swbuf_r+0x114>
 400a16c:	80800017 	ldw	r2,0(r16)
 400a170:	00c00044 	movi	r3,1
 400a174:	003fda06 	br	400a0e0 <__alt_data_end+0xfc00a0e0>
 400a178:	800b883a 	mov	r5,r16
 400a17c:	9009883a 	mov	r4,r18
 400a180:	4000e700 	call	4000e70 <_fflush_r>
 400a184:	103fe326 	beq	r2,zero,400a114 <__alt_data_end+0xfc00a114>
 400a188:	00bfffc4 	movi	r2,-1
 400a18c:	003fe206 	br	400a118 <__alt_data_end+0xfc00a118>
 400a190:	800b883a 	mov	r5,r16
 400a194:	9009883a 	mov	r4,r18
 400a198:	4004b100 	call	4004b10 <__swsetup_r>
 400a19c:	103ffa1e 	bne	r2,zero,400a188 <__alt_data_end+0xfc00a188>
 400a1a0:	8100030b 	ldhu	r4,12(r16)
 400a1a4:	80c00417 	ldw	r3,16(r16)
 400a1a8:	003fc506 	br	400a0c0 <__alt_data_end+0xfc00a0c0>
 400a1ac:	400124c0 	call	400124c <__sinit>
 400a1b0:	003fbc06 	br	400a0a4 <__alt_data_end+0xfc00a0a4>

0400a1b4 <__swbuf>:
 400a1b4:	00810074 	movhi	r2,1025
 400a1b8:	1088c504 	addi	r2,r2,8980
 400a1bc:	280d883a 	mov	r6,r5
 400a1c0:	200b883a 	mov	r5,r4
 400a1c4:	11000017 	ldw	r4,0(r2)
 400a1c8:	400a0741 	jmpi	400a074 <__swbuf_r>

0400a1cc <_wcrtomb_r>:
 400a1cc:	defff604 	addi	sp,sp,-40
 400a1d0:	00810074 	movhi	r2,1025
 400a1d4:	dc800815 	stw	r18,32(sp)
 400a1d8:	dc400715 	stw	r17,28(sp)
 400a1dc:	dc000615 	stw	r16,24(sp)
 400a1e0:	1088ca04 	addi	r2,r2,9000
 400a1e4:	dfc00915 	stw	ra,36(sp)
 400a1e8:	2021883a 	mov	r16,r4
 400a1ec:	3823883a 	mov	r17,r7
 400a1f0:	14800017 	ldw	r18,0(r2)
 400a1f4:	28001426 	beq	r5,zero,400a248 <_wcrtomb_r+0x7c>
 400a1f8:	d9400415 	stw	r5,16(sp)
 400a1fc:	d9800515 	stw	r6,20(sp)
 400a200:	40065bc0 	call	40065bc <__locale_charset>
 400a204:	d9800517 	ldw	r6,20(sp)
 400a208:	d9400417 	ldw	r5,16(sp)
 400a20c:	100f883a 	mov	r7,r2
 400a210:	dc400015 	stw	r17,0(sp)
 400a214:	8009883a 	mov	r4,r16
 400a218:	903ee83a 	callr	r18
 400a21c:	00ffffc4 	movi	r3,-1
 400a220:	10c0031e 	bne	r2,r3,400a230 <_wcrtomb_r+0x64>
 400a224:	88000015 	stw	zero,0(r17)
 400a228:	00c02284 	movi	r3,138
 400a22c:	80c00015 	stw	r3,0(r16)
 400a230:	dfc00917 	ldw	ra,36(sp)
 400a234:	dc800817 	ldw	r18,32(sp)
 400a238:	dc400717 	ldw	r17,28(sp)
 400a23c:	dc000617 	ldw	r16,24(sp)
 400a240:	dec00a04 	addi	sp,sp,40
 400a244:	f800283a 	ret
 400a248:	40065bc0 	call	40065bc <__locale_charset>
 400a24c:	100f883a 	mov	r7,r2
 400a250:	dc400015 	stw	r17,0(sp)
 400a254:	000d883a 	mov	r6,zero
 400a258:	d9400104 	addi	r5,sp,4
 400a25c:	8009883a 	mov	r4,r16
 400a260:	903ee83a 	callr	r18
 400a264:	003fed06 	br	400a21c <__alt_data_end+0xfc00a21c>

0400a268 <wcrtomb>:
 400a268:	defff604 	addi	sp,sp,-40
 400a26c:	00810074 	movhi	r2,1025
 400a270:	dc800615 	stw	r18,24(sp)
 400a274:	dc400515 	stw	r17,20(sp)
 400a278:	1088c504 	addi	r2,r2,8980
 400a27c:	dfc00915 	stw	ra,36(sp)
 400a280:	dd000815 	stw	r20,32(sp)
 400a284:	dcc00715 	stw	r19,28(sp)
 400a288:	dc000415 	stw	r16,16(sp)
 400a28c:	3025883a 	mov	r18,r6
 400a290:	14400017 	ldw	r17,0(r2)
 400a294:	20001926 	beq	r4,zero,400a2fc <wcrtomb+0x94>
 400a298:	00810074 	movhi	r2,1025
 400a29c:	1088ca04 	addi	r2,r2,9000
 400a2a0:	15000017 	ldw	r20,0(r2)
 400a2a4:	2021883a 	mov	r16,r4
 400a2a8:	2827883a 	mov	r19,r5
 400a2ac:	40065bc0 	call	40065bc <__locale_charset>
 400a2b0:	100f883a 	mov	r7,r2
 400a2b4:	dc800015 	stw	r18,0(sp)
 400a2b8:	980d883a 	mov	r6,r19
 400a2bc:	800b883a 	mov	r5,r16
 400a2c0:	8809883a 	mov	r4,r17
 400a2c4:	a03ee83a 	callr	r20
 400a2c8:	00ffffc4 	movi	r3,-1
 400a2cc:	10c0031e 	bne	r2,r3,400a2dc <wcrtomb+0x74>
 400a2d0:	90000015 	stw	zero,0(r18)
 400a2d4:	00c02284 	movi	r3,138
 400a2d8:	88c00015 	stw	r3,0(r17)
 400a2dc:	dfc00917 	ldw	ra,36(sp)
 400a2e0:	dd000817 	ldw	r20,32(sp)
 400a2e4:	dcc00717 	ldw	r19,28(sp)
 400a2e8:	dc800617 	ldw	r18,24(sp)
 400a2ec:	dc400517 	ldw	r17,20(sp)
 400a2f0:	dc000417 	ldw	r16,16(sp)
 400a2f4:	dec00a04 	addi	sp,sp,40
 400a2f8:	f800283a 	ret
 400a2fc:	00810074 	movhi	r2,1025
 400a300:	1088ca04 	addi	r2,r2,9000
 400a304:	14000017 	ldw	r16,0(r2)
 400a308:	40065bc0 	call	40065bc <__locale_charset>
 400a30c:	100f883a 	mov	r7,r2
 400a310:	dc800015 	stw	r18,0(sp)
 400a314:	000d883a 	mov	r6,zero
 400a318:	d9400104 	addi	r5,sp,4
 400a31c:	8809883a 	mov	r4,r17
 400a320:	803ee83a 	callr	r16
 400a324:	003fe806 	br	400a2c8 <__alt_data_end+0xfc00a2c8>

0400a328 <__ascii_wctomb>:
 400a328:	28000526 	beq	r5,zero,400a340 <__ascii_wctomb+0x18>
 400a32c:	00803fc4 	movi	r2,255
 400a330:	11800536 	bltu	r2,r6,400a348 <__ascii_wctomb+0x20>
 400a334:	29800005 	stb	r6,0(r5)
 400a338:	00800044 	movi	r2,1
 400a33c:	f800283a 	ret
 400a340:	0005883a 	mov	r2,zero
 400a344:	f800283a 	ret
 400a348:	00802284 	movi	r2,138
 400a34c:	20800015 	stw	r2,0(r4)
 400a350:	00bfffc4 	movi	r2,-1
 400a354:	f800283a 	ret

0400a358 <_wctomb_r>:
 400a358:	00810074 	movhi	r2,1025
 400a35c:	defff904 	addi	sp,sp,-28
 400a360:	1088ca04 	addi	r2,r2,9000
 400a364:	dfc00615 	stw	ra,24(sp)
 400a368:	dc400515 	stw	r17,20(sp)
 400a36c:	dc000415 	stw	r16,16(sp)
 400a370:	3823883a 	mov	r17,r7
 400a374:	14000017 	ldw	r16,0(r2)
 400a378:	d9000115 	stw	r4,4(sp)
 400a37c:	d9400215 	stw	r5,8(sp)
 400a380:	d9800315 	stw	r6,12(sp)
 400a384:	40065bc0 	call	40065bc <__locale_charset>
 400a388:	d9800317 	ldw	r6,12(sp)
 400a38c:	d9400217 	ldw	r5,8(sp)
 400a390:	d9000117 	ldw	r4,4(sp)
 400a394:	100f883a 	mov	r7,r2
 400a398:	dc400015 	stw	r17,0(sp)
 400a39c:	803ee83a 	callr	r16
 400a3a0:	dfc00617 	ldw	ra,24(sp)
 400a3a4:	dc400517 	ldw	r17,20(sp)
 400a3a8:	dc000417 	ldw	r16,16(sp)
 400a3ac:	dec00704 	addi	sp,sp,28
 400a3b0:	f800283a 	ret

0400a3b4 <__udivdi3>:
 400a3b4:	defff504 	addi	sp,sp,-44
 400a3b8:	dcc00415 	stw	r19,16(sp)
 400a3bc:	dc000115 	stw	r16,4(sp)
 400a3c0:	dfc00a15 	stw	ra,40(sp)
 400a3c4:	df000915 	stw	fp,36(sp)
 400a3c8:	ddc00815 	stw	r23,32(sp)
 400a3cc:	dd800715 	stw	r22,28(sp)
 400a3d0:	dd400615 	stw	r21,24(sp)
 400a3d4:	dd000515 	stw	r20,20(sp)
 400a3d8:	dc800315 	stw	r18,12(sp)
 400a3dc:	dc400215 	stw	r17,8(sp)
 400a3e0:	2027883a 	mov	r19,r4
 400a3e4:	2821883a 	mov	r16,r5
 400a3e8:	3800411e 	bne	r7,zero,400a4f0 <__udivdi3+0x13c>
 400a3ec:	3023883a 	mov	r17,r6
 400a3f0:	2025883a 	mov	r18,r4
 400a3f4:	2980522e 	bgeu	r5,r6,400a540 <__udivdi3+0x18c>
 400a3f8:	00bfffd4 	movui	r2,65535
 400a3fc:	282d883a 	mov	r22,r5
 400a400:	1180a836 	bltu	r2,r6,400a6a4 <__udivdi3+0x2f0>
 400a404:	00803fc4 	movi	r2,255
 400a408:	1185803a 	cmpltu	r2,r2,r6
 400a40c:	100490fa 	slli	r2,r2,3
 400a410:	3086d83a 	srl	r3,r6,r2
 400a414:	01010074 	movhi	r4,1025
 400a418:	2101bd04 	addi	r4,r4,1780
 400a41c:	20c7883a 	add	r3,r4,r3
 400a420:	18c00003 	ldbu	r3,0(r3)
 400a424:	1885883a 	add	r2,r3,r2
 400a428:	00c00804 	movi	r3,32
 400a42c:	1887c83a 	sub	r3,r3,r2
 400a430:	18000526 	beq	r3,zero,400a448 <__udivdi3+0x94>
 400a434:	80e0983a 	sll	r16,r16,r3
 400a438:	9884d83a 	srl	r2,r19,r2
 400a43c:	30e2983a 	sll	r17,r6,r3
 400a440:	98e4983a 	sll	r18,r19,r3
 400a444:	142cb03a 	or	r22,r2,r16
 400a448:	882ad43a 	srli	r21,r17,16
 400a44c:	b009883a 	mov	r4,r22
 400a450:	8d3fffcc 	andi	r20,r17,65535
 400a454:	a80b883a 	mov	r5,r21
 400a458:	400afc00 	call	400afc0 <__umodsi3>
 400a45c:	b009883a 	mov	r4,r22
 400a460:	a80b883a 	mov	r5,r21
 400a464:	1027883a 	mov	r19,r2
 400a468:	400af5c0 	call	400af5c <__udivsi3>
 400a46c:	102d883a 	mov	r22,r2
 400a470:	9826943a 	slli	r19,r19,16
 400a474:	9004d43a 	srli	r2,r18,16
 400a478:	a5a1383a 	mul	r16,r20,r22
 400a47c:	14c4b03a 	or	r2,r2,r19
 400a480:	1400052e 	bgeu	r2,r16,400a498 <__udivdi3+0xe4>
 400a484:	1445883a 	add	r2,r2,r17
 400a488:	b0ffffc4 	addi	r3,r22,-1
 400a48c:	14400136 	bltu	r2,r17,400a494 <__udivdi3+0xe0>
 400a490:	14012336 	bltu	r2,r16,400a920 <__udivdi3+0x56c>
 400a494:	182d883a 	mov	r22,r3
 400a498:	1421c83a 	sub	r16,r2,r16
 400a49c:	a80b883a 	mov	r5,r21
 400a4a0:	8009883a 	mov	r4,r16
 400a4a4:	400afc00 	call	400afc0 <__umodsi3>
 400a4a8:	1027883a 	mov	r19,r2
 400a4ac:	a80b883a 	mov	r5,r21
 400a4b0:	8009883a 	mov	r4,r16
 400a4b4:	400af5c0 	call	400af5c <__udivsi3>
 400a4b8:	9826943a 	slli	r19,r19,16
 400a4bc:	a0a9383a 	mul	r20,r20,r2
 400a4c0:	94bfffcc 	andi	r18,r18,65535
 400a4c4:	94e4b03a 	or	r18,r18,r19
 400a4c8:	9500052e 	bgeu	r18,r20,400a4e0 <__udivdi3+0x12c>
 400a4cc:	8ca5883a 	add	r18,r17,r18
 400a4d0:	10ffffc4 	addi	r3,r2,-1
 400a4d4:	9440f136 	bltu	r18,r17,400a89c <__udivdi3+0x4e8>
 400a4d8:	9500f02e 	bgeu	r18,r20,400a89c <__udivdi3+0x4e8>
 400a4dc:	10bfff84 	addi	r2,r2,-2
 400a4e0:	b00c943a 	slli	r6,r22,16
 400a4e4:	0007883a 	mov	r3,zero
 400a4e8:	3084b03a 	or	r2,r6,r2
 400a4ec:	00005906 	br	400a654 <__udivdi3+0x2a0>
 400a4f0:	29c05636 	bltu	r5,r7,400a64c <__udivdi3+0x298>
 400a4f4:	00bfffd4 	movui	r2,65535
 400a4f8:	11c0622e 	bgeu	r2,r7,400a684 <__udivdi3+0x2d0>
 400a4fc:	00804034 	movhi	r2,256
 400a500:	10bfffc4 	addi	r2,r2,-1
 400a504:	11c0ee36 	bltu	r2,r7,400a8c0 <__udivdi3+0x50c>
 400a508:	00800404 	movi	r2,16
 400a50c:	3886d83a 	srl	r3,r7,r2
 400a510:	01010074 	movhi	r4,1025
 400a514:	2101bd04 	addi	r4,r4,1780
 400a518:	20c7883a 	add	r3,r4,r3
 400a51c:	18c00003 	ldbu	r3,0(r3)
 400a520:	05400804 	movi	r21,32
 400a524:	1885883a 	add	r2,r3,r2
 400a528:	a8abc83a 	sub	r21,r21,r2
 400a52c:	a800621e 	bne	r21,zero,400a6b8 <__udivdi3+0x304>
 400a530:	3c00e936 	bltu	r7,r16,400a8d8 <__udivdi3+0x524>
 400a534:	9985403a 	cmpgeu	r2,r19,r6
 400a538:	0007883a 	mov	r3,zero
 400a53c:	00004506 	br	400a654 <__udivdi3+0x2a0>
 400a540:	3000041e 	bne	r6,zero,400a554 <__udivdi3+0x1a0>
 400a544:	000b883a 	mov	r5,zero
 400a548:	01000044 	movi	r4,1
 400a54c:	400af5c0 	call	400af5c <__udivsi3>
 400a550:	1023883a 	mov	r17,r2
 400a554:	00bfffd4 	movui	r2,65535
 400a558:	14404e2e 	bgeu	r2,r17,400a694 <__udivdi3+0x2e0>
 400a55c:	00804034 	movhi	r2,256
 400a560:	10bfffc4 	addi	r2,r2,-1
 400a564:	1440d836 	bltu	r2,r17,400a8c8 <__udivdi3+0x514>
 400a568:	00800404 	movi	r2,16
 400a56c:	8886d83a 	srl	r3,r17,r2
 400a570:	01010074 	movhi	r4,1025
 400a574:	2101bd04 	addi	r4,r4,1780
 400a578:	20c7883a 	add	r3,r4,r3
 400a57c:	18c00003 	ldbu	r3,0(r3)
 400a580:	1885883a 	add	r2,r3,r2
 400a584:	00c00804 	movi	r3,32
 400a588:	1887c83a 	sub	r3,r3,r2
 400a58c:	18008f1e 	bne	r3,zero,400a7cc <__udivdi3+0x418>
 400a590:	882ad43a 	srli	r21,r17,16
 400a594:	8461c83a 	sub	r16,r16,r17
 400a598:	8d3fffcc 	andi	r20,r17,65535
 400a59c:	00c00044 	movi	r3,1
 400a5a0:	8009883a 	mov	r4,r16
 400a5a4:	a80b883a 	mov	r5,r21
 400a5a8:	d8c00015 	stw	r3,0(sp)
 400a5ac:	400afc00 	call	400afc0 <__umodsi3>
 400a5b0:	8009883a 	mov	r4,r16
 400a5b4:	a80b883a 	mov	r5,r21
 400a5b8:	1027883a 	mov	r19,r2
 400a5bc:	400af5c0 	call	400af5c <__udivsi3>
 400a5c0:	9826943a 	slli	r19,r19,16
 400a5c4:	9008d43a 	srli	r4,r18,16
 400a5c8:	1521383a 	mul	r16,r2,r20
 400a5cc:	102d883a 	mov	r22,r2
 400a5d0:	24c8b03a 	or	r4,r4,r19
 400a5d4:	d8c00017 	ldw	r3,0(sp)
 400a5d8:	2400052e 	bgeu	r4,r16,400a5f0 <__udivdi3+0x23c>
 400a5dc:	2449883a 	add	r4,r4,r17
 400a5e0:	b0bfffc4 	addi	r2,r22,-1
 400a5e4:	24400136 	bltu	r4,r17,400a5ec <__udivdi3+0x238>
 400a5e8:	2400ca36 	bltu	r4,r16,400a914 <__udivdi3+0x560>
 400a5ec:	102d883a 	mov	r22,r2
 400a5f0:	2421c83a 	sub	r16,r4,r16
 400a5f4:	a80b883a 	mov	r5,r21
 400a5f8:	8009883a 	mov	r4,r16
 400a5fc:	d8c00015 	stw	r3,0(sp)
 400a600:	400afc00 	call	400afc0 <__umodsi3>
 400a604:	1027883a 	mov	r19,r2
 400a608:	a80b883a 	mov	r5,r21
 400a60c:	8009883a 	mov	r4,r16
 400a610:	400af5c0 	call	400af5c <__udivsi3>
 400a614:	9826943a 	slli	r19,r19,16
 400a618:	1529383a 	mul	r20,r2,r20
 400a61c:	94bfffcc 	andi	r18,r18,65535
 400a620:	94e4b03a 	or	r18,r18,r19
 400a624:	d8c00017 	ldw	r3,0(sp)
 400a628:	9500052e 	bgeu	r18,r20,400a640 <__udivdi3+0x28c>
 400a62c:	8ca5883a 	add	r18,r17,r18
 400a630:	113fffc4 	addi	r4,r2,-1
 400a634:	94409736 	bltu	r18,r17,400a894 <__udivdi3+0x4e0>
 400a638:	9500962e 	bgeu	r18,r20,400a894 <__udivdi3+0x4e0>
 400a63c:	10bfff84 	addi	r2,r2,-2
 400a640:	b00c943a 	slli	r6,r22,16
 400a644:	3084b03a 	or	r2,r6,r2
 400a648:	00000206 	br	400a654 <__udivdi3+0x2a0>
 400a64c:	0007883a 	mov	r3,zero
 400a650:	0005883a 	mov	r2,zero
 400a654:	dfc00a17 	ldw	ra,40(sp)
 400a658:	df000917 	ldw	fp,36(sp)
 400a65c:	ddc00817 	ldw	r23,32(sp)
 400a660:	dd800717 	ldw	r22,28(sp)
 400a664:	dd400617 	ldw	r21,24(sp)
 400a668:	dd000517 	ldw	r20,20(sp)
 400a66c:	dcc00417 	ldw	r19,16(sp)
 400a670:	dc800317 	ldw	r18,12(sp)
 400a674:	dc400217 	ldw	r17,8(sp)
 400a678:	dc000117 	ldw	r16,4(sp)
 400a67c:	dec00b04 	addi	sp,sp,44
 400a680:	f800283a 	ret
 400a684:	00803fc4 	movi	r2,255
 400a688:	11c5803a 	cmpltu	r2,r2,r7
 400a68c:	100490fa 	slli	r2,r2,3
 400a690:	003f9e06 	br	400a50c <__alt_data_end+0xfc00a50c>
 400a694:	00803fc4 	movi	r2,255
 400a698:	1445803a 	cmpltu	r2,r2,r17
 400a69c:	100490fa 	slli	r2,r2,3
 400a6a0:	003fb206 	br	400a56c <__alt_data_end+0xfc00a56c>
 400a6a4:	00804034 	movhi	r2,256
 400a6a8:	10bfffc4 	addi	r2,r2,-1
 400a6ac:	11808836 	bltu	r2,r6,400a8d0 <__udivdi3+0x51c>
 400a6b0:	00800404 	movi	r2,16
 400a6b4:	003f5606 	br	400a410 <__alt_data_end+0xfc00a410>
 400a6b8:	30aed83a 	srl	r23,r6,r2
 400a6bc:	3d4e983a 	sll	r7,r7,r21
 400a6c0:	80acd83a 	srl	r22,r16,r2
 400a6c4:	9884d83a 	srl	r2,r19,r2
 400a6c8:	3deeb03a 	or	r23,r7,r23
 400a6cc:	b824d43a 	srli	r18,r23,16
 400a6d0:	8560983a 	sll	r16,r16,r21
 400a6d4:	b009883a 	mov	r4,r22
 400a6d8:	900b883a 	mov	r5,r18
 400a6dc:	3568983a 	sll	r20,r6,r21
 400a6e0:	1420b03a 	or	r16,r2,r16
 400a6e4:	400afc00 	call	400afc0 <__umodsi3>
 400a6e8:	b009883a 	mov	r4,r22
 400a6ec:	900b883a 	mov	r5,r18
 400a6f0:	1023883a 	mov	r17,r2
 400a6f4:	400af5c0 	call	400af5c <__udivsi3>
 400a6f8:	8808943a 	slli	r4,r17,16
 400a6fc:	bf3fffcc 	andi	fp,r23,65535
 400a700:	8006d43a 	srli	r3,r16,16
 400a704:	e0a3383a 	mul	r17,fp,r2
 400a708:	100d883a 	mov	r6,r2
 400a70c:	1906b03a 	or	r3,r3,r4
 400a710:	1c40042e 	bgeu	r3,r17,400a724 <__udivdi3+0x370>
 400a714:	1dc7883a 	add	r3,r3,r23
 400a718:	10bfffc4 	addi	r2,r2,-1
 400a71c:	1dc0752e 	bgeu	r3,r23,400a8f4 <__udivdi3+0x540>
 400a720:	100d883a 	mov	r6,r2
 400a724:	1c63c83a 	sub	r17,r3,r17
 400a728:	900b883a 	mov	r5,r18
 400a72c:	8809883a 	mov	r4,r17
 400a730:	d9800015 	stw	r6,0(sp)
 400a734:	400afc00 	call	400afc0 <__umodsi3>
 400a738:	102d883a 	mov	r22,r2
 400a73c:	8809883a 	mov	r4,r17
 400a740:	900b883a 	mov	r5,r18
 400a744:	400af5c0 	call	400af5c <__udivsi3>
 400a748:	b02c943a 	slli	r22,r22,16
 400a74c:	e089383a 	mul	r4,fp,r2
 400a750:	843fffcc 	andi	r16,r16,65535
 400a754:	85a0b03a 	or	r16,r16,r22
 400a758:	d9800017 	ldw	r6,0(sp)
 400a75c:	8100042e 	bgeu	r16,r4,400a770 <__udivdi3+0x3bc>
 400a760:	85e1883a 	add	r16,r16,r23
 400a764:	10ffffc4 	addi	r3,r2,-1
 400a768:	85c05e2e 	bgeu	r16,r23,400a8e4 <__udivdi3+0x530>
 400a76c:	1805883a 	mov	r2,r3
 400a770:	300c943a 	slli	r6,r6,16
 400a774:	a17fffcc 	andi	r5,r20,65535
 400a778:	a028d43a 	srli	r20,r20,16
 400a77c:	3084b03a 	or	r2,r6,r2
 400a780:	10ffffcc 	andi	r3,r2,65535
 400a784:	100cd43a 	srli	r6,r2,16
 400a788:	194f383a 	mul	r7,r3,r5
 400a78c:	1d07383a 	mul	r3,r3,r20
 400a790:	314b383a 	mul	r5,r6,r5
 400a794:	3810d43a 	srli	r8,r7,16
 400a798:	8121c83a 	sub	r16,r16,r4
 400a79c:	1947883a 	add	r3,r3,r5
 400a7a0:	40c7883a 	add	r3,r8,r3
 400a7a4:	350d383a 	mul	r6,r6,r20
 400a7a8:	1940022e 	bgeu	r3,r5,400a7b4 <__udivdi3+0x400>
 400a7ac:	01000074 	movhi	r4,1
 400a7b0:	310d883a 	add	r6,r6,r4
 400a7b4:	1828d43a 	srli	r20,r3,16
 400a7b8:	a18d883a 	add	r6,r20,r6
 400a7bc:	81803e36 	bltu	r16,r6,400a8b8 <__udivdi3+0x504>
 400a7c0:	81803826 	beq	r16,r6,400a8a4 <__udivdi3+0x4f0>
 400a7c4:	0007883a 	mov	r3,zero
 400a7c8:	003fa206 	br	400a654 <__alt_data_end+0xfc00a654>
 400a7cc:	88e2983a 	sll	r17,r17,r3
 400a7d0:	80a8d83a 	srl	r20,r16,r2
 400a7d4:	80e0983a 	sll	r16,r16,r3
 400a7d8:	882ad43a 	srli	r21,r17,16
 400a7dc:	9884d83a 	srl	r2,r19,r2
 400a7e0:	a009883a 	mov	r4,r20
 400a7e4:	a80b883a 	mov	r5,r21
 400a7e8:	142eb03a 	or	r23,r2,r16
 400a7ec:	98e4983a 	sll	r18,r19,r3
 400a7f0:	400afc00 	call	400afc0 <__umodsi3>
 400a7f4:	a009883a 	mov	r4,r20
 400a7f8:	a80b883a 	mov	r5,r21
 400a7fc:	1021883a 	mov	r16,r2
 400a800:	400af5c0 	call	400af5c <__udivsi3>
 400a804:	1039883a 	mov	fp,r2
 400a808:	8d3fffcc 	andi	r20,r17,65535
 400a80c:	8020943a 	slli	r16,r16,16
 400a810:	b804d43a 	srli	r2,r23,16
 400a814:	a72d383a 	mul	r22,r20,fp
 400a818:	1404b03a 	or	r2,r2,r16
 400a81c:	1580062e 	bgeu	r2,r22,400a838 <__udivdi3+0x484>
 400a820:	1445883a 	add	r2,r2,r17
 400a824:	e0ffffc4 	addi	r3,fp,-1
 400a828:	14403836 	bltu	r2,r17,400a90c <__udivdi3+0x558>
 400a82c:	1580372e 	bgeu	r2,r22,400a90c <__udivdi3+0x558>
 400a830:	e73fff84 	addi	fp,fp,-2
 400a834:	1445883a 	add	r2,r2,r17
 400a838:	15adc83a 	sub	r22,r2,r22
 400a83c:	a80b883a 	mov	r5,r21
 400a840:	b009883a 	mov	r4,r22
 400a844:	400afc00 	call	400afc0 <__umodsi3>
 400a848:	1027883a 	mov	r19,r2
 400a84c:	b009883a 	mov	r4,r22
 400a850:	a80b883a 	mov	r5,r21
 400a854:	400af5c0 	call	400af5c <__udivsi3>
 400a858:	9826943a 	slli	r19,r19,16
 400a85c:	a0a1383a 	mul	r16,r20,r2
 400a860:	b93fffcc 	andi	r4,r23,65535
 400a864:	24c8b03a 	or	r4,r4,r19
 400a868:	2400062e 	bgeu	r4,r16,400a884 <__udivdi3+0x4d0>
 400a86c:	2449883a 	add	r4,r4,r17
 400a870:	10ffffc4 	addi	r3,r2,-1
 400a874:	24402336 	bltu	r4,r17,400a904 <__udivdi3+0x550>
 400a878:	2400222e 	bgeu	r4,r16,400a904 <__udivdi3+0x550>
 400a87c:	10bfff84 	addi	r2,r2,-2
 400a880:	2449883a 	add	r4,r4,r17
 400a884:	e038943a 	slli	fp,fp,16
 400a888:	2421c83a 	sub	r16,r4,r16
 400a88c:	e086b03a 	or	r3,fp,r2
 400a890:	003f4306 	br	400a5a0 <__alt_data_end+0xfc00a5a0>
 400a894:	2005883a 	mov	r2,r4
 400a898:	003f6906 	br	400a640 <__alt_data_end+0xfc00a640>
 400a89c:	1805883a 	mov	r2,r3
 400a8a0:	003f0f06 	br	400a4e0 <__alt_data_end+0xfc00a4e0>
 400a8a4:	1806943a 	slli	r3,r3,16
 400a8a8:	9d66983a 	sll	r19,r19,r21
 400a8ac:	39ffffcc 	andi	r7,r7,65535
 400a8b0:	19c7883a 	add	r3,r3,r7
 400a8b4:	98ffc32e 	bgeu	r19,r3,400a7c4 <__alt_data_end+0xfc00a7c4>
 400a8b8:	10bfffc4 	addi	r2,r2,-1
 400a8bc:	003fc106 	br	400a7c4 <__alt_data_end+0xfc00a7c4>
 400a8c0:	00800604 	movi	r2,24
 400a8c4:	003f1106 	br	400a50c <__alt_data_end+0xfc00a50c>
 400a8c8:	00800604 	movi	r2,24
 400a8cc:	003f2706 	br	400a56c <__alt_data_end+0xfc00a56c>
 400a8d0:	00800604 	movi	r2,24
 400a8d4:	003ece06 	br	400a410 <__alt_data_end+0xfc00a410>
 400a8d8:	0007883a 	mov	r3,zero
 400a8dc:	00800044 	movi	r2,1
 400a8e0:	003f5c06 	br	400a654 <__alt_data_end+0xfc00a654>
 400a8e4:	813fa12e 	bgeu	r16,r4,400a76c <__alt_data_end+0xfc00a76c>
 400a8e8:	10bfff84 	addi	r2,r2,-2
 400a8ec:	85e1883a 	add	r16,r16,r23
 400a8f0:	003f9f06 	br	400a770 <__alt_data_end+0xfc00a770>
 400a8f4:	1c7f8a2e 	bgeu	r3,r17,400a720 <__alt_data_end+0xfc00a720>
 400a8f8:	31bfff84 	addi	r6,r6,-2
 400a8fc:	1dc7883a 	add	r3,r3,r23
 400a900:	003f8806 	br	400a724 <__alt_data_end+0xfc00a724>
 400a904:	1805883a 	mov	r2,r3
 400a908:	003fde06 	br	400a884 <__alt_data_end+0xfc00a884>
 400a90c:	1839883a 	mov	fp,r3
 400a910:	003fc906 	br	400a838 <__alt_data_end+0xfc00a838>
 400a914:	b5bfff84 	addi	r22,r22,-2
 400a918:	2449883a 	add	r4,r4,r17
 400a91c:	003f3406 	br	400a5f0 <__alt_data_end+0xfc00a5f0>
 400a920:	b5bfff84 	addi	r22,r22,-2
 400a924:	1445883a 	add	r2,r2,r17
 400a928:	003edb06 	br	400a498 <__alt_data_end+0xfc00a498>

0400a92c <__umoddi3>:
 400a92c:	defff404 	addi	sp,sp,-48
 400a930:	df000a15 	stw	fp,40(sp)
 400a934:	dc400315 	stw	r17,12(sp)
 400a938:	dc000215 	stw	r16,8(sp)
 400a93c:	dfc00b15 	stw	ra,44(sp)
 400a940:	ddc00915 	stw	r23,36(sp)
 400a944:	dd800815 	stw	r22,32(sp)
 400a948:	dd400715 	stw	r21,28(sp)
 400a94c:	dd000615 	stw	r20,24(sp)
 400a950:	dcc00515 	stw	r19,20(sp)
 400a954:	dc800415 	stw	r18,16(sp)
 400a958:	2021883a 	mov	r16,r4
 400a95c:	2823883a 	mov	r17,r5
 400a960:	2839883a 	mov	fp,r5
 400a964:	38003c1e 	bne	r7,zero,400aa58 <__umoddi3+0x12c>
 400a968:	3027883a 	mov	r19,r6
 400a96c:	2029883a 	mov	r20,r4
 400a970:	2980512e 	bgeu	r5,r6,400aab8 <__umoddi3+0x18c>
 400a974:	00bfffd4 	movui	r2,65535
 400a978:	11809a36 	bltu	r2,r6,400abe4 <__umoddi3+0x2b8>
 400a97c:	01003fc4 	movi	r4,255
 400a980:	2189803a 	cmpltu	r4,r4,r6
 400a984:	200890fa 	slli	r4,r4,3
 400a988:	3104d83a 	srl	r2,r6,r4
 400a98c:	00c10074 	movhi	r3,1025
 400a990:	18c1bd04 	addi	r3,r3,1780
 400a994:	1885883a 	add	r2,r3,r2
 400a998:	10c00003 	ldbu	r3,0(r2)
 400a99c:	00800804 	movi	r2,32
 400a9a0:	1909883a 	add	r4,r3,r4
 400a9a4:	1125c83a 	sub	r18,r2,r4
 400a9a8:	90000526 	beq	r18,zero,400a9c0 <__umoddi3+0x94>
 400a9ac:	8ca2983a 	sll	r17,r17,r18
 400a9b0:	8108d83a 	srl	r4,r16,r4
 400a9b4:	34a6983a 	sll	r19,r6,r18
 400a9b8:	84a8983a 	sll	r20,r16,r18
 400a9bc:	2478b03a 	or	fp,r4,r17
 400a9c0:	982ed43a 	srli	r23,r19,16
 400a9c4:	e009883a 	mov	r4,fp
 400a9c8:	9dbfffcc 	andi	r22,r19,65535
 400a9cc:	b80b883a 	mov	r5,r23
 400a9d0:	400afc00 	call	400afc0 <__umodsi3>
 400a9d4:	e009883a 	mov	r4,fp
 400a9d8:	b80b883a 	mov	r5,r23
 400a9dc:	102b883a 	mov	r21,r2
 400a9e0:	400af5c0 	call	400af5c <__udivsi3>
 400a9e4:	a806943a 	slli	r3,r21,16
 400a9e8:	a008d43a 	srli	r4,r20,16
 400a9ec:	b085383a 	mul	r2,r22,r2
 400a9f0:	20c8b03a 	or	r4,r4,r3
 400a9f4:	2080032e 	bgeu	r4,r2,400aa04 <__umoddi3+0xd8>
 400a9f8:	24c9883a 	add	r4,r4,r19
 400a9fc:	24c00136 	bltu	r4,r19,400aa04 <__umoddi3+0xd8>
 400aa00:	20811036 	bltu	r4,r2,400ae44 <__umoddi3+0x518>
 400aa04:	20abc83a 	sub	r21,r4,r2
 400aa08:	b80b883a 	mov	r5,r23
 400aa0c:	a809883a 	mov	r4,r21
 400aa10:	400afc00 	call	400afc0 <__umodsi3>
 400aa14:	1023883a 	mov	r17,r2
 400aa18:	b80b883a 	mov	r5,r23
 400aa1c:	a809883a 	mov	r4,r21
 400aa20:	400af5c0 	call	400af5c <__udivsi3>
 400aa24:	8822943a 	slli	r17,r17,16
 400aa28:	b085383a 	mul	r2,r22,r2
 400aa2c:	a0ffffcc 	andi	r3,r20,65535
 400aa30:	1c46b03a 	or	r3,r3,r17
 400aa34:	1880042e 	bgeu	r3,r2,400aa48 <__umoddi3+0x11c>
 400aa38:	1cc7883a 	add	r3,r3,r19
 400aa3c:	1cc00236 	bltu	r3,r19,400aa48 <__umoddi3+0x11c>
 400aa40:	1880012e 	bgeu	r3,r2,400aa48 <__umoddi3+0x11c>
 400aa44:	1cc7883a 	add	r3,r3,r19
 400aa48:	1885c83a 	sub	r2,r3,r2
 400aa4c:	1484d83a 	srl	r2,r2,r18
 400aa50:	0007883a 	mov	r3,zero
 400aa54:	00004f06 	br	400ab94 <__umoddi3+0x268>
 400aa58:	29c04c36 	bltu	r5,r7,400ab8c <__umoddi3+0x260>
 400aa5c:	00bfffd4 	movui	r2,65535
 400aa60:	11c0582e 	bgeu	r2,r7,400abc4 <__umoddi3+0x298>
 400aa64:	00804034 	movhi	r2,256
 400aa68:	10bfffc4 	addi	r2,r2,-1
 400aa6c:	11c0e736 	bltu	r2,r7,400ae0c <__umoddi3+0x4e0>
 400aa70:	01000404 	movi	r4,16
 400aa74:	3904d83a 	srl	r2,r7,r4
 400aa78:	00c10074 	movhi	r3,1025
 400aa7c:	18c1bd04 	addi	r3,r3,1780
 400aa80:	1885883a 	add	r2,r3,r2
 400aa84:	14c00003 	ldbu	r19,0(r2)
 400aa88:	00c00804 	movi	r3,32
 400aa8c:	9927883a 	add	r19,r19,r4
 400aa90:	1ce9c83a 	sub	r20,r3,r19
 400aa94:	a000581e 	bne	r20,zero,400abf8 <__umoddi3+0x2cc>
 400aa98:	3c400136 	bltu	r7,r17,400aaa0 <__umoddi3+0x174>
 400aa9c:	8180eb36 	bltu	r16,r6,400ae4c <__umoddi3+0x520>
 400aaa0:	8185c83a 	sub	r2,r16,r6
 400aaa4:	89e3c83a 	sub	r17,r17,r7
 400aaa8:	8089803a 	cmpltu	r4,r16,r2
 400aaac:	8939c83a 	sub	fp,r17,r4
 400aab0:	e007883a 	mov	r3,fp
 400aab4:	00003706 	br	400ab94 <__umoddi3+0x268>
 400aab8:	3000041e 	bne	r6,zero,400aacc <__umoddi3+0x1a0>
 400aabc:	000b883a 	mov	r5,zero
 400aac0:	01000044 	movi	r4,1
 400aac4:	400af5c0 	call	400af5c <__udivsi3>
 400aac8:	1027883a 	mov	r19,r2
 400aacc:	00bfffd4 	movui	r2,65535
 400aad0:	14c0402e 	bgeu	r2,r19,400abd4 <__umoddi3+0x2a8>
 400aad4:	00804034 	movhi	r2,256
 400aad8:	10bfffc4 	addi	r2,r2,-1
 400aadc:	14c0cd36 	bltu	r2,r19,400ae14 <__umoddi3+0x4e8>
 400aae0:	00800404 	movi	r2,16
 400aae4:	9886d83a 	srl	r3,r19,r2
 400aae8:	01010074 	movhi	r4,1025
 400aaec:	2101bd04 	addi	r4,r4,1780
 400aaf0:	20c7883a 	add	r3,r4,r3
 400aaf4:	18c00003 	ldbu	r3,0(r3)
 400aaf8:	1887883a 	add	r3,r3,r2
 400aafc:	00800804 	movi	r2,32
 400ab00:	10e5c83a 	sub	r18,r2,r3
 400ab04:	9000901e 	bne	r18,zero,400ad48 <__umoddi3+0x41c>
 400ab08:	982cd43a 	srli	r22,r19,16
 400ab0c:	8ce3c83a 	sub	r17,r17,r19
 400ab10:	9d7fffcc 	andi	r21,r19,65535
 400ab14:	b00b883a 	mov	r5,r22
 400ab18:	8809883a 	mov	r4,r17
 400ab1c:	400afc00 	call	400afc0 <__umodsi3>
 400ab20:	8809883a 	mov	r4,r17
 400ab24:	b00b883a 	mov	r5,r22
 400ab28:	1021883a 	mov	r16,r2
 400ab2c:	400af5c0 	call	400af5c <__udivsi3>
 400ab30:	8006943a 	slli	r3,r16,16
 400ab34:	a008d43a 	srli	r4,r20,16
 400ab38:	1545383a 	mul	r2,r2,r21
 400ab3c:	20c8b03a 	or	r4,r4,r3
 400ab40:	2080042e 	bgeu	r4,r2,400ab54 <__umoddi3+0x228>
 400ab44:	24c9883a 	add	r4,r4,r19
 400ab48:	24c00236 	bltu	r4,r19,400ab54 <__umoddi3+0x228>
 400ab4c:	2080012e 	bgeu	r4,r2,400ab54 <__umoddi3+0x228>
 400ab50:	24c9883a 	add	r4,r4,r19
 400ab54:	20a1c83a 	sub	r16,r4,r2
 400ab58:	b00b883a 	mov	r5,r22
 400ab5c:	8009883a 	mov	r4,r16
 400ab60:	400afc00 	call	400afc0 <__umodsi3>
 400ab64:	1023883a 	mov	r17,r2
 400ab68:	b00b883a 	mov	r5,r22
 400ab6c:	8009883a 	mov	r4,r16
 400ab70:	400af5c0 	call	400af5c <__udivsi3>
 400ab74:	8822943a 	slli	r17,r17,16
 400ab78:	1545383a 	mul	r2,r2,r21
 400ab7c:	a53fffcc 	andi	r20,r20,65535
 400ab80:	a446b03a 	or	r3,r20,r17
 400ab84:	18bfb02e 	bgeu	r3,r2,400aa48 <__alt_data_end+0xfc00aa48>
 400ab88:	003fab06 	br	400aa38 <__alt_data_end+0xfc00aa38>
 400ab8c:	2005883a 	mov	r2,r4
 400ab90:	2807883a 	mov	r3,r5
 400ab94:	dfc00b17 	ldw	ra,44(sp)
 400ab98:	df000a17 	ldw	fp,40(sp)
 400ab9c:	ddc00917 	ldw	r23,36(sp)
 400aba0:	dd800817 	ldw	r22,32(sp)
 400aba4:	dd400717 	ldw	r21,28(sp)
 400aba8:	dd000617 	ldw	r20,24(sp)
 400abac:	dcc00517 	ldw	r19,20(sp)
 400abb0:	dc800417 	ldw	r18,16(sp)
 400abb4:	dc400317 	ldw	r17,12(sp)
 400abb8:	dc000217 	ldw	r16,8(sp)
 400abbc:	dec00c04 	addi	sp,sp,48
 400abc0:	f800283a 	ret
 400abc4:	04c03fc4 	movi	r19,255
 400abc8:	99c9803a 	cmpltu	r4,r19,r7
 400abcc:	200890fa 	slli	r4,r4,3
 400abd0:	003fa806 	br	400aa74 <__alt_data_end+0xfc00aa74>
 400abd4:	00803fc4 	movi	r2,255
 400abd8:	14c5803a 	cmpltu	r2,r2,r19
 400abdc:	100490fa 	slli	r2,r2,3
 400abe0:	003fc006 	br	400aae4 <__alt_data_end+0xfc00aae4>
 400abe4:	00804034 	movhi	r2,256
 400abe8:	10bfffc4 	addi	r2,r2,-1
 400abec:	11808b36 	bltu	r2,r6,400ae1c <__umoddi3+0x4f0>
 400abf0:	01000404 	movi	r4,16
 400abf4:	003f6406 	br	400a988 <__alt_data_end+0xfc00a988>
 400abf8:	34c4d83a 	srl	r2,r6,r19
 400abfc:	3d0e983a 	sll	r7,r7,r20
 400ac00:	8cf8d83a 	srl	fp,r17,r19
 400ac04:	8d10983a 	sll	r8,r17,r20
 400ac08:	38aab03a 	or	r21,r7,r2
 400ac0c:	a82cd43a 	srli	r22,r21,16
 400ac10:	84e2d83a 	srl	r17,r16,r19
 400ac14:	e009883a 	mov	r4,fp
 400ac18:	b00b883a 	mov	r5,r22
 400ac1c:	8a22b03a 	or	r17,r17,r8
 400ac20:	3524983a 	sll	r18,r6,r20
 400ac24:	400afc00 	call	400afc0 <__umodsi3>
 400ac28:	e009883a 	mov	r4,fp
 400ac2c:	b00b883a 	mov	r5,r22
 400ac30:	102f883a 	mov	r23,r2
 400ac34:	400af5c0 	call	400af5c <__udivsi3>
 400ac38:	100d883a 	mov	r6,r2
 400ac3c:	b808943a 	slli	r4,r23,16
 400ac40:	aa3fffcc 	andi	r8,r21,65535
 400ac44:	8804d43a 	srli	r2,r17,16
 400ac48:	41af383a 	mul	r23,r8,r6
 400ac4c:	8520983a 	sll	r16,r16,r20
 400ac50:	1104b03a 	or	r2,r2,r4
 400ac54:	15c0042e 	bgeu	r2,r23,400ac68 <__umoddi3+0x33c>
 400ac58:	1545883a 	add	r2,r2,r21
 400ac5c:	30ffffc4 	addi	r3,r6,-1
 400ac60:	1540742e 	bgeu	r2,r21,400ae34 <__umoddi3+0x508>
 400ac64:	180d883a 	mov	r6,r3
 400ac68:	15efc83a 	sub	r23,r2,r23
 400ac6c:	b00b883a 	mov	r5,r22
 400ac70:	b809883a 	mov	r4,r23
 400ac74:	d9800115 	stw	r6,4(sp)
 400ac78:	da000015 	stw	r8,0(sp)
 400ac7c:	400afc00 	call	400afc0 <__umodsi3>
 400ac80:	b00b883a 	mov	r5,r22
 400ac84:	b809883a 	mov	r4,r23
 400ac88:	1039883a 	mov	fp,r2
 400ac8c:	400af5c0 	call	400af5c <__udivsi3>
 400ac90:	da000017 	ldw	r8,0(sp)
 400ac94:	e038943a 	slli	fp,fp,16
 400ac98:	100b883a 	mov	r5,r2
 400ac9c:	4089383a 	mul	r4,r8,r2
 400aca0:	8a3fffcc 	andi	r8,r17,65535
 400aca4:	4710b03a 	or	r8,r8,fp
 400aca8:	d9800117 	ldw	r6,4(sp)
 400acac:	4100042e 	bgeu	r8,r4,400acc0 <__umoddi3+0x394>
 400acb0:	4551883a 	add	r8,r8,r21
 400acb4:	10bfffc4 	addi	r2,r2,-1
 400acb8:	45405a2e 	bgeu	r8,r21,400ae24 <__umoddi3+0x4f8>
 400acbc:	100b883a 	mov	r5,r2
 400acc0:	300c943a 	slli	r6,r6,16
 400acc4:	91ffffcc 	andi	r7,r18,65535
 400acc8:	9004d43a 	srli	r2,r18,16
 400accc:	314cb03a 	or	r6,r6,r5
 400acd0:	317fffcc 	andi	r5,r6,65535
 400acd4:	300cd43a 	srli	r6,r6,16
 400acd8:	29d3383a 	mul	r9,r5,r7
 400acdc:	288b383a 	mul	r5,r5,r2
 400ace0:	31cf383a 	mul	r7,r6,r7
 400ace4:	4806d43a 	srli	r3,r9,16
 400ace8:	4111c83a 	sub	r8,r8,r4
 400acec:	29cb883a 	add	r5,r5,r7
 400acf0:	194b883a 	add	r5,r3,r5
 400acf4:	3085383a 	mul	r2,r6,r2
 400acf8:	29c0022e 	bgeu	r5,r7,400ad04 <__umoddi3+0x3d8>
 400acfc:	00c00074 	movhi	r3,1
 400ad00:	10c5883a 	add	r2,r2,r3
 400ad04:	2808d43a 	srli	r4,r5,16
 400ad08:	280a943a 	slli	r5,r5,16
 400ad0c:	4a7fffcc 	andi	r9,r9,65535
 400ad10:	2085883a 	add	r2,r4,r2
 400ad14:	2a4b883a 	add	r5,r5,r9
 400ad18:	40803636 	bltu	r8,r2,400adf4 <__umoddi3+0x4c8>
 400ad1c:	40804d26 	beq	r8,r2,400ae54 <__umoddi3+0x528>
 400ad20:	4089c83a 	sub	r4,r8,r2
 400ad24:	280f883a 	mov	r7,r5
 400ad28:	81cfc83a 	sub	r7,r16,r7
 400ad2c:	81c7803a 	cmpltu	r3,r16,r7
 400ad30:	20c7c83a 	sub	r3,r4,r3
 400ad34:	1cc4983a 	sll	r2,r3,r19
 400ad38:	3d0ed83a 	srl	r7,r7,r20
 400ad3c:	1d06d83a 	srl	r3,r3,r20
 400ad40:	11c4b03a 	or	r2,r2,r7
 400ad44:	003f9306 	br	400ab94 <__alt_data_end+0xfc00ab94>
 400ad48:	9ca6983a 	sll	r19,r19,r18
 400ad4c:	88e8d83a 	srl	r20,r17,r3
 400ad50:	80c4d83a 	srl	r2,r16,r3
 400ad54:	982cd43a 	srli	r22,r19,16
 400ad58:	8ca2983a 	sll	r17,r17,r18
 400ad5c:	a009883a 	mov	r4,r20
 400ad60:	b00b883a 	mov	r5,r22
 400ad64:	1478b03a 	or	fp,r2,r17
 400ad68:	400afc00 	call	400afc0 <__umodsi3>
 400ad6c:	a009883a 	mov	r4,r20
 400ad70:	b00b883a 	mov	r5,r22
 400ad74:	1023883a 	mov	r17,r2
 400ad78:	400af5c0 	call	400af5c <__udivsi3>
 400ad7c:	9d7fffcc 	andi	r21,r19,65535
 400ad80:	880a943a 	slli	r5,r17,16
 400ad84:	e008d43a 	srli	r4,fp,16
 400ad88:	a885383a 	mul	r2,r21,r2
 400ad8c:	84a8983a 	sll	r20,r16,r18
 400ad90:	2148b03a 	or	r4,r4,r5
 400ad94:	2080042e 	bgeu	r4,r2,400ada8 <__umoddi3+0x47c>
 400ad98:	24c9883a 	add	r4,r4,r19
 400ad9c:	24c00236 	bltu	r4,r19,400ada8 <__umoddi3+0x47c>
 400ada0:	2080012e 	bgeu	r4,r2,400ada8 <__umoddi3+0x47c>
 400ada4:	24c9883a 	add	r4,r4,r19
 400ada8:	20a3c83a 	sub	r17,r4,r2
 400adac:	b00b883a 	mov	r5,r22
 400adb0:	8809883a 	mov	r4,r17
 400adb4:	400afc00 	call	400afc0 <__umodsi3>
 400adb8:	102f883a 	mov	r23,r2
 400adbc:	8809883a 	mov	r4,r17
 400adc0:	b00b883a 	mov	r5,r22
 400adc4:	400af5c0 	call	400af5c <__udivsi3>
 400adc8:	b82e943a 	slli	r23,r23,16
 400adcc:	a885383a 	mul	r2,r21,r2
 400add0:	e13fffcc 	andi	r4,fp,65535
 400add4:	25c8b03a 	or	r4,r4,r23
 400add8:	2080042e 	bgeu	r4,r2,400adec <__umoddi3+0x4c0>
 400addc:	24c9883a 	add	r4,r4,r19
 400ade0:	24c00236 	bltu	r4,r19,400adec <__umoddi3+0x4c0>
 400ade4:	2080012e 	bgeu	r4,r2,400adec <__umoddi3+0x4c0>
 400ade8:	24c9883a 	add	r4,r4,r19
 400adec:	20a3c83a 	sub	r17,r4,r2
 400adf0:	003f4806 	br	400ab14 <__alt_data_end+0xfc00ab14>
 400adf4:	2c8fc83a 	sub	r7,r5,r18
 400adf8:	1545c83a 	sub	r2,r2,r21
 400adfc:	29cb803a 	cmpltu	r5,r5,r7
 400ae00:	1145c83a 	sub	r2,r2,r5
 400ae04:	4089c83a 	sub	r4,r8,r2
 400ae08:	003fc706 	br	400ad28 <__alt_data_end+0xfc00ad28>
 400ae0c:	01000604 	movi	r4,24
 400ae10:	003f1806 	br	400aa74 <__alt_data_end+0xfc00aa74>
 400ae14:	00800604 	movi	r2,24
 400ae18:	003f3206 	br	400aae4 <__alt_data_end+0xfc00aae4>
 400ae1c:	01000604 	movi	r4,24
 400ae20:	003ed906 	br	400a988 <__alt_data_end+0xfc00a988>
 400ae24:	413fa52e 	bgeu	r8,r4,400acbc <__alt_data_end+0xfc00acbc>
 400ae28:	297fff84 	addi	r5,r5,-2
 400ae2c:	4551883a 	add	r8,r8,r21
 400ae30:	003fa306 	br	400acc0 <__alt_data_end+0xfc00acc0>
 400ae34:	15ff8b2e 	bgeu	r2,r23,400ac64 <__alt_data_end+0xfc00ac64>
 400ae38:	31bfff84 	addi	r6,r6,-2
 400ae3c:	1545883a 	add	r2,r2,r21
 400ae40:	003f8906 	br	400ac68 <__alt_data_end+0xfc00ac68>
 400ae44:	24c9883a 	add	r4,r4,r19
 400ae48:	003eee06 	br	400aa04 <__alt_data_end+0xfc00aa04>
 400ae4c:	8005883a 	mov	r2,r16
 400ae50:	003f1706 	br	400aab0 <__alt_data_end+0xfc00aab0>
 400ae54:	817fe736 	bltu	r16,r5,400adf4 <__alt_data_end+0xfc00adf4>
 400ae58:	280f883a 	mov	r7,r5
 400ae5c:	0009883a 	mov	r4,zero
 400ae60:	003fb106 	br	400ad28 <__alt_data_end+0xfc00ad28>

0400ae64 <__divsi3>:
 400ae64:	20001b16 	blt	r4,zero,400aed4 <__divsi3+0x70>
 400ae68:	000f883a 	mov	r7,zero
 400ae6c:	28001616 	blt	r5,zero,400aec8 <__divsi3+0x64>
 400ae70:	200d883a 	mov	r6,r4
 400ae74:	29001a2e 	bgeu	r5,r4,400aee0 <__divsi3+0x7c>
 400ae78:	00800804 	movi	r2,32
 400ae7c:	00c00044 	movi	r3,1
 400ae80:	00000106 	br	400ae88 <__divsi3+0x24>
 400ae84:	10000d26 	beq	r2,zero,400aebc <__divsi3+0x58>
 400ae88:	294b883a 	add	r5,r5,r5
 400ae8c:	10bfffc4 	addi	r2,r2,-1
 400ae90:	18c7883a 	add	r3,r3,r3
 400ae94:	293ffb36 	bltu	r5,r4,400ae84 <__alt_data_end+0xfc00ae84>
 400ae98:	0005883a 	mov	r2,zero
 400ae9c:	18000726 	beq	r3,zero,400aebc <__divsi3+0x58>
 400aea0:	0005883a 	mov	r2,zero
 400aea4:	31400236 	bltu	r6,r5,400aeb0 <__divsi3+0x4c>
 400aea8:	314dc83a 	sub	r6,r6,r5
 400aeac:	10c4b03a 	or	r2,r2,r3
 400aeb0:	1806d07a 	srli	r3,r3,1
 400aeb4:	280ad07a 	srli	r5,r5,1
 400aeb8:	183ffa1e 	bne	r3,zero,400aea4 <__alt_data_end+0xfc00aea4>
 400aebc:	38000126 	beq	r7,zero,400aec4 <__divsi3+0x60>
 400aec0:	0085c83a 	sub	r2,zero,r2
 400aec4:	f800283a 	ret
 400aec8:	014bc83a 	sub	r5,zero,r5
 400aecc:	39c0005c 	xori	r7,r7,1
 400aed0:	003fe706 	br	400ae70 <__alt_data_end+0xfc00ae70>
 400aed4:	0109c83a 	sub	r4,zero,r4
 400aed8:	01c00044 	movi	r7,1
 400aedc:	003fe306 	br	400ae6c <__alt_data_end+0xfc00ae6c>
 400aee0:	00c00044 	movi	r3,1
 400aee4:	003fee06 	br	400aea0 <__alt_data_end+0xfc00aea0>

0400aee8 <__modsi3>:
 400aee8:	20001716 	blt	r4,zero,400af48 <__modsi3+0x60>
 400aeec:	000f883a 	mov	r7,zero
 400aef0:	2005883a 	mov	r2,r4
 400aef4:	28001216 	blt	r5,zero,400af40 <__modsi3+0x58>
 400aef8:	2900162e 	bgeu	r5,r4,400af54 <__modsi3+0x6c>
 400aefc:	01800804 	movi	r6,32
 400af00:	00c00044 	movi	r3,1
 400af04:	00000106 	br	400af0c <__modsi3+0x24>
 400af08:	30000a26 	beq	r6,zero,400af34 <__modsi3+0x4c>
 400af0c:	294b883a 	add	r5,r5,r5
 400af10:	31bfffc4 	addi	r6,r6,-1
 400af14:	18c7883a 	add	r3,r3,r3
 400af18:	293ffb36 	bltu	r5,r4,400af08 <__alt_data_end+0xfc00af08>
 400af1c:	18000526 	beq	r3,zero,400af34 <__modsi3+0x4c>
 400af20:	1806d07a 	srli	r3,r3,1
 400af24:	11400136 	bltu	r2,r5,400af2c <__modsi3+0x44>
 400af28:	1145c83a 	sub	r2,r2,r5
 400af2c:	280ad07a 	srli	r5,r5,1
 400af30:	183ffb1e 	bne	r3,zero,400af20 <__alt_data_end+0xfc00af20>
 400af34:	38000126 	beq	r7,zero,400af3c <__modsi3+0x54>
 400af38:	0085c83a 	sub	r2,zero,r2
 400af3c:	f800283a 	ret
 400af40:	014bc83a 	sub	r5,zero,r5
 400af44:	003fec06 	br	400aef8 <__alt_data_end+0xfc00aef8>
 400af48:	0109c83a 	sub	r4,zero,r4
 400af4c:	01c00044 	movi	r7,1
 400af50:	003fe706 	br	400aef0 <__alt_data_end+0xfc00aef0>
 400af54:	00c00044 	movi	r3,1
 400af58:	003ff106 	br	400af20 <__alt_data_end+0xfc00af20>

0400af5c <__udivsi3>:
 400af5c:	200d883a 	mov	r6,r4
 400af60:	2900152e 	bgeu	r5,r4,400afb8 <__udivsi3+0x5c>
 400af64:	28001416 	blt	r5,zero,400afb8 <__udivsi3+0x5c>
 400af68:	00800804 	movi	r2,32
 400af6c:	00c00044 	movi	r3,1
 400af70:	00000206 	br	400af7c <__udivsi3+0x20>
 400af74:	10000e26 	beq	r2,zero,400afb0 <__udivsi3+0x54>
 400af78:	28000516 	blt	r5,zero,400af90 <__udivsi3+0x34>
 400af7c:	294b883a 	add	r5,r5,r5
 400af80:	10bfffc4 	addi	r2,r2,-1
 400af84:	18c7883a 	add	r3,r3,r3
 400af88:	293ffa36 	bltu	r5,r4,400af74 <__alt_data_end+0xfc00af74>
 400af8c:	18000826 	beq	r3,zero,400afb0 <__udivsi3+0x54>
 400af90:	0005883a 	mov	r2,zero
 400af94:	31400236 	bltu	r6,r5,400afa0 <__udivsi3+0x44>
 400af98:	314dc83a 	sub	r6,r6,r5
 400af9c:	10c4b03a 	or	r2,r2,r3
 400afa0:	1806d07a 	srli	r3,r3,1
 400afa4:	280ad07a 	srli	r5,r5,1
 400afa8:	183ffa1e 	bne	r3,zero,400af94 <__alt_data_end+0xfc00af94>
 400afac:	f800283a 	ret
 400afb0:	0005883a 	mov	r2,zero
 400afb4:	f800283a 	ret
 400afb8:	00c00044 	movi	r3,1
 400afbc:	003ff406 	br	400af90 <__alt_data_end+0xfc00af90>

0400afc0 <__umodsi3>:
 400afc0:	2005883a 	mov	r2,r4
 400afc4:	2900122e 	bgeu	r5,r4,400b010 <__umodsi3+0x50>
 400afc8:	28001116 	blt	r5,zero,400b010 <__umodsi3+0x50>
 400afcc:	01800804 	movi	r6,32
 400afd0:	00c00044 	movi	r3,1
 400afd4:	00000206 	br	400afe0 <__umodsi3+0x20>
 400afd8:	30000c26 	beq	r6,zero,400b00c <__umodsi3+0x4c>
 400afdc:	28000516 	blt	r5,zero,400aff4 <__umodsi3+0x34>
 400afe0:	294b883a 	add	r5,r5,r5
 400afe4:	31bfffc4 	addi	r6,r6,-1
 400afe8:	18c7883a 	add	r3,r3,r3
 400afec:	293ffa36 	bltu	r5,r4,400afd8 <__alt_data_end+0xfc00afd8>
 400aff0:	18000626 	beq	r3,zero,400b00c <__umodsi3+0x4c>
 400aff4:	1806d07a 	srli	r3,r3,1
 400aff8:	11400136 	bltu	r2,r5,400b000 <__umodsi3+0x40>
 400affc:	1145c83a 	sub	r2,r2,r5
 400b000:	280ad07a 	srli	r5,r5,1
 400b004:	183ffb1e 	bne	r3,zero,400aff4 <__alt_data_end+0xfc00aff4>
 400b008:	f800283a 	ret
 400b00c:	f800283a 	ret
 400b010:	00c00044 	movi	r3,1
 400b014:	003ff706 	br	400aff4 <__alt_data_end+0xfc00aff4>

0400b018 <__adddf3>:
 400b018:	02c00434 	movhi	r11,16
 400b01c:	5affffc4 	addi	r11,r11,-1
 400b020:	2806d7fa 	srli	r3,r5,31
 400b024:	2ad4703a 	and	r10,r5,r11
 400b028:	3ad2703a 	and	r9,r7,r11
 400b02c:	3804d53a 	srli	r2,r7,20
 400b030:	3018d77a 	srli	r12,r6,29
 400b034:	280ad53a 	srli	r5,r5,20
 400b038:	501490fa 	slli	r10,r10,3
 400b03c:	2010d77a 	srli	r8,r4,29
 400b040:	481290fa 	slli	r9,r9,3
 400b044:	380ed7fa 	srli	r7,r7,31
 400b048:	defffb04 	addi	sp,sp,-20
 400b04c:	dc800215 	stw	r18,8(sp)
 400b050:	dc400115 	stw	r17,4(sp)
 400b054:	dc000015 	stw	r16,0(sp)
 400b058:	dfc00415 	stw	ra,16(sp)
 400b05c:	dcc00315 	stw	r19,12(sp)
 400b060:	1c803fcc 	andi	r18,r3,255
 400b064:	2c01ffcc 	andi	r16,r5,2047
 400b068:	5210b03a 	or	r8,r10,r8
 400b06c:	202290fa 	slli	r17,r4,3
 400b070:	1081ffcc 	andi	r2,r2,2047
 400b074:	4b12b03a 	or	r9,r9,r12
 400b078:	300c90fa 	slli	r6,r6,3
 400b07c:	91c07526 	beq	r18,r7,400b254 <__adddf3+0x23c>
 400b080:	8087c83a 	sub	r3,r16,r2
 400b084:	00c0ab0e 	bge	zero,r3,400b334 <__adddf3+0x31c>
 400b088:	10002a1e 	bne	r2,zero,400b134 <__adddf3+0x11c>
 400b08c:	4984b03a 	or	r2,r9,r6
 400b090:	1000961e 	bne	r2,zero,400b2ec <__adddf3+0x2d4>
 400b094:	888001cc 	andi	r2,r17,7
 400b098:	10000726 	beq	r2,zero,400b0b8 <__adddf3+0xa0>
 400b09c:	888003cc 	andi	r2,r17,15
 400b0a0:	00c00104 	movi	r3,4
 400b0a4:	10c00426 	beq	r2,r3,400b0b8 <__adddf3+0xa0>
 400b0a8:	88c7883a 	add	r3,r17,r3
 400b0ac:	1c63803a 	cmpltu	r17,r3,r17
 400b0b0:	4451883a 	add	r8,r8,r17
 400b0b4:	1823883a 	mov	r17,r3
 400b0b8:	4080202c 	andhi	r2,r8,128
 400b0bc:	10005926 	beq	r2,zero,400b224 <__adddf3+0x20c>
 400b0c0:	84000044 	addi	r16,r16,1
 400b0c4:	0081ffc4 	movi	r2,2047
 400b0c8:	8080ba26 	beq	r16,r2,400b3b4 <__adddf3+0x39c>
 400b0cc:	00bfe034 	movhi	r2,65408
 400b0d0:	10bfffc4 	addi	r2,r2,-1
 400b0d4:	4090703a 	and	r8,r8,r2
 400b0d8:	4004977a 	slli	r2,r8,29
 400b0dc:	4010927a 	slli	r8,r8,9
 400b0e0:	8822d0fa 	srli	r17,r17,3
 400b0e4:	8401ffcc 	andi	r16,r16,2047
 400b0e8:	4010d33a 	srli	r8,r8,12
 400b0ec:	9007883a 	mov	r3,r18
 400b0f0:	1444b03a 	or	r2,r2,r17
 400b0f4:	8401ffcc 	andi	r16,r16,2047
 400b0f8:	8020953a 	slli	r16,r16,20
 400b0fc:	18c03fcc 	andi	r3,r3,255
 400b100:	01000434 	movhi	r4,16
 400b104:	213fffc4 	addi	r4,r4,-1
 400b108:	180697fa 	slli	r3,r3,31
 400b10c:	4110703a 	and	r8,r8,r4
 400b110:	4410b03a 	or	r8,r8,r16
 400b114:	40c6b03a 	or	r3,r8,r3
 400b118:	dfc00417 	ldw	ra,16(sp)
 400b11c:	dcc00317 	ldw	r19,12(sp)
 400b120:	dc800217 	ldw	r18,8(sp)
 400b124:	dc400117 	ldw	r17,4(sp)
 400b128:	dc000017 	ldw	r16,0(sp)
 400b12c:	dec00504 	addi	sp,sp,20
 400b130:	f800283a 	ret
 400b134:	0081ffc4 	movi	r2,2047
 400b138:	80bfd626 	beq	r16,r2,400b094 <__alt_data_end+0xfc00b094>
 400b13c:	4a402034 	orhi	r9,r9,128
 400b140:	00800e04 	movi	r2,56
 400b144:	10c09f16 	blt	r2,r3,400b3c4 <__adddf3+0x3ac>
 400b148:	008007c4 	movi	r2,31
 400b14c:	10c0c216 	blt	r2,r3,400b458 <__adddf3+0x440>
 400b150:	00800804 	movi	r2,32
 400b154:	10c5c83a 	sub	r2,r2,r3
 400b158:	488a983a 	sll	r5,r9,r2
 400b15c:	30c8d83a 	srl	r4,r6,r3
 400b160:	3084983a 	sll	r2,r6,r2
 400b164:	48c6d83a 	srl	r3,r9,r3
 400b168:	290cb03a 	or	r6,r5,r4
 400b16c:	1004c03a 	cmpne	r2,r2,zero
 400b170:	308cb03a 	or	r6,r6,r2
 400b174:	898dc83a 	sub	r6,r17,r6
 400b178:	89a3803a 	cmpltu	r17,r17,r6
 400b17c:	40d1c83a 	sub	r8,r8,r3
 400b180:	4451c83a 	sub	r8,r8,r17
 400b184:	3023883a 	mov	r17,r6
 400b188:	4080202c 	andhi	r2,r8,128
 400b18c:	10002326 	beq	r2,zero,400b21c <__adddf3+0x204>
 400b190:	04c02034 	movhi	r19,128
 400b194:	9cffffc4 	addi	r19,r19,-1
 400b198:	44e6703a 	and	r19,r8,r19
 400b19c:	98007626 	beq	r19,zero,400b378 <__adddf3+0x360>
 400b1a0:	9809883a 	mov	r4,r19
 400b1a4:	400d61c0 	call	400d61c <__clzsi2>
 400b1a8:	10fffe04 	addi	r3,r2,-8
 400b1ac:	010007c4 	movi	r4,31
 400b1b0:	20c07716 	blt	r4,r3,400b390 <__adddf3+0x378>
 400b1b4:	00800804 	movi	r2,32
 400b1b8:	10c5c83a 	sub	r2,r2,r3
 400b1bc:	8884d83a 	srl	r2,r17,r2
 400b1c0:	98d0983a 	sll	r8,r19,r3
 400b1c4:	88e2983a 	sll	r17,r17,r3
 400b1c8:	1204b03a 	or	r2,r2,r8
 400b1cc:	1c007416 	blt	r3,r16,400b3a0 <__adddf3+0x388>
 400b1d0:	1c21c83a 	sub	r16,r3,r16
 400b1d4:	82000044 	addi	r8,r16,1
 400b1d8:	00c007c4 	movi	r3,31
 400b1dc:	1a009116 	blt	r3,r8,400b424 <__adddf3+0x40c>
 400b1e0:	00c00804 	movi	r3,32
 400b1e4:	1a07c83a 	sub	r3,r3,r8
 400b1e8:	8a08d83a 	srl	r4,r17,r8
 400b1ec:	88e2983a 	sll	r17,r17,r3
 400b1f0:	10c6983a 	sll	r3,r2,r3
 400b1f4:	1210d83a 	srl	r8,r2,r8
 400b1f8:	8804c03a 	cmpne	r2,r17,zero
 400b1fc:	1906b03a 	or	r3,r3,r4
 400b200:	18a2b03a 	or	r17,r3,r2
 400b204:	0021883a 	mov	r16,zero
 400b208:	003fa206 	br	400b094 <__alt_data_end+0xfc00b094>
 400b20c:	1890b03a 	or	r8,r3,r2
 400b210:	40017d26 	beq	r8,zero,400b808 <__adddf3+0x7f0>
 400b214:	1011883a 	mov	r8,r2
 400b218:	1823883a 	mov	r17,r3
 400b21c:	888001cc 	andi	r2,r17,7
 400b220:	103f9e1e 	bne	r2,zero,400b09c <__alt_data_end+0xfc00b09c>
 400b224:	4004977a 	slli	r2,r8,29
 400b228:	8822d0fa 	srli	r17,r17,3
 400b22c:	4010d0fa 	srli	r8,r8,3
 400b230:	9007883a 	mov	r3,r18
 400b234:	1444b03a 	or	r2,r2,r17
 400b238:	0101ffc4 	movi	r4,2047
 400b23c:	81002426 	beq	r16,r4,400b2d0 <__adddf3+0x2b8>
 400b240:	8120703a 	and	r16,r16,r4
 400b244:	01000434 	movhi	r4,16
 400b248:	213fffc4 	addi	r4,r4,-1
 400b24c:	4110703a 	and	r8,r8,r4
 400b250:	003fa806 	br	400b0f4 <__alt_data_end+0xfc00b0f4>
 400b254:	8089c83a 	sub	r4,r16,r2
 400b258:	01005e0e 	bge	zero,r4,400b3d4 <__adddf3+0x3bc>
 400b25c:	10002b26 	beq	r2,zero,400b30c <__adddf3+0x2f4>
 400b260:	0081ffc4 	movi	r2,2047
 400b264:	80bf8b26 	beq	r16,r2,400b094 <__alt_data_end+0xfc00b094>
 400b268:	4a402034 	orhi	r9,r9,128
 400b26c:	00800e04 	movi	r2,56
 400b270:	1100a40e 	bge	r2,r4,400b504 <__adddf3+0x4ec>
 400b274:	498cb03a 	or	r6,r9,r6
 400b278:	300ac03a 	cmpne	r5,r6,zero
 400b27c:	0013883a 	mov	r9,zero
 400b280:	2c4b883a 	add	r5,r5,r17
 400b284:	2c63803a 	cmpltu	r17,r5,r17
 400b288:	4a11883a 	add	r8,r9,r8
 400b28c:	8a11883a 	add	r8,r17,r8
 400b290:	2823883a 	mov	r17,r5
 400b294:	4080202c 	andhi	r2,r8,128
 400b298:	103fe026 	beq	r2,zero,400b21c <__alt_data_end+0xfc00b21c>
 400b29c:	84000044 	addi	r16,r16,1
 400b2a0:	0081ffc4 	movi	r2,2047
 400b2a4:	8080d226 	beq	r16,r2,400b5f0 <__adddf3+0x5d8>
 400b2a8:	00bfe034 	movhi	r2,65408
 400b2ac:	10bfffc4 	addi	r2,r2,-1
 400b2b0:	4090703a 	and	r8,r8,r2
 400b2b4:	880ad07a 	srli	r5,r17,1
 400b2b8:	400897fa 	slli	r4,r8,31
 400b2bc:	88c0004c 	andi	r3,r17,1
 400b2c0:	28e2b03a 	or	r17,r5,r3
 400b2c4:	4010d07a 	srli	r8,r8,1
 400b2c8:	2462b03a 	or	r17,r4,r17
 400b2cc:	003f7106 	br	400b094 <__alt_data_end+0xfc00b094>
 400b2d0:	4088b03a 	or	r4,r8,r2
 400b2d4:	20014526 	beq	r4,zero,400b7ec <__adddf3+0x7d4>
 400b2d8:	01000434 	movhi	r4,16
 400b2dc:	42000234 	orhi	r8,r8,8
 400b2e0:	213fffc4 	addi	r4,r4,-1
 400b2e4:	4110703a 	and	r8,r8,r4
 400b2e8:	003f8206 	br	400b0f4 <__alt_data_end+0xfc00b0f4>
 400b2ec:	18ffffc4 	addi	r3,r3,-1
 400b2f0:	1800491e 	bne	r3,zero,400b418 <__adddf3+0x400>
 400b2f4:	898bc83a 	sub	r5,r17,r6
 400b2f8:	8963803a 	cmpltu	r17,r17,r5
 400b2fc:	4251c83a 	sub	r8,r8,r9
 400b300:	4451c83a 	sub	r8,r8,r17
 400b304:	2823883a 	mov	r17,r5
 400b308:	003f9f06 	br	400b188 <__alt_data_end+0xfc00b188>
 400b30c:	4984b03a 	or	r2,r9,r6
 400b310:	103f6026 	beq	r2,zero,400b094 <__alt_data_end+0xfc00b094>
 400b314:	213fffc4 	addi	r4,r4,-1
 400b318:	2000931e 	bne	r4,zero,400b568 <__adddf3+0x550>
 400b31c:	898d883a 	add	r6,r17,r6
 400b320:	3463803a 	cmpltu	r17,r6,r17
 400b324:	4251883a 	add	r8,r8,r9
 400b328:	8a11883a 	add	r8,r17,r8
 400b32c:	3023883a 	mov	r17,r6
 400b330:	003fd806 	br	400b294 <__alt_data_end+0xfc00b294>
 400b334:	1800541e 	bne	r3,zero,400b488 <__adddf3+0x470>
 400b338:	80800044 	addi	r2,r16,1
 400b33c:	1081ffcc 	andi	r2,r2,2047
 400b340:	00c00044 	movi	r3,1
 400b344:	1880a00e 	bge	r3,r2,400b5c8 <__adddf3+0x5b0>
 400b348:	8989c83a 	sub	r4,r17,r6
 400b34c:	8905803a 	cmpltu	r2,r17,r4
 400b350:	4267c83a 	sub	r19,r8,r9
 400b354:	98a7c83a 	sub	r19,r19,r2
 400b358:	9880202c 	andhi	r2,r19,128
 400b35c:	10006326 	beq	r2,zero,400b4ec <__adddf3+0x4d4>
 400b360:	3463c83a 	sub	r17,r6,r17
 400b364:	4a07c83a 	sub	r3,r9,r8
 400b368:	344d803a 	cmpltu	r6,r6,r17
 400b36c:	19a7c83a 	sub	r19,r3,r6
 400b370:	3825883a 	mov	r18,r7
 400b374:	983f8a1e 	bne	r19,zero,400b1a0 <__alt_data_end+0xfc00b1a0>
 400b378:	8809883a 	mov	r4,r17
 400b37c:	400d61c0 	call	400d61c <__clzsi2>
 400b380:	10800804 	addi	r2,r2,32
 400b384:	10fffe04 	addi	r3,r2,-8
 400b388:	010007c4 	movi	r4,31
 400b38c:	20ff890e 	bge	r4,r3,400b1b4 <__alt_data_end+0xfc00b1b4>
 400b390:	10bff604 	addi	r2,r2,-40
 400b394:	8884983a 	sll	r2,r17,r2
 400b398:	0023883a 	mov	r17,zero
 400b39c:	1c3f8c0e 	bge	r3,r16,400b1d0 <__alt_data_end+0xfc00b1d0>
 400b3a0:	023fe034 	movhi	r8,65408
 400b3a4:	423fffc4 	addi	r8,r8,-1
 400b3a8:	80e1c83a 	sub	r16,r16,r3
 400b3ac:	1210703a 	and	r8,r2,r8
 400b3b0:	003f3806 	br	400b094 <__alt_data_end+0xfc00b094>
 400b3b4:	9007883a 	mov	r3,r18
 400b3b8:	0011883a 	mov	r8,zero
 400b3bc:	0005883a 	mov	r2,zero
 400b3c0:	003f4c06 	br	400b0f4 <__alt_data_end+0xfc00b0f4>
 400b3c4:	498cb03a 	or	r6,r9,r6
 400b3c8:	300cc03a 	cmpne	r6,r6,zero
 400b3cc:	0007883a 	mov	r3,zero
 400b3d0:	003f6806 	br	400b174 <__alt_data_end+0xfc00b174>
 400b3d4:	20009c1e 	bne	r4,zero,400b648 <__adddf3+0x630>
 400b3d8:	80800044 	addi	r2,r16,1
 400b3dc:	1141ffcc 	andi	r5,r2,2047
 400b3e0:	01000044 	movi	r4,1
 400b3e4:	2140670e 	bge	r4,r5,400b584 <__adddf3+0x56c>
 400b3e8:	0101ffc4 	movi	r4,2047
 400b3ec:	11007f26 	beq	r2,r4,400b5ec <__adddf3+0x5d4>
 400b3f0:	898d883a 	add	r6,r17,r6
 400b3f4:	4247883a 	add	r3,r8,r9
 400b3f8:	3451803a 	cmpltu	r8,r6,r17
 400b3fc:	40d1883a 	add	r8,r8,r3
 400b400:	402297fa 	slli	r17,r8,31
 400b404:	300cd07a 	srli	r6,r6,1
 400b408:	4010d07a 	srli	r8,r8,1
 400b40c:	1021883a 	mov	r16,r2
 400b410:	89a2b03a 	or	r17,r17,r6
 400b414:	003f1f06 	br	400b094 <__alt_data_end+0xfc00b094>
 400b418:	0081ffc4 	movi	r2,2047
 400b41c:	80bf481e 	bne	r16,r2,400b140 <__alt_data_end+0xfc00b140>
 400b420:	003f1c06 	br	400b094 <__alt_data_end+0xfc00b094>
 400b424:	843ff844 	addi	r16,r16,-31
 400b428:	01000804 	movi	r4,32
 400b42c:	1406d83a 	srl	r3,r2,r16
 400b430:	41005026 	beq	r8,r4,400b574 <__adddf3+0x55c>
 400b434:	01001004 	movi	r4,64
 400b438:	2211c83a 	sub	r8,r4,r8
 400b43c:	1204983a 	sll	r2,r2,r8
 400b440:	88a2b03a 	or	r17,r17,r2
 400b444:	8822c03a 	cmpne	r17,r17,zero
 400b448:	1c62b03a 	or	r17,r3,r17
 400b44c:	0011883a 	mov	r8,zero
 400b450:	0021883a 	mov	r16,zero
 400b454:	003f7106 	br	400b21c <__alt_data_end+0xfc00b21c>
 400b458:	193ff804 	addi	r4,r3,-32
 400b45c:	00800804 	movi	r2,32
 400b460:	4908d83a 	srl	r4,r9,r4
 400b464:	18804526 	beq	r3,r2,400b57c <__adddf3+0x564>
 400b468:	00801004 	movi	r2,64
 400b46c:	10c5c83a 	sub	r2,r2,r3
 400b470:	4886983a 	sll	r3,r9,r2
 400b474:	198cb03a 	or	r6,r3,r6
 400b478:	300cc03a 	cmpne	r6,r6,zero
 400b47c:	218cb03a 	or	r6,r4,r6
 400b480:	0007883a 	mov	r3,zero
 400b484:	003f3b06 	br	400b174 <__alt_data_end+0xfc00b174>
 400b488:	80002a26 	beq	r16,zero,400b534 <__adddf3+0x51c>
 400b48c:	0101ffc4 	movi	r4,2047
 400b490:	11006826 	beq	r2,r4,400b634 <__adddf3+0x61c>
 400b494:	00c7c83a 	sub	r3,zero,r3
 400b498:	42002034 	orhi	r8,r8,128
 400b49c:	01000e04 	movi	r4,56
 400b4a0:	20c07c16 	blt	r4,r3,400b694 <__adddf3+0x67c>
 400b4a4:	010007c4 	movi	r4,31
 400b4a8:	20c0da16 	blt	r4,r3,400b814 <__adddf3+0x7fc>
 400b4ac:	01000804 	movi	r4,32
 400b4b0:	20c9c83a 	sub	r4,r4,r3
 400b4b4:	4114983a 	sll	r10,r8,r4
 400b4b8:	88cad83a 	srl	r5,r17,r3
 400b4bc:	8908983a 	sll	r4,r17,r4
 400b4c0:	40c6d83a 	srl	r3,r8,r3
 400b4c4:	5162b03a 	or	r17,r10,r5
 400b4c8:	2008c03a 	cmpne	r4,r4,zero
 400b4cc:	8922b03a 	or	r17,r17,r4
 400b4d0:	3463c83a 	sub	r17,r6,r17
 400b4d4:	48c7c83a 	sub	r3,r9,r3
 400b4d8:	344d803a 	cmpltu	r6,r6,r17
 400b4dc:	1991c83a 	sub	r8,r3,r6
 400b4e0:	1021883a 	mov	r16,r2
 400b4e4:	3825883a 	mov	r18,r7
 400b4e8:	003f2706 	br	400b188 <__alt_data_end+0xfc00b188>
 400b4ec:	24d0b03a 	or	r8,r4,r19
 400b4f0:	40001b1e 	bne	r8,zero,400b560 <__adddf3+0x548>
 400b4f4:	0005883a 	mov	r2,zero
 400b4f8:	0007883a 	mov	r3,zero
 400b4fc:	0021883a 	mov	r16,zero
 400b500:	003f4d06 	br	400b238 <__alt_data_end+0xfc00b238>
 400b504:	008007c4 	movi	r2,31
 400b508:	11003c16 	blt	r2,r4,400b5fc <__adddf3+0x5e4>
 400b50c:	00800804 	movi	r2,32
 400b510:	1105c83a 	sub	r2,r2,r4
 400b514:	488e983a 	sll	r7,r9,r2
 400b518:	310ad83a 	srl	r5,r6,r4
 400b51c:	3084983a 	sll	r2,r6,r2
 400b520:	4912d83a 	srl	r9,r9,r4
 400b524:	394ab03a 	or	r5,r7,r5
 400b528:	1004c03a 	cmpne	r2,r2,zero
 400b52c:	288ab03a 	or	r5,r5,r2
 400b530:	003f5306 	br	400b280 <__alt_data_end+0xfc00b280>
 400b534:	4448b03a 	or	r4,r8,r17
 400b538:	20003e26 	beq	r4,zero,400b634 <__adddf3+0x61c>
 400b53c:	00c6303a 	nor	r3,zero,r3
 400b540:	18003a1e 	bne	r3,zero,400b62c <__adddf3+0x614>
 400b544:	3463c83a 	sub	r17,r6,r17
 400b548:	4a07c83a 	sub	r3,r9,r8
 400b54c:	344d803a 	cmpltu	r6,r6,r17
 400b550:	1991c83a 	sub	r8,r3,r6
 400b554:	1021883a 	mov	r16,r2
 400b558:	3825883a 	mov	r18,r7
 400b55c:	003f0a06 	br	400b188 <__alt_data_end+0xfc00b188>
 400b560:	2023883a 	mov	r17,r4
 400b564:	003f0d06 	br	400b19c <__alt_data_end+0xfc00b19c>
 400b568:	0081ffc4 	movi	r2,2047
 400b56c:	80bf3f1e 	bne	r16,r2,400b26c <__alt_data_end+0xfc00b26c>
 400b570:	003ec806 	br	400b094 <__alt_data_end+0xfc00b094>
 400b574:	0005883a 	mov	r2,zero
 400b578:	003fb106 	br	400b440 <__alt_data_end+0xfc00b440>
 400b57c:	0007883a 	mov	r3,zero
 400b580:	003fbc06 	br	400b474 <__alt_data_end+0xfc00b474>
 400b584:	4444b03a 	or	r2,r8,r17
 400b588:	8000871e 	bne	r16,zero,400b7a8 <__adddf3+0x790>
 400b58c:	1000ba26 	beq	r2,zero,400b878 <__adddf3+0x860>
 400b590:	4984b03a 	or	r2,r9,r6
 400b594:	103ebf26 	beq	r2,zero,400b094 <__alt_data_end+0xfc00b094>
 400b598:	8985883a 	add	r2,r17,r6
 400b59c:	4247883a 	add	r3,r8,r9
 400b5a0:	1451803a 	cmpltu	r8,r2,r17
 400b5a4:	40d1883a 	add	r8,r8,r3
 400b5a8:	40c0202c 	andhi	r3,r8,128
 400b5ac:	1023883a 	mov	r17,r2
 400b5b0:	183f1a26 	beq	r3,zero,400b21c <__alt_data_end+0xfc00b21c>
 400b5b4:	00bfe034 	movhi	r2,65408
 400b5b8:	10bfffc4 	addi	r2,r2,-1
 400b5bc:	2021883a 	mov	r16,r4
 400b5c0:	4090703a 	and	r8,r8,r2
 400b5c4:	003eb306 	br	400b094 <__alt_data_end+0xfc00b094>
 400b5c8:	4444b03a 	or	r2,r8,r17
 400b5cc:	8000291e 	bne	r16,zero,400b674 <__adddf3+0x65c>
 400b5d0:	10004b1e 	bne	r2,zero,400b700 <__adddf3+0x6e8>
 400b5d4:	4990b03a 	or	r8,r9,r6
 400b5d8:	40008b26 	beq	r8,zero,400b808 <__adddf3+0x7f0>
 400b5dc:	4811883a 	mov	r8,r9
 400b5e0:	3023883a 	mov	r17,r6
 400b5e4:	3825883a 	mov	r18,r7
 400b5e8:	003eaa06 	br	400b094 <__alt_data_end+0xfc00b094>
 400b5ec:	1021883a 	mov	r16,r2
 400b5f0:	0011883a 	mov	r8,zero
 400b5f4:	0005883a 	mov	r2,zero
 400b5f8:	003f0f06 	br	400b238 <__alt_data_end+0xfc00b238>
 400b5fc:	217ff804 	addi	r5,r4,-32
 400b600:	00800804 	movi	r2,32
 400b604:	494ad83a 	srl	r5,r9,r5
 400b608:	20807d26 	beq	r4,r2,400b800 <__adddf3+0x7e8>
 400b60c:	00801004 	movi	r2,64
 400b610:	1109c83a 	sub	r4,r2,r4
 400b614:	4912983a 	sll	r9,r9,r4
 400b618:	498cb03a 	or	r6,r9,r6
 400b61c:	300cc03a 	cmpne	r6,r6,zero
 400b620:	298ab03a 	or	r5,r5,r6
 400b624:	0013883a 	mov	r9,zero
 400b628:	003f1506 	br	400b280 <__alt_data_end+0xfc00b280>
 400b62c:	0101ffc4 	movi	r4,2047
 400b630:	113f9a1e 	bne	r2,r4,400b49c <__alt_data_end+0xfc00b49c>
 400b634:	4811883a 	mov	r8,r9
 400b638:	3023883a 	mov	r17,r6
 400b63c:	1021883a 	mov	r16,r2
 400b640:	3825883a 	mov	r18,r7
 400b644:	003e9306 	br	400b094 <__alt_data_end+0xfc00b094>
 400b648:	8000161e 	bne	r16,zero,400b6a4 <__adddf3+0x68c>
 400b64c:	444ab03a 	or	r5,r8,r17
 400b650:	28005126 	beq	r5,zero,400b798 <__adddf3+0x780>
 400b654:	0108303a 	nor	r4,zero,r4
 400b658:	20004d1e 	bne	r4,zero,400b790 <__adddf3+0x778>
 400b65c:	89a3883a 	add	r17,r17,r6
 400b660:	4253883a 	add	r9,r8,r9
 400b664:	898d803a 	cmpltu	r6,r17,r6
 400b668:	3251883a 	add	r8,r6,r9
 400b66c:	1021883a 	mov	r16,r2
 400b670:	003f0806 	br	400b294 <__alt_data_end+0xfc00b294>
 400b674:	1000301e 	bne	r2,zero,400b738 <__adddf3+0x720>
 400b678:	4984b03a 	or	r2,r9,r6
 400b67c:	10007126 	beq	r2,zero,400b844 <__adddf3+0x82c>
 400b680:	4811883a 	mov	r8,r9
 400b684:	3023883a 	mov	r17,r6
 400b688:	3825883a 	mov	r18,r7
 400b68c:	0401ffc4 	movi	r16,2047
 400b690:	003e8006 	br	400b094 <__alt_data_end+0xfc00b094>
 400b694:	4462b03a 	or	r17,r8,r17
 400b698:	8822c03a 	cmpne	r17,r17,zero
 400b69c:	0007883a 	mov	r3,zero
 400b6a0:	003f8b06 	br	400b4d0 <__alt_data_end+0xfc00b4d0>
 400b6a4:	0141ffc4 	movi	r5,2047
 400b6a8:	11403b26 	beq	r2,r5,400b798 <__adddf3+0x780>
 400b6ac:	0109c83a 	sub	r4,zero,r4
 400b6b0:	42002034 	orhi	r8,r8,128
 400b6b4:	01400e04 	movi	r5,56
 400b6b8:	29006716 	blt	r5,r4,400b858 <__adddf3+0x840>
 400b6bc:	014007c4 	movi	r5,31
 400b6c0:	29007016 	blt	r5,r4,400b884 <__adddf3+0x86c>
 400b6c4:	01400804 	movi	r5,32
 400b6c8:	290bc83a 	sub	r5,r5,r4
 400b6cc:	4154983a 	sll	r10,r8,r5
 400b6d0:	890ed83a 	srl	r7,r17,r4
 400b6d4:	894a983a 	sll	r5,r17,r5
 400b6d8:	4108d83a 	srl	r4,r8,r4
 400b6dc:	51e2b03a 	or	r17,r10,r7
 400b6e0:	280ac03a 	cmpne	r5,r5,zero
 400b6e4:	8962b03a 	or	r17,r17,r5
 400b6e8:	89a3883a 	add	r17,r17,r6
 400b6ec:	2253883a 	add	r9,r4,r9
 400b6f0:	898d803a 	cmpltu	r6,r17,r6
 400b6f4:	3251883a 	add	r8,r6,r9
 400b6f8:	1021883a 	mov	r16,r2
 400b6fc:	003ee506 	br	400b294 <__alt_data_end+0xfc00b294>
 400b700:	4984b03a 	or	r2,r9,r6
 400b704:	103e6326 	beq	r2,zero,400b094 <__alt_data_end+0xfc00b094>
 400b708:	8987c83a 	sub	r3,r17,r6
 400b70c:	88c9803a 	cmpltu	r4,r17,r3
 400b710:	4245c83a 	sub	r2,r8,r9
 400b714:	1105c83a 	sub	r2,r2,r4
 400b718:	1100202c 	andhi	r4,r2,128
 400b71c:	203ebb26 	beq	r4,zero,400b20c <__alt_data_end+0xfc00b20c>
 400b720:	3463c83a 	sub	r17,r6,r17
 400b724:	4a07c83a 	sub	r3,r9,r8
 400b728:	344d803a 	cmpltu	r6,r6,r17
 400b72c:	1991c83a 	sub	r8,r3,r6
 400b730:	3825883a 	mov	r18,r7
 400b734:	003e5706 	br	400b094 <__alt_data_end+0xfc00b094>
 400b738:	4984b03a 	or	r2,r9,r6
 400b73c:	10002e26 	beq	r2,zero,400b7f8 <__adddf3+0x7e0>
 400b740:	4004d0fa 	srli	r2,r8,3
 400b744:	8822d0fa 	srli	r17,r17,3
 400b748:	4010977a 	slli	r8,r8,29
 400b74c:	10c0022c 	andhi	r3,r2,8
 400b750:	4462b03a 	or	r17,r8,r17
 400b754:	18000826 	beq	r3,zero,400b778 <__adddf3+0x760>
 400b758:	4808d0fa 	srli	r4,r9,3
 400b75c:	20c0022c 	andhi	r3,r4,8
 400b760:	1800051e 	bne	r3,zero,400b778 <__adddf3+0x760>
 400b764:	300cd0fa 	srli	r6,r6,3
 400b768:	4806977a 	slli	r3,r9,29
 400b76c:	2005883a 	mov	r2,r4
 400b770:	3825883a 	mov	r18,r7
 400b774:	19a2b03a 	or	r17,r3,r6
 400b778:	8810d77a 	srli	r8,r17,29
 400b77c:	100490fa 	slli	r2,r2,3
 400b780:	882290fa 	slli	r17,r17,3
 400b784:	0401ffc4 	movi	r16,2047
 400b788:	4090b03a 	or	r8,r8,r2
 400b78c:	003e4106 	br	400b094 <__alt_data_end+0xfc00b094>
 400b790:	0141ffc4 	movi	r5,2047
 400b794:	117fc71e 	bne	r2,r5,400b6b4 <__alt_data_end+0xfc00b6b4>
 400b798:	4811883a 	mov	r8,r9
 400b79c:	3023883a 	mov	r17,r6
 400b7a0:	1021883a 	mov	r16,r2
 400b7a4:	003e3b06 	br	400b094 <__alt_data_end+0xfc00b094>
 400b7a8:	10002f26 	beq	r2,zero,400b868 <__adddf3+0x850>
 400b7ac:	4984b03a 	or	r2,r9,r6
 400b7b0:	10001126 	beq	r2,zero,400b7f8 <__adddf3+0x7e0>
 400b7b4:	4004d0fa 	srli	r2,r8,3
 400b7b8:	8822d0fa 	srli	r17,r17,3
 400b7bc:	4010977a 	slli	r8,r8,29
 400b7c0:	10c0022c 	andhi	r3,r2,8
 400b7c4:	4462b03a 	or	r17,r8,r17
 400b7c8:	183feb26 	beq	r3,zero,400b778 <__alt_data_end+0xfc00b778>
 400b7cc:	4808d0fa 	srli	r4,r9,3
 400b7d0:	20c0022c 	andhi	r3,r4,8
 400b7d4:	183fe81e 	bne	r3,zero,400b778 <__alt_data_end+0xfc00b778>
 400b7d8:	300cd0fa 	srli	r6,r6,3
 400b7dc:	4806977a 	slli	r3,r9,29
 400b7e0:	2005883a 	mov	r2,r4
 400b7e4:	19a2b03a 	or	r17,r3,r6
 400b7e8:	003fe306 	br	400b778 <__alt_data_end+0xfc00b778>
 400b7ec:	0011883a 	mov	r8,zero
 400b7f0:	0005883a 	mov	r2,zero
 400b7f4:	003e3f06 	br	400b0f4 <__alt_data_end+0xfc00b0f4>
 400b7f8:	0401ffc4 	movi	r16,2047
 400b7fc:	003e2506 	br	400b094 <__alt_data_end+0xfc00b094>
 400b800:	0013883a 	mov	r9,zero
 400b804:	003f8406 	br	400b618 <__alt_data_end+0xfc00b618>
 400b808:	0005883a 	mov	r2,zero
 400b80c:	0007883a 	mov	r3,zero
 400b810:	003e8906 	br	400b238 <__alt_data_end+0xfc00b238>
 400b814:	197ff804 	addi	r5,r3,-32
 400b818:	01000804 	movi	r4,32
 400b81c:	414ad83a 	srl	r5,r8,r5
 400b820:	19002426 	beq	r3,r4,400b8b4 <__adddf3+0x89c>
 400b824:	01001004 	movi	r4,64
 400b828:	20c7c83a 	sub	r3,r4,r3
 400b82c:	40c6983a 	sll	r3,r8,r3
 400b830:	1c46b03a 	or	r3,r3,r17
 400b834:	1806c03a 	cmpne	r3,r3,zero
 400b838:	28e2b03a 	or	r17,r5,r3
 400b83c:	0007883a 	mov	r3,zero
 400b840:	003f2306 	br	400b4d0 <__alt_data_end+0xfc00b4d0>
 400b844:	0007883a 	mov	r3,zero
 400b848:	5811883a 	mov	r8,r11
 400b84c:	00bfffc4 	movi	r2,-1
 400b850:	0401ffc4 	movi	r16,2047
 400b854:	003e7806 	br	400b238 <__alt_data_end+0xfc00b238>
 400b858:	4462b03a 	or	r17,r8,r17
 400b85c:	8822c03a 	cmpne	r17,r17,zero
 400b860:	0009883a 	mov	r4,zero
 400b864:	003fa006 	br	400b6e8 <__alt_data_end+0xfc00b6e8>
 400b868:	4811883a 	mov	r8,r9
 400b86c:	3023883a 	mov	r17,r6
 400b870:	0401ffc4 	movi	r16,2047
 400b874:	003e0706 	br	400b094 <__alt_data_end+0xfc00b094>
 400b878:	4811883a 	mov	r8,r9
 400b87c:	3023883a 	mov	r17,r6
 400b880:	003e0406 	br	400b094 <__alt_data_end+0xfc00b094>
 400b884:	21fff804 	addi	r7,r4,-32
 400b888:	01400804 	movi	r5,32
 400b88c:	41ced83a 	srl	r7,r8,r7
 400b890:	21400a26 	beq	r4,r5,400b8bc <__adddf3+0x8a4>
 400b894:	01401004 	movi	r5,64
 400b898:	2909c83a 	sub	r4,r5,r4
 400b89c:	4108983a 	sll	r4,r8,r4
 400b8a0:	2448b03a 	or	r4,r4,r17
 400b8a4:	2008c03a 	cmpne	r4,r4,zero
 400b8a8:	3922b03a 	or	r17,r7,r4
 400b8ac:	0009883a 	mov	r4,zero
 400b8b0:	003f8d06 	br	400b6e8 <__alt_data_end+0xfc00b6e8>
 400b8b4:	0007883a 	mov	r3,zero
 400b8b8:	003fdd06 	br	400b830 <__alt_data_end+0xfc00b830>
 400b8bc:	0009883a 	mov	r4,zero
 400b8c0:	003ff706 	br	400b8a0 <__alt_data_end+0xfc00b8a0>

0400b8c4 <__divdf3>:
 400b8c4:	defff204 	addi	sp,sp,-56
 400b8c8:	dd400915 	stw	r21,36(sp)
 400b8cc:	282ad53a 	srli	r21,r5,20
 400b8d0:	dd000815 	stw	r20,32(sp)
 400b8d4:	2828d7fa 	srli	r20,r5,31
 400b8d8:	dc000415 	stw	r16,16(sp)
 400b8dc:	04000434 	movhi	r16,16
 400b8e0:	df000c15 	stw	fp,48(sp)
 400b8e4:	843fffc4 	addi	r16,r16,-1
 400b8e8:	dfc00d15 	stw	ra,52(sp)
 400b8ec:	ddc00b15 	stw	r23,44(sp)
 400b8f0:	dd800a15 	stw	r22,40(sp)
 400b8f4:	dcc00715 	stw	r19,28(sp)
 400b8f8:	dc800615 	stw	r18,24(sp)
 400b8fc:	dc400515 	stw	r17,20(sp)
 400b900:	ad41ffcc 	andi	r21,r21,2047
 400b904:	2c20703a 	and	r16,r5,r16
 400b908:	a7003fcc 	andi	fp,r20,255
 400b90c:	a8006126 	beq	r21,zero,400ba94 <__divdf3+0x1d0>
 400b910:	0081ffc4 	movi	r2,2047
 400b914:	2025883a 	mov	r18,r4
 400b918:	a8803726 	beq	r21,r2,400b9f8 <__divdf3+0x134>
 400b91c:	80800434 	orhi	r2,r16,16
 400b920:	100490fa 	slli	r2,r2,3
 400b924:	2020d77a 	srli	r16,r4,29
 400b928:	202490fa 	slli	r18,r4,3
 400b92c:	ad7f0044 	addi	r21,r21,-1023
 400b930:	80a0b03a 	or	r16,r16,r2
 400b934:	0027883a 	mov	r19,zero
 400b938:	0013883a 	mov	r9,zero
 400b93c:	3804d53a 	srli	r2,r7,20
 400b940:	382cd7fa 	srli	r22,r7,31
 400b944:	04400434 	movhi	r17,16
 400b948:	8c7fffc4 	addi	r17,r17,-1
 400b94c:	1081ffcc 	andi	r2,r2,2047
 400b950:	3011883a 	mov	r8,r6
 400b954:	3c62703a 	and	r17,r7,r17
 400b958:	b5c03fcc 	andi	r23,r22,255
 400b95c:	10006c26 	beq	r2,zero,400bb10 <__divdf3+0x24c>
 400b960:	00c1ffc4 	movi	r3,2047
 400b964:	10c06426 	beq	r2,r3,400baf8 <__divdf3+0x234>
 400b968:	88c00434 	orhi	r3,r17,16
 400b96c:	180690fa 	slli	r3,r3,3
 400b970:	3022d77a 	srli	r17,r6,29
 400b974:	301090fa 	slli	r8,r6,3
 400b978:	10bf0044 	addi	r2,r2,-1023
 400b97c:	88e2b03a 	or	r17,r17,r3
 400b980:	000f883a 	mov	r7,zero
 400b984:	a58cf03a 	xor	r6,r20,r22
 400b988:	3cc8b03a 	or	r4,r7,r19
 400b98c:	a8abc83a 	sub	r21,r21,r2
 400b990:	008003c4 	movi	r2,15
 400b994:	3007883a 	mov	r3,r6
 400b998:	34c03fcc 	andi	r19,r6,255
 400b99c:	11009036 	bltu	r2,r4,400bbe0 <__divdf3+0x31c>
 400b9a0:	200890ba 	slli	r4,r4,2
 400b9a4:	00810074 	movhi	r2,1025
 400b9a8:	10ae6e04 	addi	r2,r2,-17992
 400b9ac:	2089883a 	add	r4,r4,r2
 400b9b0:	20800017 	ldw	r2,0(r4)
 400b9b4:	1000683a 	jmp	r2
 400b9b8:	0400bbe0 	cmpeqi	r16,zero,751
 400b9bc:	0400ba30 	cmpltui	r16,zero,744
 400b9c0:	0400bbd0 	cmplti	r16,zero,751
 400b9c4:	0400ba24 	muli	r16,zero,744
 400b9c8:	0400bbd0 	cmplti	r16,zero,751
 400b9cc:	0400bba4 	muli	r16,zero,750
 400b9d0:	0400bbd0 	cmplti	r16,zero,751
 400b9d4:	0400ba24 	muli	r16,zero,744
 400b9d8:	0400ba30 	cmpltui	r16,zero,744
 400b9dc:	0400ba30 	cmpltui	r16,zero,744
 400b9e0:	0400bba4 	muli	r16,zero,750
 400b9e4:	0400ba24 	muli	r16,zero,744
 400b9e8:	0400ba14 	movui	r16,744
 400b9ec:	0400ba14 	movui	r16,744
 400b9f0:	0400ba14 	movui	r16,744
 400b9f4:	0400bec4 	movi	r16,763
 400b9f8:	2404b03a 	or	r2,r4,r16
 400b9fc:	1000661e 	bne	r2,zero,400bb98 <__divdf3+0x2d4>
 400ba00:	04c00204 	movi	r19,8
 400ba04:	0021883a 	mov	r16,zero
 400ba08:	0025883a 	mov	r18,zero
 400ba0c:	02400084 	movi	r9,2
 400ba10:	003fca06 	br	400b93c <__alt_data_end+0xfc00b93c>
 400ba14:	8023883a 	mov	r17,r16
 400ba18:	9011883a 	mov	r8,r18
 400ba1c:	e02f883a 	mov	r23,fp
 400ba20:	480f883a 	mov	r7,r9
 400ba24:	00800084 	movi	r2,2
 400ba28:	3881311e 	bne	r7,r2,400bef0 <__divdf3+0x62c>
 400ba2c:	b827883a 	mov	r19,r23
 400ba30:	98c0004c 	andi	r3,r19,1
 400ba34:	0081ffc4 	movi	r2,2047
 400ba38:	000b883a 	mov	r5,zero
 400ba3c:	0025883a 	mov	r18,zero
 400ba40:	1004953a 	slli	r2,r2,20
 400ba44:	18c03fcc 	andi	r3,r3,255
 400ba48:	04400434 	movhi	r17,16
 400ba4c:	8c7fffc4 	addi	r17,r17,-1
 400ba50:	180697fa 	slli	r3,r3,31
 400ba54:	2c4a703a 	and	r5,r5,r17
 400ba58:	288ab03a 	or	r5,r5,r2
 400ba5c:	28c6b03a 	or	r3,r5,r3
 400ba60:	9005883a 	mov	r2,r18
 400ba64:	dfc00d17 	ldw	ra,52(sp)
 400ba68:	df000c17 	ldw	fp,48(sp)
 400ba6c:	ddc00b17 	ldw	r23,44(sp)
 400ba70:	dd800a17 	ldw	r22,40(sp)
 400ba74:	dd400917 	ldw	r21,36(sp)
 400ba78:	dd000817 	ldw	r20,32(sp)
 400ba7c:	dcc00717 	ldw	r19,28(sp)
 400ba80:	dc800617 	ldw	r18,24(sp)
 400ba84:	dc400517 	ldw	r17,20(sp)
 400ba88:	dc000417 	ldw	r16,16(sp)
 400ba8c:	dec00e04 	addi	sp,sp,56
 400ba90:	f800283a 	ret
 400ba94:	2404b03a 	or	r2,r4,r16
 400ba98:	2027883a 	mov	r19,r4
 400ba9c:	10003926 	beq	r2,zero,400bb84 <__divdf3+0x2c0>
 400baa0:	80012e26 	beq	r16,zero,400bf5c <__divdf3+0x698>
 400baa4:	8009883a 	mov	r4,r16
 400baa8:	d9800315 	stw	r6,12(sp)
 400baac:	d9c00215 	stw	r7,8(sp)
 400bab0:	400d61c0 	call	400d61c <__clzsi2>
 400bab4:	d9800317 	ldw	r6,12(sp)
 400bab8:	d9c00217 	ldw	r7,8(sp)
 400babc:	113ffd44 	addi	r4,r2,-11
 400bac0:	00c00704 	movi	r3,28
 400bac4:	19012116 	blt	r3,r4,400bf4c <__divdf3+0x688>
 400bac8:	00c00744 	movi	r3,29
 400bacc:	147ffe04 	addi	r17,r2,-8
 400bad0:	1907c83a 	sub	r3,r3,r4
 400bad4:	8460983a 	sll	r16,r16,r17
 400bad8:	98c6d83a 	srl	r3,r19,r3
 400badc:	9c64983a 	sll	r18,r19,r17
 400bae0:	1c20b03a 	or	r16,r3,r16
 400bae4:	1080fcc4 	addi	r2,r2,1011
 400bae8:	00abc83a 	sub	r21,zero,r2
 400baec:	0027883a 	mov	r19,zero
 400baf0:	0013883a 	mov	r9,zero
 400baf4:	003f9106 	br	400b93c <__alt_data_end+0xfc00b93c>
 400baf8:	3446b03a 	or	r3,r6,r17
 400bafc:	18001f1e 	bne	r3,zero,400bb7c <__divdf3+0x2b8>
 400bb00:	0023883a 	mov	r17,zero
 400bb04:	0011883a 	mov	r8,zero
 400bb08:	01c00084 	movi	r7,2
 400bb0c:	003f9d06 	br	400b984 <__alt_data_end+0xfc00b984>
 400bb10:	3446b03a 	or	r3,r6,r17
 400bb14:	18001526 	beq	r3,zero,400bb6c <__divdf3+0x2a8>
 400bb18:	88011b26 	beq	r17,zero,400bf88 <__divdf3+0x6c4>
 400bb1c:	8809883a 	mov	r4,r17
 400bb20:	d9800315 	stw	r6,12(sp)
 400bb24:	da400115 	stw	r9,4(sp)
 400bb28:	400d61c0 	call	400d61c <__clzsi2>
 400bb2c:	d9800317 	ldw	r6,12(sp)
 400bb30:	da400117 	ldw	r9,4(sp)
 400bb34:	113ffd44 	addi	r4,r2,-11
 400bb38:	00c00704 	movi	r3,28
 400bb3c:	19010e16 	blt	r3,r4,400bf78 <__divdf3+0x6b4>
 400bb40:	00c00744 	movi	r3,29
 400bb44:	123ffe04 	addi	r8,r2,-8
 400bb48:	1907c83a 	sub	r3,r3,r4
 400bb4c:	8a22983a 	sll	r17,r17,r8
 400bb50:	30c6d83a 	srl	r3,r6,r3
 400bb54:	3210983a 	sll	r8,r6,r8
 400bb58:	1c62b03a 	or	r17,r3,r17
 400bb5c:	1080fcc4 	addi	r2,r2,1011
 400bb60:	0085c83a 	sub	r2,zero,r2
 400bb64:	000f883a 	mov	r7,zero
 400bb68:	003f8606 	br	400b984 <__alt_data_end+0xfc00b984>
 400bb6c:	0023883a 	mov	r17,zero
 400bb70:	0011883a 	mov	r8,zero
 400bb74:	01c00044 	movi	r7,1
 400bb78:	003f8206 	br	400b984 <__alt_data_end+0xfc00b984>
 400bb7c:	01c000c4 	movi	r7,3
 400bb80:	003f8006 	br	400b984 <__alt_data_end+0xfc00b984>
 400bb84:	04c00104 	movi	r19,4
 400bb88:	0021883a 	mov	r16,zero
 400bb8c:	0025883a 	mov	r18,zero
 400bb90:	02400044 	movi	r9,1
 400bb94:	003f6906 	br	400b93c <__alt_data_end+0xfc00b93c>
 400bb98:	04c00304 	movi	r19,12
 400bb9c:	024000c4 	movi	r9,3
 400bba0:	003f6606 	br	400b93c <__alt_data_end+0xfc00b93c>
 400bba4:	01400434 	movhi	r5,16
 400bba8:	0007883a 	mov	r3,zero
 400bbac:	297fffc4 	addi	r5,r5,-1
 400bbb0:	04bfffc4 	movi	r18,-1
 400bbb4:	0081ffc4 	movi	r2,2047
 400bbb8:	003fa106 	br	400ba40 <__alt_data_end+0xfc00ba40>
 400bbbc:	00c00044 	movi	r3,1
 400bbc0:	1887c83a 	sub	r3,r3,r2
 400bbc4:	01000e04 	movi	r4,56
 400bbc8:	20c1210e 	bge	r4,r3,400c050 <__divdf3+0x78c>
 400bbcc:	98c0004c 	andi	r3,r19,1
 400bbd0:	0005883a 	mov	r2,zero
 400bbd4:	000b883a 	mov	r5,zero
 400bbd8:	0025883a 	mov	r18,zero
 400bbdc:	003f9806 	br	400ba40 <__alt_data_end+0xfc00ba40>
 400bbe0:	8c00fd36 	bltu	r17,r16,400bfd8 <__divdf3+0x714>
 400bbe4:	8440fb26 	beq	r16,r17,400bfd4 <__divdf3+0x710>
 400bbe8:	8007883a 	mov	r3,r16
 400bbec:	ad7fffc4 	addi	r21,r21,-1
 400bbf0:	0021883a 	mov	r16,zero
 400bbf4:	4004d63a 	srli	r2,r8,24
 400bbf8:	8822923a 	slli	r17,r17,8
 400bbfc:	1809883a 	mov	r4,r3
 400bc00:	402c923a 	slli	r22,r8,8
 400bc04:	88b8b03a 	or	fp,r17,r2
 400bc08:	e028d43a 	srli	r20,fp,16
 400bc0c:	d8c00015 	stw	r3,0(sp)
 400bc10:	e5ffffcc 	andi	r23,fp,65535
 400bc14:	a00b883a 	mov	r5,r20
 400bc18:	400af5c0 	call	400af5c <__udivsi3>
 400bc1c:	d8c00017 	ldw	r3,0(sp)
 400bc20:	a00b883a 	mov	r5,r20
 400bc24:	d8800315 	stw	r2,12(sp)
 400bc28:	1809883a 	mov	r4,r3
 400bc2c:	400afc00 	call	400afc0 <__umodsi3>
 400bc30:	d9800317 	ldw	r6,12(sp)
 400bc34:	1006943a 	slli	r3,r2,16
 400bc38:	9004d43a 	srli	r2,r18,16
 400bc3c:	b9a3383a 	mul	r17,r23,r6
 400bc40:	10c4b03a 	or	r2,r2,r3
 400bc44:	1440062e 	bgeu	r2,r17,400bc60 <__divdf3+0x39c>
 400bc48:	1705883a 	add	r2,r2,fp
 400bc4c:	30ffffc4 	addi	r3,r6,-1
 400bc50:	1700ee36 	bltu	r2,fp,400c00c <__divdf3+0x748>
 400bc54:	1440ed2e 	bgeu	r2,r17,400c00c <__divdf3+0x748>
 400bc58:	31bfff84 	addi	r6,r6,-2
 400bc5c:	1705883a 	add	r2,r2,fp
 400bc60:	1463c83a 	sub	r17,r2,r17
 400bc64:	a00b883a 	mov	r5,r20
 400bc68:	8809883a 	mov	r4,r17
 400bc6c:	d9800315 	stw	r6,12(sp)
 400bc70:	400af5c0 	call	400af5c <__udivsi3>
 400bc74:	a00b883a 	mov	r5,r20
 400bc78:	8809883a 	mov	r4,r17
 400bc7c:	d8800215 	stw	r2,8(sp)
 400bc80:	400afc00 	call	400afc0 <__umodsi3>
 400bc84:	d9c00217 	ldw	r7,8(sp)
 400bc88:	1004943a 	slli	r2,r2,16
 400bc8c:	94bfffcc 	andi	r18,r18,65535
 400bc90:	b9d1383a 	mul	r8,r23,r7
 400bc94:	90a4b03a 	or	r18,r18,r2
 400bc98:	d9800317 	ldw	r6,12(sp)
 400bc9c:	9200062e 	bgeu	r18,r8,400bcb8 <__divdf3+0x3f4>
 400bca0:	9725883a 	add	r18,r18,fp
 400bca4:	38bfffc4 	addi	r2,r7,-1
 400bca8:	9700d636 	bltu	r18,fp,400c004 <__divdf3+0x740>
 400bcac:	9200d52e 	bgeu	r18,r8,400c004 <__divdf3+0x740>
 400bcb0:	39ffff84 	addi	r7,r7,-2
 400bcb4:	9725883a 	add	r18,r18,fp
 400bcb8:	3004943a 	slli	r2,r6,16
 400bcbc:	b012d43a 	srli	r9,r22,16
 400bcc0:	b1bfffcc 	andi	r6,r22,65535
 400bcc4:	11e2b03a 	or	r17,r2,r7
 400bcc8:	8806d43a 	srli	r3,r17,16
 400bccc:	893fffcc 	andi	r4,r17,65535
 400bcd0:	218b383a 	mul	r5,r4,r6
 400bcd4:	30c5383a 	mul	r2,r6,r3
 400bcd8:	2249383a 	mul	r4,r4,r9
 400bcdc:	280ed43a 	srli	r7,r5,16
 400bce0:	9225c83a 	sub	r18,r18,r8
 400bce4:	2089883a 	add	r4,r4,r2
 400bce8:	3909883a 	add	r4,r7,r4
 400bcec:	1a47383a 	mul	r3,r3,r9
 400bcf0:	2080022e 	bgeu	r4,r2,400bcfc <__divdf3+0x438>
 400bcf4:	00800074 	movhi	r2,1
 400bcf8:	1887883a 	add	r3,r3,r2
 400bcfc:	2004d43a 	srli	r2,r4,16
 400bd00:	2008943a 	slli	r4,r4,16
 400bd04:	297fffcc 	andi	r5,r5,65535
 400bd08:	10c7883a 	add	r3,r2,r3
 400bd0c:	2149883a 	add	r4,r4,r5
 400bd10:	90c0a536 	bltu	r18,r3,400bfa8 <__divdf3+0x6e4>
 400bd14:	90c0bf26 	beq	r18,r3,400c014 <__divdf3+0x750>
 400bd18:	90c7c83a 	sub	r3,r18,r3
 400bd1c:	810fc83a 	sub	r7,r16,r4
 400bd20:	81e5803a 	cmpltu	r18,r16,r7
 400bd24:	1ca5c83a 	sub	r18,r3,r18
 400bd28:	e480c126 	beq	fp,r18,400c030 <__divdf3+0x76c>
 400bd2c:	a00b883a 	mov	r5,r20
 400bd30:	9009883a 	mov	r4,r18
 400bd34:	d9800315 	stw	r6,12(sp)
 400bd38:	d9c00215 	stw	r7,8(sp)
 400bd3c:	da400115 	stw	r9,4(sp)
 400bd40:	400af5c0 	call	400af5c <__udivsi3>
 400bd44:	a00b883a 	mov	r5,r20
 400bd48:	9009883a 	mov	r4,r18
 400bd4c:	d8800015 	stw	r2,0(sp)
 400bd50:	400afc00 	call	400afc0 <__umodsi3>
 400bd54:	d9c00217 	ldw	r7,8(sp)
 400bd58:	da000017 	ldw	r8,0(sp)
 400bd5c:	1006943a 	slli	r3,r2,16
 400bd60:	3804d43a 	srli	r2,r7,16
 400bd64:	ba21383a 	mul	r16,r23,r8
 400bd68:	d9800317 	ldw	r6,12(sp)
 400bd6c:	10c4b03a 	or	r2,r2,r3
 400bd70:	da400117 	ldw	r9,4(sp)
 400bd74:	1400062e 	bgeu	r2,r16,400bd90 <__divdf3+0x4cc>
 400bd78:	1705883a 	add	r2,r2,fp
 400bd7c:	40ffffc4 	addi	r3,r8,-1
 400bd80:	1700ad36 	bltu	r2,fp,400c038 <__divdf3+0x774>
 400bd84:	1400ac2e 	bgeu	r2,r16,400c038 <__divdf3+0x774>
 400bd88:	423fff84 	addi	r8,r8,-2
 400bd8c:	1705883a 	add	r2,r2,fp
 400bd90:	1421c83a 	sub	r16,r2,r16
 400bd94:	a00b883a 	mov	r5,r20
 400bd98:	8009883a 	mov	r4,r16
 400bd9c:	d9800315 	stw	r6,12(sp)
 400bda0:	d9c00215 	stw	r7,8(sp)
 400bda4:	da000015 	stw	r8,0(sp)
 400bda8:	da400115 	stw	r9,4(sp)
 400bdac:	400af5c0 	call	400af5c <__udivsi3>
 400bdb0:	8009883a 	mov	r4,r16
 400bdb4:	a00b883a 	mov	r5,r20
 400bdb8:	1025883a 	mov	r18,r2
 400bdbc:	400afc00 	call	400afc0 <__umodsi3>
 400bdc0:	d9c00217 	ldw	r7,8(sp)
 400bdc4:	1004943a 	slli	r2,r2,16
 400bdc8:	bcaf383a 	mul	r23,r23,r18
 400bdcc:	393fffcc 	andi	r4,r7,65535
 400bdd0:	2088b03a 	or	r4,r4,r2
 400bdd4:	d9800317 	ldw	r6,12(sp)
 400bdd8:	da000017 	ldw	r8,0(sp)
 400bddc:	da400117 	ldw	r9,4(sp)
 400bde0:	25c0062e 	bgeu	r4,r23,400bdfc <__divdf3+0x538>
 400bde4:	2709883a 	add	r4,r4,fp
 400bde8:	90bfffc4 	addi	r2,r18,-1
 400bdec:	27009436 	bltu	r4,fp,400c040 <__divdf3+0x77c>
 400bdf0:	25c0932e 	bgeu	r4,r23,400c040 <__divdf3+0x77c>
 400bdf4:	94bfff84 	addi	r18,r18,-2
 400bdf8:	2709883a 	add	r4,r4,fp
 400bdfc:	4004943a 	slli	r2,r8,16
 400be00:	25efc83a 	sub	r23,r4,r23
 400be04:	1490b03a 	or	r8,r2,r18
 400be08:	4008d43a 	srli	r4,r8,16
 400be0c:	40ffffcc 	andi	r3,r8,65535
 400be10:	30c5383a 	mul	r2,r6,r3
 400be14:	1a47383a 	mul	r3,r3,r9
 400be18:	310d383a 	mul	r6,r6,r4
 400be1c:	100ad43a 	srli	r5,r2,16
 400be20:	4913383a 	mul	r9,r9,r4
 400be24:	1987883a 	add	r3,r3,r6
 400be28:	28c7883a 	add	r3,r5,r3
 400be2c:	1980022e 	bgeu	r3,r6,400be38 <__divdf3+0x574>
 400be30:	01000074 	movhi	r4,1
 400be34:	4913883a 	add	r9,r9,r4
 400be38:	1808d43a 	srli	r4,r3,16
 400be3c:	1806943a 	slli	r3,r3,16
 400be40:	10bfffcc 	andi	r2,r2,65535
 400be44:	2253883a 	add	r9,r4,r9
 400be48:	1887883a 	add	r3,r3,r2
 400be4c:	ba403836 	bltu	r23,r9,400bf30 <__divdf3+0x66c>
 400be50:	ba403626 	beq	r23,r9,400bf2c <__divdf3+0x668>
 400be54:	42000054 	ori	r8,r8,1
 400be58:	a880ffc4 	addi	r2,r21,1023
 400be5c:	00bf570e 	bge	zero,r2,400bbbc <__alt_data_end+0xfc00bbbc>
 400be60:	40c001cc 	andi	r3,r8,7
 400be64:	18000726 	beq	r3,zero,400be84 <__divdf3+0x5c0>
 400be68:	40c003cc 	andi	r3,r8,15
 400be6c:	01000104 	movi	r4,4
 400be70:	19000426 	beq	r3,r4,400be84 <__divdf3+0x5c0>
 400be74:	4107883a 	add	r3,r8,r4
 400be78:	1a11803a 	cmpltu	r8,r3,r8
 400be7c:	8a23883a 	add	r17,r17,r8
 400be80:	1811883a 	mov	r8,r3
 400be84:	88c0402c 	andhi	r3,r17,256
 400be88:	18000426 	beq	r3,zero,400be9c <__divdf3+0x5d8>
 400be8c:	00ffc034 	movhi	r3,65280
 400be90:	18ffffc4 	addi	r3,r3,-1
 400be94:	a8810004 	addi	r2,r21,1024
 400be98:	88e2703a 	and	r17,r17,r3
 400be9c:	00c1ff84 	movi	r3,2046
 400bea0:	18bee316 	blt	r3,r2,400ba30 <__alt_data_end+0xfc00ba30>
 400bea4:	8824977a 	slli	r18,r17,29
 400bea8:	4010d0fa 	srli	r8,r8,3
 400beac:	8822927a 	slli	r17,r17,9
 400beb0:	1081ffcc 	andi	r2,r2,2047
 400beb4:	9224b03a 	or	r18,r18,r8
 400beb8:	880ad33a 	srli	r5,r17,12
 400bebc:	98c0004c 	andi	r3,r19,1
 400bec0:	003edf06 	br	400ba40 <__alt_data_end+0xfc00ba40>
 400bec4:	8080022c 	andhi	r2,r16,8
 400bec8:	10001226 	beq	r2,zero,400bf14 <__divdf3+0x650>
 400becc:	8880022c 	andhi	r2,r17,8
 400bed0:	1000101e 	bne	r2,zero,400bf14 <__divdf3+0x650>
 400bed4:	00800434 	movhi	r2,16
 400bed8:	89400234 	orhi	r5,r17,8
 400bedc:	10bfffc4 	addi	r2,r2,-1
 400bee0:	b007883a 	mov	r3,r22
 400bee4:	288a703a 	and	r5,r5,r2
 400bee8:	4025883a 	mov	r18,r8
 400beec:	003f3106 	br	400bbb4 <__alt_data_end+0xfc00bbb4>
 400bef0:	008000c4 	movi	r2,3
 400bef4:	3880a626 	beq	r7,r2,400c190 <__divdf3+0x8cc>
 400bef8:	00800044 	movi	r2,1
 400befc:	3880521e 	bne	r7,r2,400c048 <__divdf3+0x784>
 400bf00:	b807883a 	mov	r3,r23
 400bf04:	0005883a 	mov	r2,zero
 400bf08:	000b883a 	mov	r5,zero
 400bf0c:	0025883a 	mov	r18,zero
 400bf10:	003ecb06 	br	400ba40 <__alt_data_end+0xfc00ba40>
 400bf14:	00800434 	movhi	r2,16
 400bf18:	81400234 	orhi	r5,r16,8
 400bf1c:	10bfffc4 	addi	r2,r2,-1
 400bf20:	a007883a 	mov	r3,r20
 400bf24:	288a703a 	and	r5,r5,r2
 400bf28:	003f2206 	br	400bbb4 <__alt_data_end+0xfc00bbb4>
 400bf2c:	183fca26 	beq	r3,zero,400be58 <__alt_data_end+0xfc00be58>
 400bf30:	e5ef883a 	add	r23,fp,r23
 400bf34:	40bfffc4 	addi	r2,r8,-1
 400bf38:	bf00392e 	bgeu	r23,fp,400c020 <__divdf3+0x75c>
 400bf3c:	1011883a 	mov	r8,r2
 400bf40:	ba7fc41e 	bne	r23,r9,400be54 <__alt_data_end+0xfc00be54>
 400bf44:	b0ffc31e 	bne	r22,r3,400be54 <__alt_data_end+0xfc00be54>
 400bf48:	003fc306 	br	400be58 <__alt_data_end+0xfc00be58>
 400bf4c:	143ff604 	addi	r16,r2,-40
 400bf50:	9c20983a 	sll	r16,r19,r16
 400bf54:	0025883a 	mov	r18,zero
 400bf58:	003ee206 	br	400bae4 <__alt_data_end+0xfc00bae4>
 400bf5c:	d9800315 	stw	r6,12(sp)
 400bf60:	d9c00215 	stw	r7,8(sp)
 400bf64:	400d61c0 	call	400d61c <__clzsi2>
 400bf68:	10800804 	addi	r2,r2,32
 400bf6c:	d9c00217 	ldw	r7,8(sp)
 400bf70:	d9800317 	ldw	r6,12(sp)
 400bf74:	003ed106 	br	400babc <__alt_data_end+0xfc00babc>
 400bf78:	147ff604 	addi	r17,r2,-40
 400bf7c:	3462983a 	sll	r17,r6,r17
 400bf80:	0011883a 	mov	r8,zero
 400bf84:	003ef506 	br	400bb5c <__alt_data_end+0xfc00bb5c>
 400bf88:	3009883a 	mov	r4,r6
 400bf8c:	d9800315 	stw	r6,12(sp)
 400bf90:	da400115 	stw	r9,4(sp)
 400bf94:	400d61c0 	call	400d61c <__clzsi2>
 400bf98:	10800804 	addi	r2,r2,32
 400bf9c:	da400117 	ldw	r9,4(sp)
 400bfa0:	d9800317 	ldw	r6,12(sp)
 400bfa4:	003ee306 	br	400bb34 <__alt_data_end+0xfc00bb34>
 400bfa8:	85a1883a 	add	r16,r16,r22
 400bfac:	8585803a 	cmpltu	r2,r16,r22
 400bfb0:	1705883a 	add	r2,r2,fp
 400bfb4:	14a5883a 	add	r18,r2,r18
 400bfb8:	88bfffc4 	addi	r2,r17,-1
 400bfbc:	e4800c2e 	bgeu	fp,r18,400bff0 <__divdf3+0x72c>
 400bfc0:	90c03e36 	bltu	r18,r3,400c0bc <__divdf3+0x7f8>
 400bfc4:	1c806926 	beq	r3,r18,400c16c <__divdf3+0x8a8>
 400bfc8:	90c7c83a 	sub	r3,r18,r3
 400bfcc:	1023883a 	mov	r17,r2
 400bfd0:	003f5206 	br	400bd1c <__alt_data_end+0xfc00bd1c>
 400bfd4:	923f0436 	bltu	r18,r8,400bbe8 <__alt_data_end+0xfc00bbe8>
 400bfd8:	800897fa 	slli	r4,r16,31
 400bfdc:	9004d07a 	srli	r2,r18,1
 400bfe0:	8006d07a 	srli	r3,r16,1
 400bfe4:	902097fa 	slli	r16,r18,31
 400bfe8:	20a4b03a 	or	r18,r4,r2
 400bfec:	003f0106 	br	400bbf4 <__alt_data_end+0xfc00bbf4>
 400bff0:	e4bff51e 	bne	fp,r18,400bfc8 <__alt_data_end+0xfc00bfc8>
 400bff4:	85bff22e 	bgeu	r16,r22,400bfc0 <__alt_data_end+0xfc00bfc0>
 400bff8:	e0c7c83a 	sub	r3,fp,r3
 400bffc:	1023883a 	mov	r17,r2
 400c000:	003f4606 	br	400bd1c <__alt_data_end+0xfc00bd1c>
 400c004:	100f883a 	mov	r7,r2
 400c008:	003f2b06 	br	400bcb8 <__alt_data_end+0xfc00bcb8>
 400c00c:	180d883a 	mov	r6,r3
 400c010:	003f1306 	br	400bc60 <__alt_data_end+0xfc00bc60>
 400c014:	813fe436 	bltu	r16,r4,400bfa8 <__alt_data_end+0xfc00bfa8>
 400c018:	0007883a 	mov	r3,zero
 400c01c:	003f3f06 	br	400bd1c <__alt_data_end+0xfc00bd1c>
 400c020:	ba402c36 	bltu	r23,r9,400c0d4 <__divdf3+0x810>
 400c024:	4dc05426 	beq	r9,r23,400c178 <__divdf3+0x8b4>
 400c028:	1011883a 	mov	r8,r2
 400c02c:	003f8906 	br	400be54 <__alt_data_end+0xfc00be54>
 400c030:	023fffc4 	movi	r8,-1
 400c034:	003f8806 	br	400be58 <__alt_data_end+0xfc00be58>
 400c038:	1811883a 	mov	r8,r3
 400c03c:	003f5406 	br	400bd90 <__alt_data_end+0xfc00bd90>
 400c040:	1025883a 	mov	r18,r2
 400c044:	003f6d06 	br	400bdfc <__alt_data_end+0xfc00bdfc>
 400c048:	b827883a 	mov	r19,r23
 400c04c:	003f8206 	br	400be58 <__alt_data_end+0xfc00be58>
 400c050:	010007c4 	movi	r4,31
 400c054:	20c02616 	blt	r4,r3,400c0f0 <__divdf3+0x82c>
 400c058:	00800804 	movi	r2,32
 400c05c:	10c5c83a 	sub	r2,r2,r3
 400c060:	888a983a 	sll	r5,r17,r2
 400c064:	40c8d83a 	srl	r4,r8,r3
 400c068:	4084983a 	sll	r2,r8,r2
 400c06c:	88e2d83a 	srl	r17,r17,r3
 400c070:	2906b03a 	or	r3,r5,r4
 400c074:	1004c03a 	cmpne	r2,r2,zero
 400c078:	1886b03a 	or	r3,r3,r2
 400c07c:	188001cc 	andi	r2,r3,7
 400c080:	10000726 	beq	r2,zero,400c0a0 <__divdf3+0x7dc>
 400c084:	188003cc 	andi	r2,r3,15
 400c088:	01000104 	movi	r4,4
 400c08c:	11000426 	beq	r2,r4,400c0a0 <__divdf3+0x7dc>
 400c090:	1805883a 	mov	r2,r3
 400c094:	10c00104 	addi	r3,r2,4
 400c098:	1885803a 	cmpltu	r2,r3,r2
 400c09c:	88a3883a 	add	r17,r17,r2
 400c0a0:	8880202c 	andhi	r2,r17,128
 400c0a4:	10002726 	beq	r2,zero,400c144 <__divdf3+0x880>
 400c0a8:	98c0004c 	andi	r3,r19,1
 400c0ac:	00800044 	movi	r2,1
 400c0b0:	000b883a 	mov	r5,zero
 400c0b4:	0025883a 	mov	r18,zero
 400c0b8:	003e6106 	br	400ba40 <__alt_data_end+0xfc00ba40>
 400c0bc:	85a1883a 	add	r16,r16,r22
 400c0c0:	8585803a 	cmpltu	r2,r16,r22
 400c0c4:	1705883a 	add	r2,r2,fp
 400c0c8:	14a5883a 	add	r18,r2,r18
 400c0cc:	8c7fff84 	addi	r17,r17,-2
 400c0d0:	003f1106 	br	400bd18 <__alt_data_end+0xfc00bd18>
 400c0d4:	b589883a 	add	r4,r22,r22
 400c0d8:	25ad803a 	cmpltu	r22,r4,r22
 400c0dc:	b739883a 	add	fp,r22,fp
 400c0e0:	40bfff84 	addi	r2,r8,-2
 400c0e4:	bf2f883a 	add	r23,r23,fp
 400c0e8:	202d883a 	mov	r22,r4
 400c0ec:	003f9306 	br	400bf3c <__alt_data_end+0xfc00bf3c>
 400c0f0:	013ff844 	movi	r4,-31
 400c0f4:	2085c83a 	sub	r2,r4,r2
 400c0f8:	8888d83a 	srl	r4,r17,r2
 400c0fc:	00800804 	movi	r2,32
 400c100:	18802126 	beq	r3,r2,400c188 <__divdf3+0x8c4>
 400c104:	00801004 	movi	r2,64
 400c108:	10c5c83a 	sub	r2,r2,r3
 400c10c:	8884983a 	sll	r2,r17,r2
 400c110:	1204b03a 	or	r2,r2,r8
 400c114:	1004c03a 	cmpne	r2,r2,zero
 400c118:	2084b03a 	or	r2,r4,r2
 400c11c:	144001cc 	andi	r17,r2,7
 400c120:	88000d1e 	bne	r17,zero,400c158 <__divdf3+0x894>
 400c124:	000b883a 	mov	r5,zero
 400c128:	1024d0fa 	srli	r18,r2,3
 400c12c:	98c0004c 	andi	r3,r19,1
 400c130:	0005883a 	mov	r2,zero
 400c134:	9464b03a 	or	r18,r18,r17
 400c138:	003e4106 	br	400ba40 <__alt_data_end+0xfc00ba40>
 400c13c:	1007883a 	mov	r3,r2
 400c140:	0023883a 	mov	r17,zero
 400c144:	880a927a 	slli	r5,r17,9
 400c148:	1805883a 	mov	r2,r3
 400c14c:	8822977a 	slli	r17,r17,29
 400c150:	280ad33a 	srli	r5,r5,12
 400c154:	003ff406 	br	400c128 <__alt_data_end+0xfc00c128>
 400c158:	10c003cc 	andi	r3,r2,15
 400c15c:	01000104 	movi	r4,4
 400c160:	193ff626 	beq	r3,r4,400c13c <__alt_data_end+0xfc00c13c>
 400c164:	0023883a 	mov	r17,zero
 400c168:	003fca06 	br	400c094 <__alt_data_end+0xfc00c094>
 400c16c:	813fd336 	bltu	r16,r4,400c0bc <__alt_data_end+0xfc00c0bc>
 400c170:	1023883a 	mov	r17,r2
 400c174:	003fa806 	br	400c018 <__alt_data_end+0xfc00c018>
 400c178:	b0ffd636 	bltu	r22,r3,400c0d4 <__alt_data_end+0xfc00c0d4>
 400c17c:	1011883a 	mov	r8,r2
 400c180:	b0ff341e 	bne	r22,r3,400be54 <__alt_data_end+0xfc00be54>
 400c184:	003f3406 	br	400be58 <__alt_data_end+0xfc00be58>
 400c188:	0005883a 	mov	r2,zero
 400c18c:	003fe006 	br	400c110 <__alt_data_end+0xfc00c110>
 400c190:	00800434 	movhi	r2,16
 400c194:	89400234 	orhi	r5,r17,8
 400c198:	10bfffc4 	addi	r2,r2,-1
 400c19c:	b807883a 	mov	r3,r23
 400c1a0:	288a703a 	and	r5,r5,r2
 400c1a4:	4025883a 	mov	r18,r8
 400c1a8:	003e8206 	br	400bbb4 <__alt_data_end+0xfc00bbb4>

0400c1ac <__eqdf2>:
 400c1ac:	2804d53a 	srli	r2,r5,20
 400c1b0:	3806d53a 	srli	r3,r7,20
 400c1b4:	02000434 	movhi	r8,16
 400c1b8:	423fffc4 	addi	r8,r8,-1
 400c1bc:	1081ffcc 	andi	r2,r2,2047
 400c1c0:	0281ffc4 	movi	r10,2047
 400c1c4:	2a12703a 	and	r9,r5,r8
 400c1c8:	18c1ffcc 	andi	r3,r3,2047
 400c1cc:	3a10703a 	and	r8,r7,r8
 400c1d0:	280ad7fa 	srli	r5,r5,31
 400c1d4:	380ed7fa 	srli	r7,r7,31
 400c1d8:	12801026 	beq	r2,r10,400c21c <__eqdf2+0x70>
 400c1dc:	0281ffc4 	movi	r10,2047
 400c1e0:	1a800a26 	beq	r3,r10,400c20c <__eqdf2+0x60>
 400c1e4:	10c00226 	beq	r2,r3,400c1f0 <__eqdf2+0x44>
 400c1e8:	00800044 	movi	r2,1
 400c1ec:	f800283a 	ret
 400c1f0:	4a3ffd1e 	bne	r9,r8,400c1e8 <__alt_data_end+0xfc00c1e8>
 400c1f4:	21bffc1e 	bne	r4,r6,400c1e8 <__alt_data_end+0xfc00c1e8>
 400c1f8:	29c00c26 	beq	r5,r7,400c22c <__eqdf2+0x80>
 400c1fc:	103ffa1e 	bne	r2,zero,400c1e8 <__alt_data_end+0xfc00c1e8>
 400c200:	2244b03a 	or	r2,r4,r9
 400c204:	1004c03a 	cmpne	r2,r2,zero
 400c208:	f800283a 	ret
 400c20c:	3214b03a 	or	r10,r6,r8
 400c210:	503ff426 	beq	r10,zero,400c1e4 <__alt_data_end+0xfc00c1e4>
 400c214:	00800044 	movi	r2,1
 400c218:	f800283a 	ret
 400c21c:	2254b03a 	or	r10,r4,r9
 400c220:	503fee26 	beq	r10,zero,400c1dc <__alt_data_end+0xfc00c1dc>
 400c224:	00800044 	movi	r2,1
 400c228:	f800283a 	ret
 400c22c:	0005883a 	mov	r2,zero
 400c230:	f800283a 	ret

0400c234 <__gedf2>:
 400c234:	2804d53a 	srli	r2,r5,20
 400c238:	3806d53a 	srli	r3,r7,20
 400c23c:	02000434 	movhi	r8,16
 400c240:	423fffc4 	addi	r8,r8,-1
 400c244:	1081ffcc 	andi	r2,r2,2047
 400c248:	0241ffc4 	movi	r9,2047
 400c24c:	2a14703a 	and	r10,r5,r8
 400c250:	18c1ffcc 	andi	r3,r3,2047
 400c254:	3a10703a 	and	r8,r7,r8
 400c258:	280ad7fa 	srli	r5,r5,31
 400c25c:	380ed7fa 	srli	r7,r7,31
 400c260:	12401d26 	beq	r2,r9,400c2d8 <__gedf2+0xa4>
 400c264:	0241ffc4 	movi	r9,2047
 400c268:	1a401226 	beq	r3,r9,400c2b4 <__gedf2+0x80>
 400c26c:	1000081e 	bne	r2,zero,400c290 <__gedf2+0x5c>
 400c270:	2296b03a 	or	r11,r4,r10
 400c274:	5813003a 	cmpeq	r9,r11,zero
 400c278:	1800091e 	bne	r3,zero,400c2a0 <__gedf2+0x6c>
 400c27c:	3218b03a 	or	r12,r6,r8
 400c280:	6000071e 	bne	r12,zero,400c2a0 <__gedf2+0x6c>
 400c284:	0005883a 	mov	r2,zero
 400c288:	5800101e 	bne	r11,zero,400c2cc <__gedf2+0x98>
 400c28c:	f800283a 	ret
 400c290:	18000c1e 	bne	r3,zero,400c2c4 <__gedf2+0x90>
 400c294:	3212b03a 	or	r9,r6,r8
 400c298:	48000c26 	beq	r9,zero,400c2cc <__gedf2+0x98>
 400c29c:	0013883a 	mov	r9,zero
 400c2a0:	39c03fcc 	andi	r7,r7,255
 400c2a4:	48000826 	beq	r9,zero,400c2c8 <__gedf2+0x94>
 400c2a8:	38000926 	beq	r7,zero,400c2d0 <__gedf2+0x9c>
 400c2ac:	00800044 	movi	r2,1
 400c2b0:	f800283a 	ret
 400c2b4:	3212b03a 	or	r9,r6,r8
 400c2b8:	483fec26 	beq	r9,zero,400c26c <__alt_data_end+0xfc00c26c>
 400c2bc:	00bfff84 	movi	r2,-2
 400c2c0:	f800283a 	ret
 400c2c4:	39c03fcc 	andi	r7,r7,255
 400c2c8:	29c00626 	beq	r5,r7,400c2e4 <__gedf2+0xb0>
 400c2cc:	283ff726 	beq	r5,zero,400c2ac <__alt_data_end+0xfc00c2ac>
 400c2d0:	00bfffc4 	movi	r2,-1
 400c2d4:	f800283a 	ret
 400c2d8:	2292b03a 	or	r9,r4,r10
 400c2dc:	483fe126 	beq	r9,zero,400c264 <__alt_data_end+0xfc00c264>
 400c2e0:	003ff606 	br	400c2bc <__alt_data_end+0xfc00c2bc>
 400c2e4:	18bff916 	blt	r3,r2,400c2cc <__alt_data_end+0xfc00c2cc>
 400c2e8:	10c00316 	blt	r2,r3,400c2f8 <__gedf2+0xc4>
 400c2ec:	42bff736 	bltu	r8,r10,400c2cc <__alt_data_end+0xfc00c2cc>
 400c2f0:	52000326 	beq	r10,r8,400c300 <__gedf2+0xcc>
 400c2f4:	5200042e 	bgeu	r10,r8,400c308 <__gedf2+0xd4>
 400c2f8:	283fec1e 	bne	r5,zero,400c2ac <__alt_data_end+0xfc00c2ac>
 400c2fc:	003ff406 	br	400c2d0 <__alt_data_end+0xfc00c2d0>
 400c300:	313ff236 	bltu	r6,r4,400c2cc <__alt_data_end+0xfc00c2cc>
 400c304:	21bffc36 	bltu	r4,r6,400c2f8 <__alt_data_end+0xfc00c2f8>
 400c308:	0005883a 	mov	r2,zero
 400c30c:	f800283a 	ret

0400c310 <__ledf2>:
 400c310:	2804d53a 	srli	r2,r5,20
 400c314:	3810d53a 	srli	r8,r7,20
 400c318:	00c00434 	movhi	r3,16
 400c31c:	18ffffc4 	addi	r3,r3,-1
 400c320:	1081ffcc 	andi	r2,r2,2047
 400c324:	0241ffc4 	movi	r9,2047
 400c328:	28d4703a 	and	r10,r5,r3
 400c32c:	4201ffcc 	andi	r8,r8,2047
 400c330:	38c6703a 	and	r3,r7,r3
 400c334:	280ad7fa 	srli	r5,r5,31
 400c338:	380ed7fa 	srli	r7,r7,31
 400c33c:	12401f26 	beq	r2,r9,400c3bc <__ledf2+0xac>
 400c340:	0241ffc4 	movi	r9,2047
 400c344:	42401426 	beq	r8,r9,400c398 <__ledf2+0x88>
 400c348:	1000091e 	bne	r2,zero,400c370 <__ledf2+0x60>
 400c34c:	2296b03a 	or	r11,r4,r10
 400c350:	5813003a 	cmpeq	r9,r11,zero
 400c354:	29403fcc 	andi	r5,r5,255
 400c358:	40000a1e 	bne	r8,zero,400c384 <__ledf2+0x74>
 400c35c:	30d8b03a 	or	r12,r6,r3
 400c360:	6000081e 	bne	r12,zero,400c384 <__ledf2+0x74>
 400c364:	0005883a 	mov	r2,zero
 400c368:	5800111e 	bne	r11,zero,400c3b0 <__ledf2+0xa0>
 400c36c:	f800283a 	ret
 400c370:	29403fcc 	andi	r5,r5,255
 400c374:	40000c1e 	bne	r8,zero,400c3a8 <__ledf2+0x98>
 400c378:	30d2b03a 	or	r9,r6,r3
 400c37c:	48000c26 	beq	r9,zero,400c3b0 <__ledf2+0xa0>
 400c380:	0013883a 	mov	r9,zero
 400c384:	39c03fcc 	andi	r7,r7,255
 400c388:	48000826 	beq	r9,zero,400c3ac <__ledf2+0x9c>
 400c38c:	38001126 	beq	r7,zero,400c3d4 <__ledf2+0xc4>
 400c390:	00800044 	movi	r2,1
 400c394:	f800283a 	ret
 400c398:	30d2b03a 	or	r9,r6,r3
 400c39c:	483fea26 	beq	r9,zero,400c348 <__alt_data_end+0xfc00c348>
 400c3a0:	00800084 	movi	r2,2
 400c3a4:	f800283a 	ret
 400c3a8:	39c03fcc 	andi	r7,r7,255
 400c3ac:	39400726 	beq	r7,r5,400c3cc <__ledf2+0xbc>
 400c3b0:	2800081e 	bne	r5,zero,400c3d4 <__ledf2+0xc4>
 400c3b4:	00800044 	movi	r2,1
 400c3b8:	f800283a 	ret
 400c3bc:	2292b03a 	or	r9,r4,r10
 400c3c0:	483fdf26 	beq	r9,zero,400c340 <__alt_data_end+0xfc00c340>
 400c3c4:	00800084 	movi	r2,2
 400c3c8:	f800283a 	ret
 400c3cc:	4080030e 	bge	r8,r2,400c3dc <__ledf2+0xcc>
 400c3d0:	383fef26 	beq	r7,zero,400c390 <__alt_data_end+0xfc00c390>
 400c3d4:	00bfffc4 	movi	r2,-1
 400c3d8:	f800283a 	ret
 400c3dc:	123feb16 	blt	r2,r8,400c38c <__alt_data_end+0xfc00c38c>
 400c3e0:	1abff336 	bltu	r3,r10,400c3b0 <__alt_data_end+0xfc00c3b0>
 400c3e4:	50c00326 	beq	r10,r3,400c3f4 <__ledf2+0xe4>
 400c3e8:	50c0042e 	bgeu	r10,r3,400c3fc <__ledf2+0xec>
 400c3ec:	283fe81e 	bne	r5,zero,400c390 <__alt_data_end+0xfc00c390>
 400c3f0:	003ff806 	br	400c3d4 <__alt_data_end+0xfc00c3d4>
 400c3f4:	313fee36 	bltu	r6,r4,400c3b0 <__alt_data_end+0xfc00c3b0>
 400c3f8:	21bffc36 	bltu	r4,r6,400c3ec <__alt_data_end+0xfc00c3ec>
 400c3fc:	0005883a 	mov	r2,zero
 400c400:	f800283a 	ret

0400c404 <__muldf3>:
 400c404:	defff304 	addi	sp,sp,-52
 400c408:	2804d53a 	srli	r2,r5,20
 400c40c:	dd800915 	stw	r22,36(sp)
 400c410:	282cd7fa 	srli	r22,r5,31
 400c414:	dc000315 	stw	r16,12(sp)
 400c418:	04000434 	movhi	r16,16
 400c41c:	dd400815 	stw	r21,32(sp)
 400c420:	dc800515 	stw	r18,20(sp)
 400c424:	843fffc4 	addi	r16,r16,-1
 400c428:	dfc00c15 	stw	ra,48(sp)
 400c42c:	df000b15 	stw	fp,44(sp)
 400c430:	ddc00a15 	stw	r23,40(sp)
 400c434:	dd000715 	stw	r20,28(sp)
 400c438:	dcc00615 	stw	r19,24(sp)
 400c43c:	dc400415 	stw	r17,16(sp)
 400c440:	1481ffcc 	andi	r18,r2,2047
 400c444:	2c20703a 	and	r16,r5,r16
 400c448:	b02b883a 	mov	r21,r22
 400c44c:	b2403fcc 	andi	r9,r22,255
 400c450:	90006026 	beq	r18,zero,400c5d4 <__muldf3+0x1d0>
 400c454:	0081ffc4 	movi	r2,2047
 400c458:	2029883a 	mov	r20,r4
 400c45c:	90803626 	beq	r18,r2,400c538 <__muldf3+0x134>
 400c460:	80800434 	orhi	r2,r16,16
 400c464:	100490fa 	slli	r2,r2,3
 400c468:	2020d77a 	srli	r16,r4,29
 400c46c:	202890fa 	slli	r20,r4,3
 400c470:	94bf0044 	addi	r18,r18,-1023
 400c474:	80a0b03a 	or	r16,r16,r2
 400c478:	0027883a 	mov	r19,zero
 400c47c:	0039883a 	mov	fp,zero
 400c480:	3804d53a 	srli	r2,r7,20
 400c484:	382ed7fa 	srli	r23,r7,31
 400c488:	04400434 	movhi	r17,16
 400c48c:	8c7fffc4 	addi	r17,r17,-1
 400c490:	1081ffcc 	andi	r2,r2,2047
 400c494:	3011883a 	mov	r8,r6
 400c498:	3c62703a 	and	r17,r7,r17
 400c49c:	ba803fcc 	andi	r10,r23,255
 400c4a0:	10006d26 	beq	r2,zero,400c658 <__muldf3+0x254>
 400c4a4:	00c1ffc4 	movi	r3,2047
 400c4a8:	10c06526 	beq	r2,r3,400c640 <__muldf3+0x23c>
 400c4ac:	88c00434 	orhi	r3,r17,16
 400c4b0:	180690fa 	slli	r3,r3,3
 400c4b4:	3022d77a 	srli	r17,r6,29
 400c4b8:	301090fa 	slli	r8,r6,3
 400c4bc:	10bf0044 	addi	r2,r2,-1023
 400c4c0:	88e2b03a 	or	r17,r17,r3
 400c4c4:	000b883a 	mov	r5,zero
 400c4c8:	9085883a 	add	r2,r18,r2
 400c4cc:	2cc8b03a 	or	r4,r5,r19
 400c4d0:	00c003c4 	movi	r3,15
 400c4d4:	bdacf03a 	xor	r22,r23,r22
 400c4d8:	12c00044 	addi	r11,r2,1
 400c4dc:	19009936 	bltu	r3,r4,400c744 <__muldf3+0x340>
 400c4e0:	200890ba 	slli	r4,r4,2
 400c4e4:	00c10074 	movhi	r3,1025
 400c4e8:	18f13e04 	addi	r3,r3,-15112
 400c4ec:	20c9883a 	add	r4,r4,r3
 400c4f0:	20c00017 	ldw	r3,0(r4)
 400c4f4:	1800683a 	jmp	r3
 400c4f8:	0400c744 	movi	r16,797
 400c4fc:	0400c558 	cmpnei	r16,zero,789
 400c500:	0400c558 	cmpnei	r16,zero,789
 400c504:	0400c554 	movui	r16,789
 400c508:	0400c720 	cmpeqi	r16,zero,796
 400c50c:	0400c720 	cmpeqi	r16,zero,796
 400c510:	0400c708 	cmpgei	r16,zero,796
 400c514:	0400c554 	movui	r16,789
 400c518:	0400c720 	cmpeqi	r16,zero,796
 400c51c:	0400c708 	cmpgei	r16,zero,796
 400c520:	0400c720 	cmpeqi	r16,zero,796
 400c524:	0400c554 	movui	r16,789
 400c528:	0400c730 	cmpltui	r16,zero,796
 400c52c:	0400c730 	cmpltui	r16,zero,796
 400c530:	0400c730 	cmpltui	r16,zero,796
 400c534:	0400c94c 	andi	r16,zero,805
 400c538:	2404b03a 	or	r2,r4,r16
 400c53c:	10006f1e 	bne	r2,zero,400c6fc <__muldf3+0x2f8>
 400c540:	04c00204 	movi	r19,8
 400c544:	0021883a 	mov	r16,zero
 400c548:	0029883a 	mov	r20,zero
 400c54c:	07000084 	movi	fp,2
 400c550:	003fcb06 	br	400c480 <__alt_data_end+0xfc00c480>
 400c554:	502d883a 	mov	r22,r10
 400c558:	00800084 	movi	r2,2
 400c55c:	28805726 	beq	r5,r2,400c6bc <__muldf3+0x2b8>
 400c560:	008000c4 	movi	r2,3
 400c564:	28816626 	beq	r5,r2,400cb00 <__muldf3+0x6fc>
 400c568:	00800044 	movi	r2,1
 400c56c:	2881411e 	bne	r5,r2,400ca74 <__muldf3+0x670>
 400c570:	b02b883a 	mov	r21,r22
 400c574:	0005883a 	mov	r2,zero
 400c578:	000b883a 	mov	r5,zero
 400c57c:	0029883a 	mov	r20,zero
 400c580:	1004953a 	slli	r2,r2,20
 400c584:	a8c03fcc 	andi	r3,r21,255
 400c588:	04400434 	movhi	r17,16
 400c58c:	8c7fffc4 	addi	r17,r17,-1
 400c590:	180697fa 	slli	r3,r3,31
 400c594:	2c4a703a 	and	r5,r5,r17
 400c598:	288ab03a 	or	r5,r5,r2
 400c59c:	28c6b03a 	or	r3,r5,r3
 400c5a0:	a005883a 	mov	r2,r20
 400c5a4:	dfc00c17 	ldw	ra,48(sp)
 400c5a8:	df000b17 	ldw	fp,44(sp)
 400c5ac:	ddc00a17 	ldw	r23,40(sp)
 400c5b0:	dd800917 	ldw	r22,36(sp)
 400c5b4:	dd400817 	ldw	r21,32(sp)
 400c5b8:	dd000717 	ldw	r20,28(sp)
 400c5bc:	dcc00617 	ldw	r19,24(sp)
 400c5c0:	dc800517 	ldw	r18,20(sp)
 400c5c4:	dc400417 	ldw	r17,16(sp)
 400c5c8:	dc000317 	ldw	r16,12(sp)
 400c5cc:	dec00d04 	addi	sp,sp,52
 400c5d0:	f800283a 	ret
 400c5d4:	2404b03a 	or	r2,r4,r16
 400c5d8:	2027883a 	mov	r19,r4
 400c5dc:	10004226 	beq	r2,zero,400c6e8 <__muldf3+0x2e4>
 400c5e0:	8000fc26 	beq	r16,zero,400c9d4 <__muldf3+0x5d0>
 400c5e4:	8009883a 	mov	r4,r16
 400c5e8:	d9800215 	stw	r6,8(sp)
 400c5ec:	d9c00015 	stw	r7,0(sp)
 400c5f0:	da400115 	stw	r9,4(sp)
 400c5f4:	400d61c0 	call	400d61c <__clzsi2>
 400c5f8:	d9800217 	ldw	r6,8(sp)
 400c5fc:	d9c00017 	ldw	r7,0(sp)
 400c600:	da400117 	ldw	r9,4(sp)
 400c604:	113ffd44 	addi	r4,r2,-11
 400c608:	00c00704 	movi	r3,28
 400c60c:	1900ed16 	blt	r3,r4,400c9c4 <__muldf3+0x5c0>
 400c610:	00c00744 	movi	r3,29
 400c614:	147ffe04 	addi	r17,r2,-8
 400c618:	1907c83a 	sub	r3,r3,r4
 400c61c:	8460983a 	sll	r16,r16,r17
 400c620:	98c6d83a 	srl	r3,r19,r3
 400c624:	9c68983a 	sll	r20,r19,r17
 400c628:	1c20b03a 	or	r16,r3,r16
 400c62c:	1080fcc4 	addi	r2,r2,1011
 400c630:	00a5c83a 	sub	r18,zero,r2
 400c634:	0027883a 	mov	r19,zero
 400c638:	0039883a 	mov	fp,zero
 400c63c:	003f9006 	br	400c480 <__alt_data_end+0xfc00c480>
 400c640:	3446b03a 	or	r3,r6,r17
 400c644:	1800261e 	bne	r3,zero,400c6e0 <__muldf3+0x2dc>
 400c648:	0023883a 	mov	r17,zero
 400c64c:	0011883a 	mov	r8,zero
 400c650:	01400084 	movi	r5,2
 400c654:	003f9c06 	br	400c4c8 <__alt_data_end+0xfc00c4c8>
 400c658:	3446b03a 	or	r3,r6,r17
 400c65c:	18001c26 	beq	r3,zero,400c6d0 <__muldf3+0x2cc>
 400c660:	8800ce26 	beq	r17,zero,400c99c <__muldf3+0x598>
 400c664:	8809883a 	mov	r4,r17
 400c668:	d9800215 	stw	r6,8(sp)
 400c66c:	da400115 	stw	r9,4(sp)
 400c670:	da800015 	stw	r10,0(sp)
 400c674:	400d61c0 	call	400d61c <__clzsi2>
 400c678:	d9800217 	ldw	r6,8(sp)
 400c67c:	da400117 	ldw	r9,4(sp)
 400c680:	da800017 	ldw	r10,0(sp)
 400c684:	113ffd44 	addi	r4,r2,-11
 400c688:	00c00704 	movi	r3,28
 400c68c:	1900bf16 	blt	r3,r4,400c98c <__muldf3+0x588>
 400c690:	00c00744 	movi	r3,29
 400c694:	123ffe04 	addi	r8,r2,-8
 400c698:	1907c83a 	sub	r3,r3,r4
 400c69c:	8a22983a 	sll	r17,r17,r8
 400c6a0:	30c6d83a 	srl	r3,r6,r3
 400c6a4:	3210983a 	sll	r8,r6,r8
 400c6a8:	1c62b03a 	or	r17,r3,r17
 400c6ac:	1080fcc4 	addi	r2,r2,1011
 400c6b0:	0085c83a 	sub	r2,zero,r2
 400c6b4:	000b883a 	mov	r5,zero
 400c6b8:	003f8306 	br	400c4c8 <__alt_data_end+0xfc00c4c8>
 400c6bc:	b02b883a 	mov	r21,r22
 400c6c0:	0081ffc4 	movi	r2,2047
 400c6c4:	000b883a 	mov	r5,zero
 400c6c8:	0029883a 	mov	r20,zero
 400c6cc:	003fac06 	br	400c580 <__alt_data_end+0xfc00c580>
 400c6d0:	0023883a 	mov	r17,zero
 400c6d4:	0011883a 	mov	r8,zero
 400c6d8:	01400044 	movi	r5,1
 400c6dc:	003f7a06 	br	400c4c8 <__alt_data_end+0xfc00c4c8>
 400c6e0:	014000c4 	movi	r5,3
 400c6e4:	003f7806 	br	400c4c8 <__alt_data_end+0xfc00c4c8>
 400c6e8:	04c00104 	movi	r19,4
 400c6ec:	0021883a 	mov	r16,zero
 400c6f0:	0029883a 	mov	r20,zero
 400c6f4:	07000044 	movi	fp,1
 400c6f8:	003f6106 	br	400c480 <__alt_data_end+0xfc00c480>
 400c6fc:	04c00304 	movi	r19,12
 400c700:	070000c4 	movi	fp,3
 400c704:	003f5e06 	br	400c480 <__alt_data_end+0xfc00c480>
 400c708:	01400434 	movhi	r5,16
 400c70c:	002b883a 	mov	r21,zero
 400c710:	297fffc4 	addi	r5,r5,-1
 400c714:	053fffc4 	movi	r20,-1
 400c718:	0081ffc4 	movi	r2,2047
 400c71c:	003f9806 	br	400c580 <__alt_data_end+0xfc00c580>
 400c720:	8023883a 	mov	r17,r16
 400c724:	a011883a 	mov	r8,r20
 400c728:	e00b883a 	mov	r5,fp
 400c72c:	003f8a06 	br	400c558 <__alt_data_end+0xfc00c558>
 400c730:	8023883a 	mov	r17,r16
 400c734:	a011883a 	mov	r8,r20
 400c738:	482d883a 	mov	r22,r9
 400c73c:	e00b883a 	mov	r5,fp
 400c740:	003f8506 	br	400c558 <__alt_data_end+0xfc00c558>
 400c744:	a00ad43a 	srli	r5,r20,16
 400c748:	401ad43a 	srli	r13,r8,16
 400c74c:	a53fffcc 	andi	r20,r20,65535
 400c750:	423fffcc 	andi	r8,r8,65535
 400c754:	4519383a 	mul	r12,r8,r20
 400c758:	4147383a 	mul	r3,r8,r5
 400c75c:	6d09383a 	mul	r4,r13,r20
 400c760:	600cd43a 	srli	r6,r12,16
 400c764:	2b5d383a 	mul	r14,r5,r13
 400c768:	20c9883a 	add	r4,r4,r3
 400c76c:	310d883a 	add	r6,r6,r4
 400c770:	30c0022e 	bgeu	r6,r3,400c77c <__muldf3+0x378>
 400c774:	00c00074 	movhi	r3,1
 400c778:	70dd883a 	add	r14,r14,r3
 400c77c:	8826d43a 	srli	r19,r17,16
 400c780:	8bffffcc 	andi	r15,r17,65535
 400c784:	7d23383a 	mul	r17,r15,r20
 400c788:	7949383a 	mul	r4,r15,r5
 400c78c:	9d29383a 	mul	r20,r19,r20
 400c790:	8814d43a 	srli	r10,r17,16
 400c794:	3012943a 	slli	r9,r6,16
 400c798:	a129883a 	add	r20,r20,r4
 400c79c:	633fffcc 	andi	r12,r12,65535
 400c7a0:	5515883a 	add	r10,r10,r20
 400c7a4:	3006d43a 	srli	r3,r6,16
 400c7a8:	4b13883a 	add	r9,r9,r12
 400c7ac:	2ccb383a 	mul	r5,r5,r19
 400c7b0:	5100022e 	bgeu	r10,r4,400c7bc <__muldf3+0x3b8>
 400c7b4:	01000074 	movhi	r4,1
 400c7b8:	290b883a 	add	r5,r5,r4
 400c7bc:	802ad43a 	srli	r21,r16,16
 400c7c0:	843fffcc 	andi	r16,r16,65535
 400c7c4:	440d383a 	mul	r6,r8,r16
 400c7c8:	4565383a 	mul	r18,r8,r21
 400c7cc:	8349383a 	mul	r4,r16,r13
 400c7d0:	500e943a 	slli	r7,r10,16
 400c7d4:	3010d43a 	srli	r8,r6,16
 400c7d8:	5028d43a 	srli	r20,r10,16
 400c7dc:	2489883a 	add	r4,r4,r18
 400c7e0:	8abfffcc 	andi	r10,r17,65535
 400c7e4:	3a95883a 	add	r10,r7,r10
 400c7e8:	4119883a 	add	r12,r8,r4
 400c7ec:	a169883a 	add	r20,r20,r5
 400c7f0:	1a87883a 	add	r3,r3,r10
 400c7f4:	6d5b383a 	mul	r13,r13,r21
 400c7f8:	6480022e 	bgeu	r12,r18,400c804 <__muldf3+0x400>
 400c7fc:	01000074 	movhi	r4,1
 400c800:	691b883a 	add	r13,r13,r4
 400c804:	7c25383a 	mul	r18,r15,r16
 400c808:	7d4b383a 	mul	r5,r15,r21
 400c80c:	84cf383a 	mul	r7,r16,r19
 400c810:	901ed43a 	srli	r15,r18,16
 400c814:	6008d43a 	srli	r4,r12,16
 400c818:	6010943a 	slli	r8,r12,16
 400c81c:	394f883a 	add	r7,r7,r5
 400c820:	333fffcc 	andi	r12,r6,65535
 400c824:	79df883a 	add	r15,r15,r7
 400c828:	235b883a 	add	r13,r4,r13
 400c82c:	9d63383a 	mul	r17,r19,r21
 400c830:	4309883a 	add	r4,r8,r12
 400c834:	7940022e 	bgeu	r15,r5,400c840 <__muldf3+0x43c>
 400c838:	01400074 	movhi	r5,1
 400c83c:	8963883a 	add	r17,r17,r5
 400c840:	780a943a 	slli	r5,r15,16
 400c844:	91bfffcc 	andi	r6,r18,65535
 400c848:	70c7883a 	add	r3,r14,r3
 400c84c:	298d883a 	add	r6,r5,r6
 400c850:	1a8f803a 	cmpltu	r7,r3,r10
 400c854:	350b883a 	add	r5,r6,r20
 400c858:	20c7883a 	add	r3,r4,r3
 400c85c:	3955883a 	add	r10,r7,r5
 400c860:	1909803a 	cmpltu	r4,r3,r4
 400c864:	6a91883a 	add	r8,r13,r10
 400c868:	780cd43a 	srli	r6,r15,16
 400c86c:	2219883a 	add	r12,r4,r8
 400c870:	2d0b803a 	cmpltu	r5,r5,r20
 400c874:	51cf803a 	cmpltu	r7,r10,r7
 400c878:	29ceb03a 	or	r7,r5,r7
 400c87c:	4351803a 	cmpltu	r8,r8,r13
 400c880:	610b803a 	cmpltu	r5,r12,r4
 400c884:	4148b03a 	or	r4,r8,r5
 400c888:	398f883a 	add	r7,r7,r6
 400c88c:	3909883a 	add	r4,r7,r4
 400c890:	1810927a 	slli	r8,r3,9
 400c894:	2449883a 	add	r4,r4,r17
 400c898:	2008927a 	slli	r4,r4,9
 400c89c:	6022d5fa 	srli	r17,r12,23
 400c8a0:	1806d5fa 	srli	r3,r3,23
 400c8a4:	4252b03a 	or	r9,r8,r9
 400c8a8:	600a927a 	slli	r5,r12,9
 400c8ac:	4810c03a 	cmpne	r8,r9,zero
 400c8b0:	2462b03a 	or	r17,r4,r17
 400c8b4:	40c6b03a 	or	r3,r8,r3
 400c8b8:	8900402c 	andhi	r4,r17,256
 400c8bc:	1950b03a 	or	r8,r3,r5
 400c8c0:	20000726 	beq	r4,zero,400c8e0 <__muldf3+0x4dc>
 400c8c4:	4006d07a 	srli	r3,r8,1
 400c8c8:	880497fa 	slli	r2,r17,31
 400c8cc:	4200004c 	andi	r8,r8,1
 400c8d0:	8822d07a 	srli	r17,r17,1
 400c8d4:	1a10b03a 	or	r8,r3,r8
 400c8d8:	1210b03a 	or	r8,r2,r8
 400c8dc:	5805883a 	mov	r2,r11
 400c8e0:	1140ffc4 	addi	r5,r2,1023
 400c8e4:	0140440e 	bge	zero,r5,400c9f8 <__muldf3+0x5f4>
 400c8e8:	40c001cc 	andi	r3,r8,7
 400c8ec:	18000726 	beq	r3,zero,400c90c <__muldf3+0x508>
 400c8f0:	40c003cc 	andi	r3,r8,15
 400c8f4:	01000104 	movi	r4,4
 400c8f8:	19000426 	beq	r3,r4,400c90c <__muldf3+0x508>
 400c8fc:	4107883a 	add	r3,r8,r4
 400c900:	1a11803a 	cmpltu	r8,r3,r8
 400c904:	8a23883a 	add	r17,r17,r8
 400c908:	1811883a 	mov	r8,r3
 400c90c:	88c0402c 	andhi	r3,r17,256
 400c910:	18000426 	beq	r3,zero,400c924 <__muldf3+0x520>
 400c914:	11410004 	addi	r5,r2,1024
 400c918:	00bfc034 	movhi	r2,65280
 400c91c:	10bfffc4 	addi	r2,r2,-1
 400c920:	88a2703a 	and	r17,r17,r2
 400c924:	0081ff84 	movi	r2,2046
 400c928:	117f6416 	blt	r2,r5,400c6bc <__alt_data_end+0xfc00c6bc>
 400c92c:	8828977a 	slli	r20,r17,29
 400c930:	4010d0fa 	srli	r8,r8,3
 400c934:	8822927a 	slli	r17,r17,9
 400c938:	2881ffcc 	andi	r2,r5,2047
 400c93c:	a228b03a 	or	r20,r20,r8
 400c940:	880ad33a 	srli	r5,r17,12
 400c944:	b02b883a 	mov	r21,r22
 400c948:	003f0d06 	br	400c580 <__alt_data_end+0xfc00c580>
 400c94c:	8080022c 	andhi	r2,r16,8
 400c950:	10000926 	beq	r2,zero,400c978 <__muldf3+0x574>
 400c954:	8880022c 	andhi	r2,r17,8
 400c958:	1000071e 	bne	r2,zero,400c978 <__muldf3+0x574>
 400c95c:	00800434 	movhi	r2,16
 400c960:	89400234 	orhi	r5,r17,8
 400c964:	10bfffc4 	addi	r2,r2,-1
 400c968:	b82b883a 	mov	r21,r23
 400c96c:	288a703a 	and	r5,r5,r2
 400c970:	4029883a 	mov	r20,r8
 400c974:	003f6806 	br	400c718 <__alt_data_end+0xfc00c718>
 400c978:	00800434 	movhi	r2,16
 400c97c:	81400234 	orhi	r5,r16,8
 400c980:	10bfffc4 	addi	r2,r2,-1
 400c984:	288a703a 	and	r5,r5,r2
 400c988:	003f6306 	br	400c718 <__alt_data_end+0xfc00c718>
 400c98c:	147ff604 	addi	r17,r2,-40
 400c990:	3462983a 	sll	r17,r6,r17
 400c994:	0011883a 	mov	r8,zero
 400c998:	003f4406 	br	400c6ac <__alt_data_end+0xfc00c6ac>
 400c99c:	3009883a 	mov	r4,r6
 400c9a0:	d9800215 	stw	r6,8(sp)
 400c9a4:	da400115 	stw	r9,4(sp)
 400c9a8:	da800015 	stw	r10,0(sp)
 400c9ac:	400d61c0 	call	400d61c <__clzsi2>
 400c9b0:	10800804 	addi	r2,r2,32
 400c9b4:	da800017 	ldw	r10,0(sp)
 400c9b8:	da400117 	ldw	r9,4(sp)
 400c9bc:	d9800217 	ldw	r6,8(sp)
 400c9c0:	003f3006 	br	400c684 <__alt_data_end+0xfc00c684>
 400c9c4:	143ff604 	addi	r16,r2,-40
 400c9c8:	9c20983a 	sll	r16,r19,r16
 400c9cc:	0029883a 	mov	r20,zero
 400c9d0:	003f1606 	br	400c62c <__alt_data_end+0xfc00c62c>
 400c9d4:	d9800215 	stw	r6,8(sp)
 400c9d8:	d9c00015 	stw	r7,0(sp)
 400c9dc:	da400115 	stw	r9,4(sp)
 400c9e0:	400d61c0 	call	400d61c <__clzsi2>
 400c9e4:	10800804 	addi	r2,r2,32
 400c9e8:	da400117 	ldw	r9,4(sp)
 400c9ec:	d9c00017 	ldw	r7,0(sp)
 400c9f0:	d9800217 	ldw	r6,8(sp)
 400c9f4:	003f0306 	br	400c604 <__alt_data_end+0xfc00c604>
 400c9f8:	00c00044 	movi	r3,1
 400c9fc:	1947c83a 	sub	r3,r3,r5
 400ca00:	00800e04 	movi	r2,56
 400ca04:	10feda16 	blt	r2,r3,400c570 <__alt_data_end+0xfc00c570>
 400ca08:	008007c4 	movi	r2,31
 400ca0c:	10c01b16 	blt	r2,r3,400ca7c <__muldf3+0x678>
 400ca10:	00800804 	movi	r2,32
 400ca14:	10c5c83a 	sub	r2,r2,r3
 400ca18:	888a983a 	sll	r5,r17,r2
 400ca1c:	40c8d83a 	srl	r4,r8,r3
 400ca20:	4084983a 	sll	r2,r8,r2
 400ca24:	88e2d83a 	srl	r17,r17,r3
 400ca28:	2906b03a 	or	r3,r5,r4
 400ca2c:	1004c03a 	cmpne	r2,r2,zero
 400ca30:	1886b03a 	or	r3,r3,r2
 400ca34:	188001cc 	andi	r2,r3,7
 400ca38:	10000726 	beq	r2,zero,400ca58 <__muldf3+0x654>
 400ca3c:	188003cc 	andi	r2,r3,15
 400ca40:	01000104 	movi	r4,4
 400ca44:	11000426 	beq	r2,r4,400ca58 <__muldf3+0x654>
 400ca48:	1805883a 	mov	r2,r3
 400ca4c:	10c00104 	addi	r3,r2,4
 400ca50:	1885803a 	cmpltu	r2,r3,r2
 400ca54:	88a3883a 	add	r17,r17,r2
 400ca58:	8880202c 	andhi	r2,r17,128
 400ca5c:	10001c26 	beq	r2,zero,400cad0 <__muldf3+0x6cc>
 400ca60:	b02b883a 	mov	r21,r22
 400ca64:	00800044 	movi	r2,1
 400ca68:	000b883a 	mov	r5,zero
 400ca6c:	0029883a 	mov	r20,zero
 400ca70:	003ec306 	br	400c580 <__alt_data_end+0xfc00c580>
 400ca74:	5805883a 	mov	r2,r11
 400ca78:	003f9906 	br	400c8e0 <__alt_data_end+0xfc00c8e0>
 400ca7c:	00bff844 	movi	r2,-31
 400ca80:	1145c83a 	sub	r2,r2,r5
 400ca84:	8888d83a 	srl	r4,r17,r2
 400ca88:	00800804 	movi	r2,32
 400ca8c:	18801a26 	beq	r3,r2,400caf8 <__muldf3+0x6f4>
 400ca90:	00801004 	movi	r2,64
 400ca94:	10c5c83a 	sub	r2,r2,r3
 400ca98:	8884983a 	sll	r2,r17,r2
 400ca9c:	1204b03a 	or	r2,r2,r8
 400caa0:	1004c03a 	cmpne	r2,r2,zero
 400caa4:	2084b03a 	or	r2,r4,r2
 400caa8:	144001cc 	andi	r17,r2,7
 400caac:	88000d1e 	bne	r17,zero,400cae4 <__muldf3+0x6e0>
 400cab0:	000b883a 	mov	r5,zero
 400cab4:	1028d0fa 	srli	r20,r2,3
 400cab8:	b02b883a 	mov	r21,r22
 400cabc:	0005883a 	mov	r2,zero
 400cac0:	a468b03a 	or	r20,r20,r17
 400cac4:	003eae06 	br	400c580 <__alt_data_end+0xfc00c580>
 400cac8:	1007883a 	mov	r3,r2
 400cacc:	0023883a 	mov	r17,zero
 400cad0:	880a927a 	slli	r5,r17,9
 400cad4:	1805883a 	mov	r2,r3
 400cad8:	8822977a 	slli	r17,r17,29
 400cadc:	280ad33a 	srli	r5,r5,12
 400cae0:	003ff406 	br	400cab4 <__alt_data_end+0xfc00cab4>
 400cae4:	10c003cc 	andi	r3,r2,15
 400cae8:	01000104 	movi	r4,4
 400caec:	193ff626 	beq	r3,r4,400cac8 <__alt_data_end+0xfc00cac8>
 400caf0:	0023883a 	mov	r17,zero
 400caf4:	003fd506 	br	400ca4c <__alt_data_end+0xfc00ca4c>
 400caf8:	0005883a 	mov	r2,zero
 400cafc:	003fe706 	br	400ca9c <__alt_data_end+0xfc00ca9c>
 400cb00:	00800434 	movhi	r2,16
 400cb04:	89400234 	orhi	r5,r17,8
 400cb08:	10bfffc4 	addi	r2,r2,-1
 400cb0c:	b02b883a 	mov	r21,r22
 400cb10:	288a703a 	and	r5,r5,r2
 400cb14:	4029883a 	mov	r20,r8
 400cb18:	003eff06 	br	400c718 <__alt_data_end+0xfc00c718>

0400cb1c <__subdf3>:
 400cb1c:	02000434 	movhi	r8,16
 400cb20:	423fffc4 	addi	r8,r8,-1
 400cb24:	defffb04 	addi	sp,sp,-20
 400cb28:	2a14703a 	and	r10,r5,r8
 400cb2c:	3812d53a 	srli	r9,r7,20
 400cb30:	3a10703a 	and	r8,r7,r8
 400cb34:	2006d77a 	srli	r3,r4,29
 400cb38:	3004d77a 	srli	r2,r6,29
 400cb3c:	dc000015 	stw	r16,0(sp)
 400cb40:	501490fa 	slli	r10,r10,3
 400cb44:	2820d53a 	srli	r16,r5,20
 400cb48:	401090fa 	slli	r8,r8,3
 400cb4c:	dc800215 	stw	r18,8(sp)
 400cb50:	dc400115 	stw	r17,4(sp)
 400cb54:	dfc00415 	stw	ra,16(sp)
 400cb58:	202290fa 	slli	r17,r4,3
 400cb5c:	dcc00315 	stw	r19,12(sp)
 400cb60:	4a41ffcc 	andi	r9,r9,2047
 400cb64:	0101ffc4 	movi	r4,2047
 400cb68:	2824d7fa 	srli	r18,r5,31
 400cb6c:	8401ffcc 	andi	r16,r16,2047
 400cb70:	50c6b03a 	or	r3,r10,r3
 400cb74:	380ed7fa 	srli	r7,r7,31
 400cb78:	408ab03a 	or	r5,r8,r2
 400cb7c:	300c90fa 	slli	r6,r6,3
 400cb80:	49009626 	beq	r9,r4,400cddc <__subdf3+0x2c0>
 400cb84:	39c0005c 	xori	r7,r7,1
 400cb88:	8245c83a 	sub	r2,r16,r9
 400cb8c:	3c807426 	beq	r7,r18,400cd60 <__subdf3+0x244>
 400cb90:	0080af0e 	bge	zero,r2,400ce50 <__subdf3+0x334>
 400cb94:	48002a1e 	bne	r9,zero,400cc40 <__subdf3+0x124>
 400cb98:	2988b03a 	or	r4,r5,r6
 400cb9c:	20009a1e 	bne	r4,zero,400ce08 <__subdf3+0x2ec>
 400cba0:	888001cc 	andi	r2,r17,7
 400cba4:	10000726 	beq	r2,zero,400cbc4 <__subdf3+0xa8>
 400cba8:	888003cc 	andi	r2,r17,15
 400cbac:	01000104 	movi	r4,4
 400cbb0:	11000426 	beq	r2,r4,400cbc4 <__subdf3+0xa8>
 400cbb4:	890b883a 	add	r5,r17,r4
 400cbb8:	2c63803a 	cmpltu	r17,r5,r17
 400cbbc:	1c47883a 	add	r3,r3,r17
 400cbc0:	2823883a 	mov	r17,r5
 400cbc4:	1880202c 	andhi	r2,r3,128
 400cbc8:	10005926 	beq	r2,zero,400cd30 <__subdf3+0x214>
 400cbcc:	84000044 	addi	r16,r16,1
 400cbd0:	0081ffc4 	movi	r2,2047
 400cbd4:	8080be26 	beq	r16,r2,400ced0 <__subdf3+0x3b4>
 400cbd8:	017fe034 	movhi	r5,65408
 400cbdc:	297fffc4 	addi	r5,r5,-1
 400cbe0:	1946703a 	and	r3,r3,r5
 400cbe4:	1804977a 	slli	r2,r3,29
 400cbe8:	1806927a 	slli	r3,r3,9
 400cbec:	8822d0fa 	srli	r17,r17,3
 400cbf0:	8401ffcc 	andi	r16,r16,2047
 400cbf4:	180ad33a 	srli	r5,r3,12
 400cbf8:	9100004c 	andi	r4,r18,1
 400cbfc:	1444b03a 	or	r2,r2,r17
 400cc00:	80c1ffcc 	andi	r3,r16,2047
 400cc04:	1820953a 	slli	r16,r3,20
 400cc08:	20c03fcc 	andi	r3,r4,255
 400cc0c:	180897fa 	slli	r4,r3,31
 400cc10:	00c00434 	movhi	r3,16
 400cc14:	18ffffc4 	addi	r3,r3,-1
 400cc18:	28c6703a 	and	r3,r5,r3
 400cc1c:	1c06b03a 	or	r3,r3,r16
 400cc20:	1906b03a 	or	r3,r3,r4
 400cc24:	dfc00417 	ldw	ra,16(sp)
 400cc28:	dcc00317 	ldw	r19,12(sp)
 400cc2c:	dc800217 	ldw	r18,8(sp)
 400cc30:	dc400117 	ldw	r17,4(sp)
 400cc34:	dc000017 	ldw	r16,0(sp)
 400cc38:	dec00504 	addi	sp,sp,20
 400cc3c:	f800283a 	ret
 400cc40:	0101ffc4 	movi	r4,2047
 400cc44:	813fd626 	beq	r16,r4,400cba0 <__alt_data_end+0xfc00cba0>
 400cc48:	29402034 	orhi	r5,r5,128
 400cc4c:	01000e04 	movi	r4,56
 400cc50:	2080a316 	blt	r4,r2,400cee0 <__subdf3+0x3c4>
 400cc54:	010007c4 	movi	r4,31
 400cc58:	2080c616 	blt	r4,r2,400cf74 <__subdf3+0x458>
 400cc5c:	01000804 	movi	r4,32
 400cc60:	2089c83a 	sub	r4,r4,r2
 400cc64:	2910983a 	sll	r8,r5,r4
 400cc68:	308ed83a 	srl	r7,r6,r2
 400cc6c:	3108983a 	sll	r4,r6,r4
 400cc70:	2884d83a 	srl	r2,r5,r2
 400cc74:	41ccb03a 	or	r6,r8,r7
 400cc78:	2008c03a 	cmpne	r4,r4,zero
 400cc7c:	310cb03a 	or	r6,r6,r4
 400cc80:	898dc83a 	sub	r6,r17,r6
 400cc84:	89a3803a 	cmpltu	r17,r17,r6
 400cc88:	1887c83a 	sub	r3,r3,r2
 400cc8c:	1c47c83a 	sub	r3,r3,r17
 400cc90:	3023883a 	mov	r17,r6
 400cc94:	1880202c 	andhi	r2,r3,128
 400cc98:	10002326 	beq	r2,zero,400cd28 <__subdf3+0x20c>
 400cc9c:	04c02034 	movhi	r19,128
 400cca0:	9cffffc4 	addi	r19,r19,-1
 400cca4:	1ce6703a 	and	r19,r3,r19
 400cca8:	98007a26 	beq	r19,zero,400ce94 <__subdf3+0x378>
 400ccac:	9809883a 	mov	r4,r19
 400ccb0:	400d61c0 	call	400d61c <__clzsi2>
 400ccb4:	113ffe04 	addi	r4,r2,-8
 400ccb8:	00c007c4 	movi	r3,31
 400ccbc:	19007b16 	blt	r3,r4,400ceac <__subdf3+0x390>
 400ccc0:	00800804 	movi	r2,32
 400ccc4:	1105c83a 	sub	r2,r2,r4
 400ccc8:	8884d83a 	srl	r2,r17,r2
 400cccc:	9906983a 	sll	r3,r19,r4
 400ccd0:	8922983a 	sll	r17,r17,r4
 400ccd4:	10c4b03a 	or	r2,r2,r3
 400ccd8:	24007816 	blt	r4,r16,400cebc <__subdf3+0x3a0>
 400ccdc:	2421c83a 	sub	r16,r4,r16
 400cce0:	80c00044 	addi	r3,r16,1
 400cce4:	010007c4 	movi	r4,31
 400cce8:	20c09516 	blt	r4,r3,400cf40 <__subdf3+0x424>
 400ccec:	01400804 	movi	r5,32
 400ccf0:	28cbc83a 	sub	r5,r5,r3
 400ccf4:	88c8d83a 	srl	r4,r17,r3
 400ccf8:	8962983a 	sll	r17,r17,r5
 400ccfc:	114a983a 	sll	r5,r2,r5
 400cd00:	10c6d83a 	srl	r3,r2,r3
 400cd04:	8804c03a 	cmpne	r2,r17,zero
 400cd08:	290ab03a 	or	r5,r5,r4
 400cd0c:	28a2b03a 	or	r17,r5,r2
 400cd10:	0021883a 	mov	r16,zero
 400cd14:	003fa206 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400cd18:	2090b03a 	or	r8,r4,r2
 400cd1c:	40018e26 	beq	r8,zero,400d358 <__subdf3+0x83c>
 400cd20:	1007883a 	mov	r3,r2
 400cd24:	2023883a 	mov	r17,r4
 400cd28:	888001cc 	andi	r2,r17,7
 400cd2c:	103f9e1e 	bne	r2,zero,400cba8 <__alt_data_end+0xfc00cba8>
 400cd30:	1804977a 	slli	r2,r3,29
 400cd34:	8822d0fa 	srli	r17,r17,3
 400cd38:	1810d0fa 	srli	r8,r3,3
 400cd3c:	9100004c 	andi	r4,r18,1
 400cd40:	1444b03a 	or	r2,r2,r17
 400cd44:	00c1ffc4 	movi	r3,2047
 400cd48:	80c02826 	beq	r16,r3,400cdec <__subdf3+0x2d0>
 400cd4c:	01400434 	movhi	r5,16
 400cd50:	297fffc4 	addi	r5,r5,-1
 400cd54:	80e0703a 	and	r16,r16,r3
 400cd58:	414a703a 	and	r5,r8,r5
 400cd5c:	003fa806 	br	400cc00 <__alt_data_end+0xfc00cc00>
 400cd60:	0080630e 	bge	zero,r2,400cef0 <__subdf3+0x3d4>
 400cd64:	48003026 	beq	r9,zero,400ce28 <__subdf3+0x30c>
 400cd68:	0101ffc4 	movi	r4,2047
 400cd6c:	813f8c26 	beq	r16,r4,400cba0 <__alt_data_end+0xfc00cba0>
 400cd70:	29402034 	orhi	r5,r5,128
 400cd74:	01000e04 	movi	r4,56
 400cd78:	2080a90e 	bge	r4,r2,400d020 <__subdf3+0x504>
 400cd7c:	298cb03a 	or	r6,r5,r6
 400cd80:	3012c03a 	cmpne	r9,r6,zero
 400cd84:	0005883a 	mov	r2,zero
 400cd88:	4c53883a 	add	r9,r9,r17
 400cd8c:	4c63803a 	cmpltu	r17,r9,r17
 400cd90:	10c7883a 	add	r3,r2,r3
 400cd94:	88c7883a 	add	r3,r17,r3
 400cd98:	4823883a 	mov	r17,r9
 400cd9c:	1880202c 	andhi	r2,r3,128
 400cda0:	1000d026 	beq	r2,zero,400d0e4 <__subdf3+0x5c8>
 400cda4:	84000044 	addi	r16,r16,1
 400cda8:	0081ffc4 	movi	r2,2047
 400cdac:	8080fe26 	beq	r16,r2,400d1a8 <__subdf3+0x68c>
 400cdb0:	00bfe034 	movhi	r2,65408
 400cdb4:	10bfffc4 	addi	r2,r2,-1
 400cdb8:	1886703a 	and	r3,r3,r2
 400cdbc:	880ad07a 	srli	r5,r17,1
 400cdc0:	180497fa 	slli	r2,r3,31
 400cdc4:	8900004c 	andi	r4,r17,1
 400cdc8:	2922b03a 	or	r17,r5,r4
 400cdcc:	1806d07a 	srli	r3,r3,1
 400cdd0:	1462b03a 	or	r17,r2,r17
 400cdd4:	3825883a 	mov	r18,r7
 400cdd8:	003f7106 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400cddc:	2984b03a 	or	r2,r5,r6
 400cde0:	103f6826 	beq	r2,zero,400cb84 <__alt_data_end+0xfc00cb84>
 400cde4:	39c03fcc 	andi	r7,r7,255
 400cde8:	003f6706 	br	400cb88 <__alt_data_end+0xfc00cb88>
 400cdec:	4086b03a 	or	r3,r8,r2
 400cdf0:	18015226 	beq	r3,zero,400d33c <__subdf3+0x820>
 400cdf4:	00c00434 	movhi	r3,16
 400cdf8:	41400234 	orhi	r5,r8,8
 400cdfc:	18ffffc4 	addi	r3,r3,-1
 400ce00:	28ca703a 	and	r5,r5,r3
 400ce04:	003f7e06 	br	400cc00 <__alt_data_end+0xfc00cc00>
 400ce08:	10bfffc4 	addi	r2,r2,-1
 400ce0c:	1000491e 	bne	r2,zero,400cf34 <__subdf3+0x418>
 400ce10:	898fc83a 	sub	r7,r17,r6
 400ce14:	89e3803a 	cmpltu	r17,r17,r7
 400ce18:	1947c83a 	sub	r3,r3,r5
 400ce1c:	1c47c83a 	sub	r3,r3,r17
 400ce20:	3823883a 	mov	r17,r7
 400ce24:	003f9b06 	br	400cc94 <__alt_data_end+0xfc00cc94>
 400ce28:	2988b03a 	or	r4,r5,r6
 400ce2c:	203f5c26 	beq	r4,zero,400cba0 <__alt_data_end+0xfc00cba0>
 400ce30:	10bfffc4 	addi	r2,r2,-1
 400ce34:	1000931e 	bne	r2,zero,400d084 <__subdf3+0x568>
 400ce38:	898d883a 	add	r6,r17,r6
 400ce3c:	3463803a 	cmpltu	r17,r6,r17
 400ce40:	1947883a 	add	r3,r3,r5
 400ce44:	88c7883a 	add	r3,r17,r3
 400ce48:	3023883a 	mov	r17,r6
 400ce4c:	003fd306 	br	400cd9c <__alt_data_end+0xfc00cd9c>
 400ce50:	1000541e 	bne	r2,zero,400cfa4 <__subdf3+0x488>
 400ce54:	80800044 	addi	r2,r16,1
 400ce58:	1081ffcc 	andi	r2,r2,2047
 400ce5c:	01000044 	movi	r4,1
 400ce60:	2080a20e 	bge	r4,r2,400d0ec <__subdf3+0x5d0>
 400ce64:	8989c83a 	sub	r4,r17,r6
 400ce68:	8905803a 	cmpltu	r2,r17,r4
 400ce6c:	1967c83a 	sub	r19,r3,r5
 400ce70:	98a7c83a 	sub	r19,r19,r2
 400ce74:	9880202c 	andhi	r2,r19,128
 400ce78:	10006326 	beq	r2,zero,400d008 <__subdf3+0x4ec>
 400ce7c:	3463c83a 	sub	r17,r6,r17
 400ce80:	28c7c83a 	sub	r3,r5,r3
 400ce84:	344d803a 	cmpltu	r6,r6,r17
 400ce88:	19a7c83a 	sub	r19,r3,r6
 400ce8c:	3825883a 	mov	r18,r7
 400ce90:	983f861e 	bne	r19,zero,400ccac <__alt_data_end+0xfc00ccac>
 400ce94:	8809883a 	mov	r4,r17
 400ce98:	400d61c0 	call	400d61c <__clzsi2>
 400ce9c:	10800804 	addi	r2,r2,32
 400cea0:	113ffe04 	addi	r4,r2,-8
 400cea4:	00c007c4 	movi	r3,31
 400cea8:	193f850e 	bge	r3,r4,400ccc0 <__alt_data_end+0xfc00ccc0>
 400ceac:	10bff604 	addi	r2,r2,-40
 400ceb0:	8884983a 	sll	r2,r17,r2
 400ceb4:	0023883a 	mov	r17,zero
 400ceb8:	243f880e 	bge	r4,r16,400ccdc <__alt_data_end+0xfc00ccdc>
 400cebc:	00ffe034 	movhi	r3,65408
 400cec0:	18ffffc4 	addi	r3,r3,-1
 400cec4:	8121c83a 	sub	r16,r16,r4
 400cec8:	10c6703a 	and	r3,r2,r3
 400cecc:	003f3406 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400ced0:	9100004c 	andi	r4,r18,1
 400ced4:	000b883a 	mov	r5,zero
 400ced8:	0005883a 	mov	r2,zero
 400cedc:	003f4806 	br	400cc00 <__alt_data_end+0xfc00cc00>
 400cee0:	298cb03a 	or	r6,r5,r6
 400cee4:	300cc03a 	cmpne	r6,r6,zero
 400cee8:	0005883a 	mov	r2,zero
 400ceec:	003f6406 	br	400cc80 <__alt_data_end+0xfc00cc80>
 400cef0:	10009a1e 	bne	r2,zero,400d15c <__subdf3+0x640>
 400cef4:	82400044 	addi	r9,r16,1
 400cef8:	4881ffcc 	andi	r2,r9,2047
 400cefc:	02800044 	movi	r10,1
 400cf00:	5080670e 	bge	r10,r2,400d0a0 <__subdf3+0x584>
 400cf04:	0081ffc4 	movi	r2,2047
 400cf08:	4880af26 	beq	r9,r2,400d1c8 <__subdf3+0x6ac>
 400cf0c:	898d883a 	add	r6,r17,r6
 400cf10:	1945883a 	add	r2,r3,r5
 400cf14:	3447803a 	cmpltu	r3,r6,r17
 400cf18:	1887883a 	add	r3,r3,r2
 400cf1c:	182297fa 	slli	r17,r3,31
 400cf20:	300cd07a 	srli	r6,r6,1
 400cf24:	1806d07a 	srli	r3,r3,1
 400cf28:	4821883a 	mov	r16,r9
 400cf2c:	89a2b03a 	or	r17,r17,r6
 400cf30:	003f1b06 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400cf34:	0101ffc4 	movi	r4,2047
 400cf38:	813f441e 	bne	r16,r4,400cc4c <__alt_data_end+0xfc00cc4c>
 400cf3c:	003f1806 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400cf40:	843ff844 	addi	r16,r16,-31
 400cf44:	01400804 	movi	r5,32
 400cf48:	1408d83a 	srl	r4,r2,r16
 400cf4c:	19405026 	beq	r3,r5,400d090 <__subdf3+0x574>
 400cf50:	01401004 	movi	r5,64
 400cf54:	28c7c83a 	sub	r3,r5,r3
 400cf58:	10c4983a 	sll	r2,r2,r3
 400cf5c:	88a2b03a 	or	r17,r17,r2
 400cf60:	8822c03a 	cmpne	r17,r17,zero
 400cf64:	2462b03a 	or	r17,r4,r17
 400cf68:	0007883a 	mov	r3,zero
 400cf6c:	0021883a 	mov	r16,zero
 400cf70:	003f6d06 	br	400cd28 <__alt_data_end+0xfc00cd28>
 400cf74:	11fff804 	addi	r7,r2,-32
 400cf78:	01000804 	movi	r4,32
 400cf7c:	29ced83a 	srl	r7,r5,r7
 400cf80:	11004526 	beq	r2,r4,400d098 <__subdf3+0x57c>
 400cf84:	01001004 	movi	r4,64
 400cf88:	2089c83a 	sub	r4,r4,r2
 400cf8c:	2904983a 	sll	r2,r5,r4
 400cf90:	118cb03a 	or	r6,r2,r6
 400cf94:	300cc03a 	cmpne	r6,r6,zero
 400cf98:	398cb03a 	or	r6,r7,r6
 400cf9c:	0005883a 	mov	r2,zero
 400cfa0:	003f3706 	br	400cc80 <__alt_data_end+0xfc00cc80>
 400cfa4:	80002a26 	beq	r16,zero,400d050 <__subdf3+0x534>
 400cfa8:	0101ffc4 	movi	r4,2047
 400cfac:	49006626 	beq	r9,r4,400d148 <__subdf3+0x62c>
 400cfb0:	0085c83a 	sub	r2,zero,r2
 400cfb4:	18c02034 	orhi	r3,r3,128
 400cfb8:	01000e04 	movi	r4,56
 400cfbc:	20807e16 	blt	r4,r2,400d1b8 <__subdf3+0x69c>
 400cfc0:	010007c4 	movi	r4,31
 400cfc4:	2080e716 	blt	r4,r2,400d364 <__subdf3+0x848>
 400cfc8:	01000804 	movi	r4,32
 400cfcc:	2089c83a 	sub	r4,r4,r2
 400cfd0:	1914983a 	sll	r10,r3,r4
 400cfd4:	8890d83a 	srl	r8,r17,r2
 400cfd8:	8908983a 	sll	r4,r17,r4
 400cfdc:	1884d83a 	srl	r2,r3,r2
 400cfe0:	5222b03a 	or	r17,r10,r8
 400cfe4:	2006c03a 	cmpne	r3,r4,zero
 400cfe8:	88e2b03a 	or	r17,r17,r3
 400cfec:	3463c83a 	sub	r17,r6,r17
 400cff0:	2885c83a 	sub	r2,r5,r2
 400cff4:	344d803a 	cmpltu	r6,r6,r17
 400cff8:	1187c83a 	sub	r3,r2,r6
 400cffc:	4821883a 	mov	r16,r9
 400d000:	3825883a 	mov	r18,r7
 400d004:	003f2306 	br	400cc94 <__alt_data_end+0xfc00cc94>
 400d008:	24d0b03a 	or	r8,r4,r19
 400d00c:	40001b1e 	bne	r8,zero,400d07c <__subdf3+0x560>
 400d010:	0005883a 	mov	r2,zero
 400d014:	0009883a 	mov	r4,zero
 400d018:	0021883a 	mov	r16,zero
 400d01c:	003f4906 	br	400cd44 <__alt_data_end+0xfc00cd44>
 400d020:	010007c4 	movi	r4,31
 400d024:	20803a16 	blt	r4,r2,400d110 <__subdf3+0x5f4>
 400d028:	01000804 	movi	r4,32
 400d02c:	2089c83a 	sub	r4,r4,r2
 400d030:	2912983a 	sll	r9,r5,r4
 400d034:	3090d83a 	srl	r8,r6,r2
 400d038:	3108983a 	sll	r4,r6,r4
 400d03c:	2884d83a 	srl	r2,r5,r2
 400d040:	4a12b03a 	or	r9,r9,r8
 400d044:	2008c03a 	cmpne	r4,r4,zero
 400d048:	4912b03a 	or	r9,r9,r4
 400d04c:	003f4e06 	br	400cd88 <__alt_data_end+0xfc00cd88>
 400d050:	1c48b03a 	or	r4,r3,r17
 400d054:	20003c26 	beq	r4,zero,400d148 <__subdf3+0x62c>
 400d058:	0084303a 	nor	r2,zero,r2
 400d05c:	1000381e 	bne	r2,zero,400d140 <__subdf3+0x624>
 400d060:	3463c83a 	sub	r17,r6,r17
 400d064:	28c5c83a 	sub	r2,r5,r3
 400d068:	344d803a 	cmpltu	r6,r6,r17
 400d06c:	1187c83a 	sub	r3,r2,r6
 400d070:	4821883a 	mov	r16,r9
 400d074:	3825883a 	mov	r18,r7
 400d078:	003f0606 	br	400cc94 <__alt_data_end+0xfc00cc94>
 400d07c:	2023883a 	mov	r17,r4
 400d080:	003f0906 	br	400cca8 <__alt_data_end+0xfc00cca8>
 400d084:	0101ffc4 	movi	r4,2047
 400d088:	813f3a1e 	bne	r16,r4,400cd74 <__alt_data_end+0xfc00cd74>
 400d08c:	003ec406 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d090:	0005883a 	mov	r2,zero
 400d094:	003fb106 	br	400cf5c <__alt_data_end+0xfc00cf5c>
 400d098:	0005883a 	mov	r2,zero
 400d09c:	003fbc06 	br	400cf90 <__alt_data_end+0xfc00cf90>
 400d0a0:	1c44b03a 	or	r2,r3,r17
 400d0a4:	80008e1e 	bne	r16,zero,400d2e0 <__subdf3+0x7c4>
 400d0a8:	1000c826 	beq	r2,zero,400d3cc <__subdf3+0x8b0>
 400d0ac:	2984b03a 	or	r2,r5,r6
 400d0b0:	103ebb26 	beq	r2,zero,400cba0 <__alt_data_end+0xfc00cba0>
 400d0b4:	8989883a 	add	r4,r17,r6
 400d0b8:	1945883a 	add	r2,r3,r5
 400d0bc:	2447803a 	cmpltu	r3,r4,r17
 400d0c0:	1887883a 	add	r3,r3,r2
 400d0c4:	1880202c 	andhi	r2,r3,128
 400d0c8:	2023883a 	mov	r17,r4
 400d0cc:	103f1626 	beq	r2,zero,400cd28 <__alt_data_end+0xfc00cd28>
 400d0d0:	00bfe034 	movhi	r2,65408
 400d0d4:	10bfffc4 	addi	r2,r2,-1
 400d0d8:	5021883a 	mov	r16,r10
 400d0dc:	1886703a 	and	r3,r3,r2
 400d0e0:	003eaf06 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d0e4:	3825883a 	mov	r18,r7
 400d0e8:	003f0f06 	br	400cd28 <__alt_data_end+0xfc00cd28>
 400d0ec:	1c44b03a 	or	r2,r3,r17
 400d0f0:	8000251e 	bne	r16,zero,400d188 <__subdf3+0x66c>
 400d0f4:	1000661e 	bne	r2,zero,400d290 <__subdf3+0x774>
 400d0f8:	2990b03a 	or	r8,r5,r6
 400d0fc:	40009626 	beq	r8,zero,400d358 <__subdf3+0x83c>
 400d100:	2807883a 	mov	r3,r5
 400d104:	3023883a 	mov	r17,r6
 400d108:	3825883a 	mov	r18,r7
 400d10c:	003ea406 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d110:	127ff804 	addi	r9,r2,-32
 400d114:	01000804 	movi	r4,32
 400d118:	2a52d83a 	srl	r9,r5,r9
 400d11c:	11008c26 	beq	r2,r4,400d350 <__subdf3+0x834>
 400d120:	01001004 	movi	r4,64
 400d124:	2085c83a 	sub	r2,r4,r2
 400d128:	2884983a 	sll	r2,r5,r2
 400d12c:	118cb03a 	or	r6,r2,r6
 400d130:	300cc03a 	cmpne	r6,r6,zero
 400d134:	4992b03a 	or	r9,r9,r6
 400d138:	0005883a 	mov	r2,zero
 400d13c:	003f1206 	br	400cd88 <__alt_data_end+0xfc00cd88>
 400d140:	0101ffc4 	movi	r4,2047
 400d144:	493f9c1e 	bne	r9,r4,400cfb8 <__alt_data_end+0xfc00cfb8>
 400d148:	2807883a 	mov	r3,r5
 400d14c:	3023883a 	mov	r17,r6
 400d150:	4821883a 	mov	r16,r9
 400d154:	3825883a 	mov	r18,r7
 400d158:	003e9106 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d15c:	80001f1e 	bne	r16,zero,400d1dc <__subdf3+0x6c0>
 400d160:	1c48b03a 	or	r4,r3,r17
 400d164:	20005a26 	beq	r4,zero,400d2d0 <__subdf3+0x7b4>
 400d168:	0084303a 	nor	r2,zero,r2
 400d16c:	1000561e 	bne	r2,zero,400d2c8 <__subdf3+0x7ac>
 400d170:	89a3883a 	add	r17,r17,r6
 400d174:	1945883a 	add	r2,r3,r5
 400d178:	898d803a 	cmpltu	r6,r17,r6
 400d17c:	3087883a 	add	r3,r6,r2
 400d180:	4821883a 	mov	r16,r9
 400d184:	003f0506 	br	400cd9c <__alt_data_end+0xfc00cd9c>
 400d188:	10002b1e 	bne	r2,zero,400d238 <__subdf3+0x71c>
 400d18c:	2984b03a 	or	r2,r5,r6
 400d190:	10008026 	beq	r2,zero,400d394 <__subdf3+0x878>
 400d194:	2807883a 	mov	r3,r5
 400d198:	3023883a 	mov	r17,r6
 400d19c:	3825883a 	mov	r18,r7
 400d1a0:	0401ffc4 	movi	r16,2047
 400d1a4:	003e7e06 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d1a8:	3809883a 	mov	r4,r7
 400d1ac:	0011883a 	mov	r8,zero
 400d1b0:	0005883a 	mov	r2,zero
 400d1b4:	003ee306 	br	400cd44 <__alt_data_end+0xfc00cd44>
 400d1b8:	1c62b03a 	or	r17,r3,r17
 400d1bc:	8822c03a 	cmpne	r17,r17,zero
 400d1c0:	0005883a 	mov	r2,zero
 400d1c4:	003f8906 	br	400cfec <__alt_data_end+0xfc00cfec>
 400d1c8:	3809883a 	mov	r4,r7
 400d1cc:	4821883a 	mov	r16,r9
 400d1d0:	0011883a 	mov	r8,zero
 400d1d4:	0005883a 	mov	r2,zero
 400d1d8:	003eda06 	br	400cd44 <__alt_data_end+0xfc00cd44>
 400d1dc:	0101ffc4 	movi	r4,2047
 400d1e0:	49003b26 	beq	r9,r4,400d2d0 <__subdf3+0x7b4>
 400d1e4:	0085c83a 	sub	r2,zero,r2
 400d1e8:	18c02034 	orhi	r3,r3,128
 400d1ec:	01000e04 	movi	r4,56
 400d1f0:	20806e16 	blt	r4,r2,400d3ac <__subdf3+0x890>
 400d1f4:	010007c4 	movi	r4,31
 400d1f8:	20807716 	blt	r4,r2,400d3d8 <__subdf3+0x8bc>
 400d1fc:	01000804 	movi	r4,32
 400d200:	2089c83a 	sub	r4,r4,r2
 400d204:	1914983a 	sll	r10,r3,r4
 400d208:	8890d83a 	srl	r8,r17,r2
 400d20c:	8908983a 	sll	r4,r17,r4
 400d210:	1884d83a 	srl	r2,r3,r2
 400d214:	5222b03a 	or	r17,r10,r8
 400d218:	2006c03a 	cmpne	r3,r4,zero
 400d21c:	88e2b03a 	or	r17,r17,r3
 400d220:	89a3883a 	add	r17,r17,r6
 400d224:	1145883a 	add	r2,r2,r5
 400d228:	898d803a 	cmpltu	r6,r17,r6
 400d22c:	3087883a 	add	r3,r6,r2
 400d230:	4821883a 	mov	r16,r9
 400d234:	003ed906 	br	400cd9c <__alt_data_end+0xfc00cd9c>
 400d238:	2984b03a 	or	r2,r5,r6
 400d23c:	10004226 	beq	r2,zero,400d348 <__subdf3+0x82c>
 400d240:	1808d0fa 	srli	r4,r3,3
 400d244:	8822d0fa 	srli	r17,r17,3
 400d248:	1806977a 	slli	r3,r3,29
 400d24c:	2080022c 	andhi	r2,r4,8
 400d250:	1c62b03a 	or	r17,r3,r17
 400d254:	10000826 	beq	r2,zero,400d278 <__subdf3+0x75c>
 400d258:	2812d0fa 	srli	r9,r5,3
 400d25c:	4880022c 	andhi	r2,r9,8
 400d260:	1000051e 	bne	r2,zero,400d278 <__subdf3+0x75c>
 400d264:	300cd0fa 	srli	r6,r6,3
 400d268:	2804977a 	slli	r2,r5,29
 400d26c:	4809883a 	mov	r4,r9
 400d270:	3825883a 	mov	r18,r7
 400d274:	11a2b03a 	or	r17,r2,r6
 400d278:	8806d77a 	srli	r3,r17,29
 400d27c:	200890fa 	slli	r4,r4,3
 400d280:	882290fa 	slli	r17,r17,3
 400d284:	0401ffc4 	movi	r16,2047
 400d288:	1906b03a 	or	r3,r3,r4
 400d28c:	003e4406 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d290:	2984b03a 	or	r2,r5,r6
 400d294:	103e4226 	beq	r2,zero,400cba0 <__alt_data_end+0xfc00cba0>
 400d298:	8989c83a 	sub	r4,r17,r6
 400d29c:	8911803a 	cmpltu	r8,r17,r4
 400d2a0:	1945c83a 	sub	r2,r3,r5
 400d2a4:	1205c83a 	sub	r2,r2,r8
 400d2a8:	1200202c 	andhi	r8,r2,128
 400d2ac:	403e9a26 	beq	r8,zero,400cd18 <__alt_data_end+0xfc00cd18>
 400d2b0:	3463c83a 	sub	r17,r6,r17
 400d2b4:	28c5c83a 	sub	r2,r5,r3
 400d2b8:	344d803a 	cmpltu	r6,r6,r17
 400d2bc:	1187c83a 	sub	r3,r2,r6
 400d2c0:	3825883a 	mov	r18,r7
 400d2c4:	003e3606 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d2c8:	0101ffc4 	movi	r4,2047
 400d2cc:	493fc71e 	bne	r9,r4,400d1ec <__alt_data_end+0xfc00d1ec>
 400d2d0:	2807883a 	mov	r3,r5
 400d2d4:	3023883a 	mov	r17,r6
 400d2d8:	4821883a 	mov	r16,r9
 400d2dc:	003e3006 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d2e0:	10003626 	beq	r2,zero,400d3bc <__subdf3+0x8a0>
 400d2e4:	2984b03a 	or	r2,r5,r6
 400d2e8:	10001726 	beq	r2,zero,400d348 <__subdf3+0x82c>
 400d2ec:	1808d0fa 	srli	r4,r3,3
 400d2f0:	8822d0fa 	srli	r17,r17,3
 400d2f4:	1806977a 	slli	r3,r3,29
 400d2f8:	2080022c 	andhi	r2,r4,8
 400d2fc:	1c62b03a 	or	r17,r3,r17
 400d300:	10000726 	beq	r2,zero,400d320 <__subdf3+0x804>
 400d304:	2812d0fa 	srli	r9,r5,3
 400d308:	4880022c 	andhi	r2,r9,8
 400d30c:	1000041e 	bne	r2,zero,400d320 <__subdf3+0x804>
 400d310:	300cd0fa 	srli	r6,r6,3
 400d314:	2804977a 	slli	r2,r5,29
 400d318:	4809883a 	mov	r4,r9
 400d31c:	11a2b03a 	or	r17,r2,r6
 400d320:	8806d77a 	srli	r3,r17,29
 400d324:	200890fa 	slli	r4,r4,3
 400d328:	882290fa 	slli	r17,r17,3
 400d32c:	3825883a 	mov	r18,r7
 400d330:	1906b03a 	or	r3,r3,r4
 400d334:	0401ffc4 	movi	r16,2047
 400d338:	003e1906 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d33c:	000b883a 	mov	r5,zero
 400d340:	0005883a 	mov	r2,zero
 400d344:	003e2e06 	br	400cc00 <__alt_data_end+0xfc00cc00>
 400d348:	0401ffc4 	movi	r16,2047
 400d34c:	003e1406 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d350:	0005883a 	mov	r2,zero
 400d354:	003f7506 	br	400d12c <__alt_data_end+0xfc00d12c>
 400d358:	0005883a 	mov	r2,zero
 400d35c:	0009883a 	mov	r4,zero
 400d360:	003e7806 	br	400cd44 <__alt_data_end+0xfc00cd44>
 400d364:	123ff804 	addi	r8,r2,-32
 400d368:	01000804 	movi	r4,32
 400d36c:	1a10d83a 	srl	r8,r3,r8
 400d370:	11002526 	beq	r2,r4,400d408 <__subdf3+0x8ec>
 400d374:	01001004 	movi	r4,64
 400d378:	2085c83a 	sub	r2,r4,r2
 400d37c:	1884983a 	sll	r2,r3,r2
 400d380:	1444b03a 	or	r2,r2,r17
 400d384:	1004c03a 	cmpne	r2,r2,zero
 400d388:	40a2b03a 	or	r17,r8,r2
 400d38c:	0005883a 	mov	r2,zero
 400d390:	003f1606 	br	400cfec <__alt_data_end+0xfc00cfec>
 400d394:	02000434 	movhi	r8,16
 400d398:	0009883a 	mov	r4,zero
 400d39c:	423fffc4 	addi	r8,r8,-1
 400d3a0:	00bfffc4 	movi	r2,-1
 400d3a4:	0401ffc4 	movi	r16,2047
 400d3a8:	003e6606 	br	400cd44 <__alt_data_end+0xfc00cd44>
 400d3ac:	1c62b03a 	or	r17,r3,r17
 400d3b0:	8822c03a 	cmpne	r17,r17,zero
 400d3b4:	0005883a 	mov	r2,zero
 400d3b8:	003f9906 	br	400d220 <__alt_data_end+0xfc00d220>
 400d3bc:	2807883a 	mov	r3,r5
 400d3c0:	3023883a 	mov	r17,r6
 400d3c4:	0401ffc4 	movi	r16,2047
 400d3c8:	003df506 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d3cc:	2807883a 	mov	r3,r5
 400d3d0:	3023883a 	mov	r17,r6
 400d3d4:	003df206 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d3d8:	123ff804 	addi	r8,r2,-32
 400d3dc:	01000804 	movi	r4,32
 400d3e0:	1a10d83a 	srl	r8,r3,r8
 400d3e4:	11000a26 	beq	r2,r4,400d410 <__subdf3+0x8f4>
 400d3e8:	01001004 	movi	r4,64
 400d3ec:	2085c83a 	sub	r2,r4,r2
 400d3f0:	1884983a 	sll	r2,r3,r2
 400d3f4:	1444b03a 	or	r2,r2,r17
 400d3f8:	1004c03a 	cmpne	r2,r2,zero
 400d3fc:	40a2b03a 	or	r17,r8,r2
 400d400:	0005883a 	mov	r2,zero
 400d404:	003f8606 	br	400d220 <__alt_data_end+0xfc00d220>
 400d408:	0005883a 	mov	r2,zero
 400d40c:	003fdc06 	br	400d380 <__alt_data_end+0xfc00d380>
 400d410:	0005883a 	mov	r2,zero
 400d414:	003ff706 	br	400d3f4 <__alt_data_end+0xfc00d3f4>

0400d418 <__fixdfsi>:
 400d418:	280cd53a 	srli	r6,r5,20
 400d41c:	00c00434 	movhi	r3,16
 400d420:	18ffffc4 	addi	r3,r3,-1
 400d424:	3181ffcc 	andi	r6,r6,2047
 400d428:	01c0ff84 	movi	r7,1022
 400d42c:	28c6703a 	and	r3,r5,r3
 400d430:	280ad7fa 	srli	r5,r5,31
 400d434:	3980120e 	bge	r7,r6,400d480 <__fixdfsi+0x68>
 400d438:	00810744 	movi	r2,1053
 400d43c:	11800c16 	blt	r2,r6,400d470 <__fixdfsi+0x58>
 400d440:	00810cc4 	movi	r2,1075
 400d444:	1185c83a 	sub	r2,r2,r6
 400d448:	01c007c4 	movi	r7,31
 400d44c:	18c00434 	orhi	r3,r3,16
 400d450:	38800d16 	blt	r7,r2,400d488 <__fixdfsi+0x70>
 400d454:	31befb44 	addi	r6,r6,-1043
 400d458:	2084d83a 	srl	r2,r4,r2
 400d45c:	1986983a 	sll	r3,r3,r6
 400d460:	1884b03a 	or	r2,r3,r2
 400d464:	28000726 	beq	r5,zero,400d484 <__fixdfsi+0x6c>
 400d468:	0085c83a 	sub	r2,zero,r2
 400d46c:	f800283a 	ret
 400d470:	00a00034 	movhi	r2,32768
 400d474:	10bfffc4 	addi	r2,r2,-1
 400d478:	2885883a 	add	r2,r5,r2
 400d47c:	f800283a 	ret
 400d480:	0005883a 	mov	r2,zero
 400d484:	f800283a 	ret
 400d488:	008104c4 	movi	r2,1043
 400d48c:	1185c83a 	sub	r2,r2,r6
 400d490:	1884d83a 	srl	r2,r3,r2
 400d494:	003ff306 	br	400d464 <__alt_data_end+0xfc00d464>

0400d498 <__floatsidf>:
 400d498:	defffd04 	addi	sp,sp,-12
 400d49c:	dfc00215 	stw	ra,8(sp)
 400d4a0:	dc400115 	stw	r17,4(sp)
 400d4a4:	dc000015 	stw	r16,0(sp)
 400d4a8:	20002b26 	beq	r4,zero,400d558 <__floatsidf+0xc0>
 400d4ac:	2023883a 	mov	r17,r4
 400d4b0:	2020d7fa 	srli	r16,r4,31
 400d4b4:	20002d16 	blt	r4,zero,400d56c <__floatsidf+0xd4>
 400d4b8:	8809883a 	mov	r4,r17
 400d4bc:	400d61c0 	call	400d61c <__clzsi2>
 400d4c0:	01410784 	movi	r5,1054
 400d4c4:	288bc83a 	sub	r5,r5,r2
 400d4c8:	01010cc4 	movi	r4,1075
 400d4cc:	2149c83a 	sub	r4,r4,r5
 400d4d0:	00c007c4 	movi	r3,31
 400d4d4:	1900160e 	bge	r3,r4,400d530 <__floatsidf+0x98>
 400d4d8:	00c104c4 	movi	r3,1043
 400d4dc:	1947c83a 	sub	r3,r3,r5
 400d4e0:	88c6983a 	sll	r3,r17,r3
 400d4e4:	00800434 	movhi	r2,16
 400d4e8:	10bfffc4 	addi	r2,r2,-1
 400d4ec:	1886703a 	and	r3,r3,r2
 400d4f0:	2941ffcc 	andi	r5,r5,2047
 400d4f4:	800d883a 	mov	r6,r16
 400d4f8:	0005883a 	mov	r2,zero
 400d4fc:	280a953a 	slli	r5,r5,20
 400d500:	31803fcc 	andi	r6,r6,255
 400d504:	01000434 	movhi	r4,16
 400d508:	300c97fa 	slli	r6,r6,31
 400d50c:	213fffc4 	addi	r4,r4,-1
 400d510:	1906703a 	and	r3,r3,r4
 400d514:	1946b03a 	or	r3,r3,r5
 400d518:	1986b03a 	or	r3,r3,r6
 400d51c:	dfc00217 	ldw	ra,8(sp)
 400d520:	dc400117 	ldw	r17,4(sp)
 400d524:	dc000017 	ldw	r16,0(sp)
 400d528:	dec00304 	addi	sp,sp,12
 400d52c:	f800283a 	ret
 400d530:	00c002c4 	movi	r3,11
 400d534:	1887c83a 	sub	r3,r3,r2
 400d538:	88c6d83a 	srl	r3,r17,r3
 400d53c:	8904983a 	sll	r2,r17,r4
 400d540:	01000434 	movhi	r4,16
 400d544:	213fffc4 	addi	r4,r4,-1
 400d548:	2941ffcc 	andi	r5,r5,2047
 400d54c:	1906703a 	and	r3,r3,r4
 400d550:	800d883a 	mov	r6,r16
 400d554:	003fe906 	br	400d4fc <__alt_data_end+0xfc00d4fc>
 400d558:	000d883a 	mov	r6,zero
 400d55c:	000b883a 	mov	r5,zero
 400d560:	0007883a 	mov	r3,zero
 400d564:	0005883a 	mov	r2,zero
 400d568:	003fe406 	br	400d4fc <__alt_data_end+0xfc00d4fc>
 400d56c:	0123c83a 	sub	r17,zero,r4
 400d570:	003fd106 	br	400d4b8 <__alt_data_end+0xfc00d4b8>

0400d574 <__floatunsidf>:
 400d574:	defffe04 	addi	sp,sp,-8
 400d578:	dc000015 	stw	r16,0(sp)
 400d57c:	dfc00115 	stw	ra,4(sp)
 400d580:	2021883a 	mov	r16,r4
 400d584:	20002226 	beq	r4,zero,400d610 <__floatunsidf+0x9c>
 400d588:	400d61c0 	call	400d61c <__clzsi2>
 400d58c:	01010784 	movi	r4,1054
 400d590:	2089c83a 	sub	r4,r4,r2
 400d594:	01810cc4 	movi	r6,1075
 400d598:	310dc83a 	sub	r6,r6,r4
 400d59c:	00c007c4 	movi	r3,31
 400d5a0:	1980120e 	bge	r3,r6,400d5ec <__floatunsidf+0x78>
 400d5a4:	00c104c4 	movi	r3,1043
 400d5a8:	1907c83a 	sub	r3,r3,r4
 400d5ac:	80ca983a 	sll	r5,r16,r3
 400d5b0:	00800434 	movhi	r2,16
 400d5b4:	10bfffc4 	addi	r2,r2,-1
 400d5b8:	2101ffcc 	andi	r4,r4,2047
 400d5bc:	0021883a 	mov	r16,zero
 400d5c0:	288a703a 	and	r5,r5,r2
 400d5c4:	2008953a 	slli	r4,r4,20
 400d5c8:	00c00434 	movhi	r3,16
 400d5cc:	18ffffc4 	addi	r3,r3,-1
 400d5d0:	28c6703a 	and	r3,r5,r3
 400d5d4:	8005883a 	mov	r2,r16
 400d5d8:	1906b03a 	or	r3,r3,r4
 400d5dc:	dfc00117 	ldw	ra,4(sp)
 400d5e0:	dc000017 	ldw	r16,0(sp)
 400d5e4:	dec00204 	addi	sp,sp,8
 400d5e8:	f800283a 	ret
 400d5ec:	00c002c4 	movi	r3,11
 400d5f0:	188bc83a 	sub	r5,r3,r2
 400d5f4:	814ad83a 	srl	r5,r16,r5
 400d5f8:	00c00434 	movhi	r3,16
 400d5fc:	18ffffc4 	addi	r3,r3,-1
 400d600:	81a0983a 	sll	r16,r16,r6
 400d604:	2101ffcc 	andi	r4,r4,2047
 400d608:	28ca703a 	and	r5,r5,r3
 400d60c:	003fed06 	br	400d5c4 <__alt_data_end+0xfc00d5c4>
 400d610:	0009883a 	mov	r4,zero
 400d614:	000b883a 	mov	r5,zero
 400d618:	003fea06 	br	400d5c4 <__alt_data_end+0xfc00d5c4>

0400d61c <__clzsi2>:
 400d61c:	00bfffd4 	movui	r2,65535
 400d620:	11000536 	bltu	r2,r4,400d638 <__clzsi2+0x1c>
 400d624:	00803fc4 	movi	r2,255
 400d628:	11000f36 	bltu	r2,r4,400d668 <__clzsi2+0x4c>
 400d62c:	00800804 	movi	r2,32
 400d630:	0007883a 	mov	r3,zero
 400d634:	00000506 	br	400d64c <__clzsi2+0x30>
 400d638:	00804034 	movhi	r2,256
 400d63c:	10bfffc4 	addi	r2,r2,-1
 400d640:	11000c2e 	bgeu	r2,r4,400d674 <__clzsi2+0x58>
 400d644:	00800204 	movi	r2,8
 400d648:	00c00604 	movi	r3,24
 400d64c:	20c8d83a 	srl	r4,r4,r3
 400d650:	00c10074 	movhi	r3,1025
 400d654:	18c1bd04 	addi	r3,r3,1780
 400d658:	1909883a 	add	r4,r3,r4
 400d65c:	20c00003 	ldbu	r3,0(r4)
 400d660:	10c5c83a 	sub	r2,r2,r3
 400d664:	f800283a 	ret
 400d668:	00800604 	movi	r2,24
 400d66c:	00c00204 	movi	r3,8
 400d670:	003ff606 	br	400d64c <__alt_data_end+0xfc00d64c>
 400d674:	00800404 	movi	r2,16
 400d678:	1007883a 	mov	r3,r2
 400d67c:	003ff306 	br	400d64c <__alt_data_end+0xfc00d64c>

0400d680 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d680:	defffe04 	addi	sp,sp,-8
 400d684:	dfc00115 	stw	ra,4(sp)
 400d688:	df000015 	stw	fp,0(sp)
 400d68c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d690:	d0a00c17 	ldw	r2,-32720(gp)
 400d694:	10000326 	beq	r2,zero,400d6a4 <alt_get_errno+0x24>
 400d698:	d0a00c17 	ldw	r2,-32720(gp)
 400d69c:	103ee83a 	callr	r2
 400d6a0:	00000106 	br	400d6a8 <alt_get_errno+0x28>
 400d6a4:	d0a6df04 	addi	r2,gp,-25732
}
 400d6a8:	e037883a 	mov	sp,fp
 400d6ac:	dfc00117 	ldw	ra,4(sp)
 400d6b0:	df000017 	ldw	fp,0(sp)
 400d6b4:	dec00204 	addi	sp,sp,8
 400d6b8:	f800283a 	ret

0400d6bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400d6bc:	defffb04 	addi	sp,sp,-20
 400d6c0:	dfc00415 	stw	ra,16(sp)
 400d6c4:	df000315 	stw	fp,12(sp)
 400d6c8:	df000304 	addi	fp,sp,12
 400d6cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400d6d0:	e0bfff17 	ldw	r2,-4(fp)
 400d6d4:	10000616 	blt	r2,zero,400d6f0 <close+0x34>
 400d6d8:	e0bfff17 	ldw	r2,-4(fp)
 400d6dc:	10c00324 	muli	r3,r2,12
 400d6e0:	00810074 	movhi	r2,1025
 400d6e4:	10844104 	addi	r2,r2,4356
 400d6e8:	1885883a 	add	r2,r3,r2
 400d6ec:	00000106 	br	400d6f4 <close+0x38>
 400d6f0:	0005883a 	mov	r2,zero
 400d6f4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400d6f8:	e0bffd17 	ldw	r2,-12(fp)
 400d6fc:	10001926 	beq	r2,zero,400d764 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400d700:	e0bffd17 	ldw	r2,-12(fp)
 400d704:	10800017 	ldw	r2,0(r2)
 400d708:	10800417 	ldw	r2,16(r2)
 400d70c:	10000626 	beq	r2,zero,400d728 <close+0x6c>
 400d710:	e0bffd17 	ldw	r2,-12(fp)
 400d714:	10800017 	ldw	r2,0(r2)
 400d718:	10800417 	ldw	r2,16(r2)
 400d71c:	e13ffd17 	ldw	r4,-12(fp)
 400d720:	103ee83a 	callr	r2
 400d724:	00000106 	br	400d72c <close+0x70>
 400d728:	0005883a 	mov	r2,zero
 400d72c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400d730:	e13fff17 	ldw	r4,-4(fp)
 400d734:	400dfd00 	call	400dfd0 <alt_release_fd>
    if (rval < 0)
 400d738:	e0bffe17 	ldw	r2,-8(fp)
 400d73c:	1000070e 	bge	r2,zero,400d75c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 400d740:	400d6800 	call	400d680 <alt_get_errno>
 400d744:	1007883a 	mov	r3,r2
 400d748:	e0bffe17 	ldw	r2,-8(fp)
 400d74c:	0085c83a 	sub	r2,zero,r2
 400d750:	18800015 	stw	r2,0(r3)
      return -1;
 400d754:	00bfffc4 	movi	r2,-1
 400d758:	00000706 	br	400d778 <close+0xbc>
    }
    return 0;
 400d75c:	0005883a 	mov	r2,zero
 400d760:	00000506 	br	400d778 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d764:	400d6800 	call	400d680 <alt_get_errno>
 400d768:	1007883a 	mov	r3,r2
 400d76c:	00801444 	movi	r2,81
 400d770:	18800015 	stw	r2,0(r3)
    return -1;
 400d774:	00bfffc4 	movi	r2,-1
  }
}
 400d778:	e037883a 	mov	sp,fp
 400d77c:	dfc00117 	ldw	ra,4(sp)
 400d780:	df000017 	ldw	fp,0(sp)
 400d784:	dec00204 	addi	sp,sp,8
 400d788:	f800283a 	ret

0400d78c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400d78c:	defffc04 	addi	sp,sp,-16
 400d790:	df000315 	stw	fp,12(sp)
 400d794:	df000304 	addi	fp,sp,12
 400d798:	e13ffd15 	stw	r4,-12(fp)
 400d79c:	e17ffe15 	stw	r5,-8(fp)
 400d7a0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400d7a4:	e0bfff17 	ldw	r2,-4(fp)
}
 400d7a8:	e037883a 	mov	sp,fp
 400d7ac:	df000017 	ldw	fp,0(sp)
 400d7b0:	dec00104 	addi	sp,sp,4
 400d7b4:	f800283a 	ret

0400d7b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d7b8:	defffe04 	addi	sp,sp,-8
 400d7bc:	dfc00115 	stw	ra,4(sp)
 400d7c0:	df000015 	stw	fp,0(sp)
 400d7c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d7c8:	d0a00c17 	ldw	r2,-32720(gp)
 400d7cc:	10000326 	beq	r2,zero,400d7dc <alt_get_errno+0x24>
 400d7d0:	d0a00c17 	ldw	r2,-32720(gp)
 400d7d4:	103ee83a 	callr	r2
 400d7d8:	00000106 	br	400d7e0 <alt_get_errno+0x28>
 400d7dc:	d0a6df04 	addi	r2,gp,-25732
}
 400d7e0:	e037883a 	mov	sp,fp
 400d7e4:	dfc00117 	ldw	ra,4(sp)
 400d7e8:	df000017 	ldw	fp,0(sp)
 400d7ec:	dec00204 	addi	sp,sp,8
 400d7f0:	f800283a 	ret

0400d7f4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400d7f4:	defffb04 	addi	sp,sp,-20
 400d7f8:	dfc00415 	stw	ra,16(sp)
 400d7fc:	df000315 	stw	fp,12(sp)
 400d800:	df000304 	addi	fp,sp,12
 400d804:	e13ffe15 	stw	r4,-8(fp)
 400d808:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d80c:	e0bffe17 	ldw	r2,-8(fp)
 400d810:	10000616 	blt	r2,zero,400d82c <fstat+0x38>
 400d814:	e0bffe17 	ldw	r2,-8(fp)
 400d818:	10c00324 	muli	r3,r2,12
 400d81c:	00810074 	movhi	r2,1025
 400d820:	10844104 	addi	r2,r2,4356
 400d824:	1885883a 	add	r2,r3,r2
 400d828:	00000106 	br	400d830 <fstat+0x3c>
 400d82c:	0005883a 	mov	r2,zero
 400d830:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400d834:	e0bffd17 	ldw	r2,-12(fp)
 400d838:	10001026 	beq	r2,zero,400d87c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400d83c:	e0bffd17 	ldw	r2,-12(fp)
 400d840:	10800017 	ldw	r2,0(r2)
 400d844:	10800817 	ldw	r2,32(r2)
 400d848:	10000726 	beq	r2,zero,400d868 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 400d84c:	e0bffd17 	ldw	r2,-12(fp)
 400d850:	10800017 	ldw	r2,0(r2)
 400d854:	10800817 	ldw	r2,32(r2)
 400d858:	e17fff17 	ldw	r5,-4(fp)
 400d85c:	e13ffd17 	ldw	r4,-12(fp)
 400d860:	103ee83a 	callr	r2
 400d864:	00000a06 	br	400d890 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400d868:	e0bfff17 	ldw	r2,-4(fp)
 400d86c:	00c80004 	movi	r3,8192
 400d870:	10c00115 	stw	r3,4(r2)
      return 0;
 400d874:	0005883a 	mov	r2,zero
 400d878:	00000506 	br	400d890 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d87c:	400d7b80 	call	400d7b8 <alt_get_errno>
 400d880:	1007883a 	mov	r3,r2
 400d884:	00801444 	movi	r2,81
 400d888:	18800015 	stw	r2,0(r3)
    return -1;
 400d88c:	00bfffc4 	movi	r2,-1
  }
}
 400d890:	e037883a 	mov	sp,fp
 400d894:	dfc00117 	ldw	ra,4(sp)
 400d898:	df000017 	ldw	fp,0(sp)
 400d89c:	dec00204 	addi	sp,sp,8
 400d8a0:	f800283a 	ret

0400d8a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d8a4:	defffe04 	addi	sp,sp,-8
 400d8a8:	dfc00115 	stw	ra,4(sp)
 400d8ac:	df000015 	stw	fp,0(sp)
 400d8b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d8b4:	d0a00c17 	ldw	r2,-32720(gp)
 400d8b8:	10000326 	beq	r2,zero,400d8c8 <alt_get_errno+0x24>
 400d8bc:	d0a00c17 	ldw	r2,-32720(gp)
 400d8c0:	103ee83a 	callr	r2
 400d8c4:	00000106 	br	400d8cc <alt_get_errno+0x28>
 400d8c8:	d0a6df04 	addi	r2,gp,-25732
}
 400d8cc:	e037883a 	mov	sp,fp
 400d8d0:	dfc00117 	ldw	ra,4(sp)
 400d8d4:	df000017 	ldw	fp,0(sp)
 400d8d8:	dec00204 	addi	sp,sp,8
 400d8dc:	f800283a 	ret

0400d8e0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400d8e0:	deffed04 	addi	sp,sp,-76
 400d8e4:	dfc01215 	stw	ra,72(sp)
 400d8e8:	df001115 	stw	fp,68(sp)
 400d8ec:	df001104 	addi	fp,sp,68
 400d8f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d8f4:	e0bfff17 	ldw	r2,-4(fp)
 400d8f8:	10000616 	blt	r2,zero,400d914 <isatty+0x34>
 400d8fc:	e0bfff17 	ldw	r2,-4(fp)
 400d900:	10c00324 	muli	r3,r2,12
 400d904:	00810074 	movhi	r2,1025
 400d908:	10844104 	addi	r2,r2,4356
 400d90c:	1885883a 	add	r2,r3,r2
 400d910:	00000106 	br	400d918 <isatty+0x38>
 400d914:	0005883a 	mov	r2,zero
 400d918:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400d91c:	e0bfef17 	ldw	r2,-68(fp)
 400d920:	10000e26 	beq	r2,zero,400d95c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400d924:	e0bfef17 	ldw	r2,-68(fp)
 400d928:	10800017 	ldw	r2,0(r2)
 400d92c:	10800817 	ldw	r2,32(r2)
 400d930:	1000021e 	bne	r2,zero,400d93c <isatty+0x5c>
    {
      return 1;
 400d934:	00800044 	movi	r2,1
 400d938:	00000d06 	br	400d970 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400d93c:	e0bff004 	addi	r2,fp,-64
 400d940:	100b883a 	mov	r5,r2
 400d944:	e13fff17 	ldw	r4,-4(fp)
 400d948:	400d7f40 	call	400d7f4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400d94c:	e0bff117 	ldw	r2,-60(fp)
 400d950:	10880020 	cmpeqi	r2,r2,8192
 400d954:	10803fcc 	andi	r2,r2,255
 400d958:	00000506 	br	400d970 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d95c:	400d8a40 	call	400d8a4 <alt_get_errno>
 400d960:	1007883a 	mov	r3,r2
 400d964:	00801444 	movi	r2,81
 400d968:	18800015 	stw	r2,0(r3)
    return 0;
 400d96c:	0005883a 	mov	r2,zero
  }
}
 400d970:	e037883a 	mov	sp,fp
 400d974:	dfc00117 	ldw	ra,4(sp)
 400d978:	df000017 	ldw	fp,0(sp)
 400d97c:	dec00204 	addi	sp,sp,8
 400d980:	f800283a 	ret

0400d984 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400d984:	defffc04 	addi	sp,sp,-16
 400d988:	df000315 	stw	fp,12(sp)
 400d98c:	df000304 	addi	fp,sp,12
 400d990:	e13ffd15 	stw	r4,-12(fp)
 400d994:	e17ffe15 	stw	r5,-8(fp)
 400d998:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400d99c:	e0fffe17 	ldw	r3,-8(fp)
 400d9a0:	e0bffd17 	ldw	r2,-12(fp)
 400d9a4:	18800c26 	beq	r3,r2,400d9d8 <alt_load_section+0x54>
  {
    while( to != end )
 400d9a8:	00000806 	br	400d9cc <alt_load_section+0x48>
    {
      *to++ = *from++;
 400d9ac:	e0bffe17 	ldw	r2,-8(fp)
 400d9b0:	10c00104 	addi	r3,r2,4
 400d9b4:	e0fffe15 	stw	r3,-8(fp)
 400d9b8:	e0fffd17 	ldw	r3,-12(fp)
 400d9bc:	19000104 	addi	r4,r3,4
 400d9c0:	e13ffd15 	stw	r4,-12(fp)
 400d9c4:	18c00017 	ldw	r3,0(r3)
 400d9c8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400d9cc:	e0fffe17 	ldw	r3,-8(fp)
 400d9d0:	e0bfff17 	ldw	r2,-4(fp)
 400d9d4:	18bff51e 	bne	r3,r2,400d9ac <__alt_data_end+0xfc00d9ac>
    {
      *to++ = *from++;
    }
  }
}
 400d9d8:	0001883a 	nop
 400d9dc:	e037883a 	mov	sp,fp
 400d9e0:	df000017 	ldw	fp,0(sp)
 400d9e4:	dec00104 	addi	sp,sp,4
 400d9e8:	f800283a 	ret

0400d9ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400d9ec:	defffe04 	addi	sp,sp,-8
 400d9f0:	dfc00115 	stw	ra,4(sp)
 400d9f4:	df000015 	stw	fp,0(sp)
 400d9f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400d9fc:	01810074 	movhi	r6,1025
 400da00:	3188d504 	addi	r6,r6,9044
 400da04:	01410074 	movhi	r5,1025
 400da08:	29420e04 	addi	r5,r5,2104
 400da0c:	01010074 	movhi	r4,1025
 400da10:	2108d504 	addi	r4,r4,9044
 400da14:	400d9840 	call	400d984 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400da18:	01810034 	movhi	r6,1024
 400da1c:	31809204 	addi	r6,r6,584
 400da20:	01410034 	movhi	r5,1024
 400da24:	29400804 	addi	r5,r5,32
 400da28:	01010034 	movhi	r4,1024
 400da2c:	21000804 	addi	r4,r4,32
 400da30:	400d9840 	call	400d984 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400da34:	01810074 	movhi	r6,1025
 400da38:	31820e04 	addi	r6,r6,2104
 400da3c:	01410074 	movhi	r5,1025
 400da40:	29409204 	addi	r5,r5,584
 400da44:	01010074 	movhi	r4,1025
 400da48:	21009204 	addi	r4,r4,584
 400da4c:	400d9840 	call	400d984 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400da50:	400f4200 	call	400f420 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400da54:	400f81c0 	call	400f81c <alt_icache_flush_all>
}
 400da58:	0001883a 	nop
 400da5c:	e037883a 	mov	sp,fp
 400da60:	dfc00117 	ldw	ra,4(sp)
 400da64:	df000017 	ldw	fp,0(sp)
 400da68:	dec00204 	addi	sp,sp,8
 400da6c:	f800283a 	ret

0400da70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400da70:	defffe04 	addi	sp,sp,-8
 400da74:	dfc00115 	stw	ra,4(sp)
 400da78:	df000015 	stw	fp,0(sp)
 400da7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400da80:	d0a00c17 	ldw	r2,-32720(gp)
 400da84:	10000326 	beq	r2,zero,400da94 <alt_get_errno+0x24>
 400da88:	d0a00c17 	ldw	r2,-32720(gp)
 400da8c:	103ee83a 	callr	r2
 400da90:	00000106 	br	400da98 <alt_get_errno+0x28>
 400da94:	d0a6df04 	addi	r2,gp,-25732
}
 400da98:	e037883a 	mov	sp,fp
 400da9c:	dfc00117 	ldw	ra,4(sp)
 400daa0:	df000017 	ldw	fp,0(sp)
 400daa4:	dec00204 	addi	sp,sp,8
 400daa8:	f800283a 	ret

0400daac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400daac:	defff904 	addi	sp,sp,-28
 400dab0:	dfc00615 	stw	ra,24(sp)
 400dab4:	df000515 	stw	fp,20(sp)
 400dab8:	df000504 	addi	fp,sp,20
 400dabc:	e13ffd15 	stw	r4,-12(fp)
 400dac0:	e17ffe15 	stw	r5,-8(fp)
 400dac4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400dac8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400dacc:	e0bffd17 	ldw	r2,-12(fp)
 400dad0:	10000616 	blt	r2,zero,400daec <lseek+0x40>
 400dad4:	e0bffd17 	ldw	r2,-12(fp)
 400dad8:	10c00324 	muli	r3,r2,12
 400dadc:	00810074 	movhi	r2,1025
 400dae0:	10844104 	addi	r2,r2,4356
 400dae4:	1885883a 	add	r2,r3,r2
 400dae8:	00000106 	br	400daf0 <lseek+0x44>
 400daec:	0005883a 	mov	r2,zero
 400daf0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400daf4:	e0bffc17 	ldw	r2,-16(fp)
 400daf8:	10001026 	beq	r2,zero,400db3c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400dafc:	e0bffc17 	ldw	r2,-16(fp)
 400db00:	10800017 	ldw	r2,0(r2)
 400db04:	10800717 	ldw	r2,28(r2)
 400db08:	10000926 	beq	r2,zero,400db30 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400db0c:	e0bffc17 	ldw	r2,-16(fp)
 400db10:	10800017 	ldw	r2,0(r2)
 400db14:	10800717 	ldw	r2,28(r2)
 400db18:	e1bfff17 	ldw	r6,-4(fp)
 400db1c:	e17ffe17 	ldw	r5,-8(fp)
 400db20:	e13ffc17 	ldw	r4,-16(fp)
 400db24:	103ee83a 	callr	r2
 400db28:	e0bffb15 	stw	r2,-20(fp)
 400db2c:	00000506 	br	400db44 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400db30:	00bfde84 	movi	r2,-134
 400db34:	e0bffb15 	stw	r2,-20(fp)
 400db38:	00000206 	br	400db44 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 400db3c:	00bfebc4 	movi	r2,-81
 400db40:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400db44:	e0bffb17 	ldw	r2,-20(fp)
 400db48:	1000070e 	bge	r2,zero,400db68 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 400db4c:	400da700 	call	400da70 <alt_get_errno>
 400db50:	1007883a 	mov	r3,r2
 400db54:	e0bffb17 	ldw	r2,-20(fp)
 400db58:	0085c83a 	sub	r2,zero,r2
 400db5c:	18800015 	stw	r2,0(r3)
    rc = -1;
 400db60:	00bfffc4 	movi	r2,-1
 400db64:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400db68:	e0bffb17 	ldw	r2,-20(fp)
}
 400db6c:	e037883a 	mov	sp,fp
 400db70:	dfc00117 	ldw	ra,4(sp)
 400db74:	df000017 	ldw	fp,0(sp)
 400db78:	dec00204 	addi	sp,sp,8
 400db7c:	f800283a 	ret

0400db80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400db80:	defffd04 	addi	sp,sp,-12
 400db84:	dfc00215 	stw	ra,8(sp)
 400db88:	df000115 	stw	fp,4(sp)
 400db8c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400db90:	0009883a 	mov	r4,zero
 400db94:	400e2a40 	call	400e2a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400db98:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400db9c:	400e2dc0 	call	400e2dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400dba0:	01810074 	movhi	r6,1025
 400dba4:	31820004 	addi	r6,r6,2048
 400dba8:	01410074 	movhi	r5,1025
 400dbac:	29420004 	addi	r5,r5,2048
 400dbb0:	01010074 	movhi	r4,1025
 400dbb4:	21020004 	addi	r4,r4,2048
 400dbb8:	400f9140 	call	400f914 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400dbbc:	400f5200 	call	400f520 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400dbc0:	01010074 	movhi	r4,1025
 400dbc4:	213d6004 	addi	r4,r4,-2688
 400dbc8:	400feb40 	call	400feb4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400dbcc:	d0a6e317 	ldw	r2,-25716(gp)
 400dbd0:	d0e6e417 	ldw	r3,-25712(gp)
 400dbd4:	d126e517 	ldw	r4,-25708(gp)
 400dbd8:	200d883a 	mov	r6,r4
 400dbdc:	180b883a 	mov	r5,r3
 400dbe0:	1009883a 	mov	r4,r2
 400dbe4:	40009f00 	call	40009f0 <main>
 400dbe8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400dbec:	01000044 	movi	r4,1
 400dbf0:	400d6bc0 	call	400d6bc <close>
  exit (result);
 400dbf4:	e13fff17 	ldw	r4,-4(fp)
 400dbf8:	400fec80 	call	400fec8 <exit>

0400dbfc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400dbfc:	defffe04 	addi	sp,sp,-8
 400dc00:	df000115 	stw	fp,4(sp)
 400dc04:	df000104 	addi	fp,sp,4
 400dc08:	e13fff15 	stw	r4,-4(fp)
}
 400dc0c:	0001883a 	nop
 400dc10:	e037883a 	mov	sp,fp
 400dc14:	df000017 	ldw	fp,0(sp)
 400dc18:	dec00104 	addi	sp,sp,4
 400dc1c:	f800283a 	ret

0400dc20 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400dc20:	defffe04 	addi	sp,sp,-8
 400dc24:	df000115 	stw	fp,4(sp)
 400dc28:	df000104 	addi	fp,sp,4
 400dc2c:	e13fff15 	stw	r4,-4(fp)
}
 400dc30:	0001883a 	nop
 400dc34:	e037883a 	mov	sp,fp
 400dc38:	df000017 	ldw	fp,0(sp)
 400dc3c:	dec00104 	addi	sp,sp,4
 400dc40:	f800283a 	ret

0400dc44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400dc44:	defffe04 	addi	sp,sp,-8
 400dc48:	dfc00115 	stw	ra,4(sp)
 400dc4c:	df000015 	stw	fp,0(sp)
 400dc50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400dc54:	d0a00c17 	ldw	r2,-32720(gp)
 400dc58:	10000326 	beq	r2,zero,400dc68 <alt_get_errno+0x24>
 400dc5c:	d0a00c17 	ldw	r2,-32720(gp)
 400dc60:	103ee83a 	callr	r2
 400dc64:	00000106 	br	400dc6c <alt_get_errno+0x28>
 400dc68:	d0a6df04 	addi	r2,gp,-25732
}
 400dc6c:	e037883a 	mov	sp,fp
 400dc70:	dfc00117 	ldw	ra,4(sp)
 400dc74:	df000017 	ldw	fp,0(sp)
 400dc78:	dec00204 	addi	sp,sp,8
 400dc7c:	f800283a 	ret

0400dc80 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400dc80:	defffd04 	addi	sp,sp,-12
 400dc84:	df000215 	stw	fp,8(sp)
 400dc88:	df000204 	addi	fp,sp,8
 400dc8c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400dc90:	e0bfff17 	ldw	r2,-4(fp)
 400dc94:	10800217 	ldw	r2,8(r2)
 400dc98:	10d00034 	orhi	r3,r2,16384
 400dc9c:	e0bfff17 	ldw	r2,-4(fp)
 400dca0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400dca4:	e03ffe15 	stw	zero,-8(fp)
 400dca8:	00001d06 	br	400dd20 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400dcac:	00810074 	movhi	r2,1025
 400dcb0:	10844104 	addi	r2,r2,4356
 400dcb4:	e0fffe17 	ldw	r3,-8(fp)
 400dcb8:	18c00324 	muli	r3,r3,12
 400dcbc:	10c5883a 	add	r2,r2,r3
 400dcc0:	10c00017 	ldw	r3,0(r2)
 400dcc4:	e0bfff17 	ldw	r2,-4(fp)
 400dcc8:	10800017 	ldw	r2,0(r2)
 400dccc:	1880111e 	bne	r3,r2,400dd14 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400dcd0:	00810074 	movhi	r2,1025
 400dcd4:	10844104 	addi	r2,r2,4356
 400dcd8:	e0fffe17 	ldw	r3,-8(fp)
 400dcdc:	18c00324 	muli	r3,r3,12
 400dce0:	10c5883a 	add	r2,r2,r3
 400dce4:	10800204 	addi	r2,r2,8
 400dce8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400dcec:	1000090e 	bge	r2,zero,400dd14 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400dcf0:	e0bffe17 	ldw	r2,-8(fp)
 400dcf4:	10c00324 	muli	r3,r2,12
 400dcf8:	00810074 	movhi	r2,1025
 400dcfc:	10844104 	addi	r2,r2,4356
 400dd00:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400dd04:	e0bfff17 	ldw	r2,-4(fp)
 400dd08:	18800226 	beq	r3,r2,400dd14 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400dd0c:	00bffcc4 	movi	r2,-13
 400dd10:	00000806 	br	400dd34 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400dd14:	e0bffe17 	ldw	r2,-8(fp)
 400dd18:	10800044 	addi	r2,r2,1
 400dd1c:	e0bffe15 	stw	r2,-8(fp)
 400dd20:	d0a00b17 	ldw	r2,-32724(gp)
 400dd24:	1007883a 	mov	r3,r2
 400dd28:	e0bffe17 	ldw	r2,-8(fp)
 400dd2c:	18bfdf2e 	bgeu	r3,r2,400dcac <__alt_data_end+0xfc00dcac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400dd30:	0005883a 	mov	r2,zero
}
 400dd34:	e037883a 	mov	sp,fp
 400dd38:	df000017 	ldw	fp,0(sp)
 400dd3c:	dec00104 	addi	sp,sp,4
 400dd40:	f800283a 	ret

0400dd44 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400dd44:	defff604 	addi	sp,sp,-40
 400dd48:	dfc00915 	stw	ra,36(sp)
 400dd4c:	df000815 	stw	fp,32(sp)
 400dd50:	df000804 	addi	fp,sp,32
 400dd54:	e13ffd15 	stw	r4,-12(fp)
 400dd58:	e17ffe15 	stw	r5,-8(fp)
 400dd5c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400dd60:	00bfffc4 	movi	r2,-1
 400dd64:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400dd68:	00bffb44 	movi	r2,-19
 400dd6c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400dd70:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400dd74:	d1600904 	addi	r5,gp,-32732
 400dd78:	e13ffd17 	ldw	r4,-12(fp)
 400dd7c:	400f5e00 	call	400f5e0 <alt_find_dev>
 400dd80:	e0bff815 	stw	r2,-32(fp)
 400dd84:	e0bff817 	ldw	r2,-32(fp)
 400dd88:	1000051e 	bne	r2,zero,400dda0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400dd8c:	e13ffd17 	ldw	r4,-12(fp)
 400dd90:	400f6700 	call	400f670 <alt_find_file>
 400dd94:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400dd98:	00800044 	movi	r2,1
 400dd9c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400dda0:	e0bff817 	ldw	r2,-32(fp)
 400dda4:	10002926 	beq	r2,zero,400de4c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400dda8:	e13ff817 	ldw	r4,-32(fp)
 400ddac:	400f7780 	call	400f778 <alt_get_fd>
 400ddb0:	e0bff915 	stw	r2,-28(fp)
 400ddb4:	e0bff917 	ldw	r2,-28(fp)
 400ddb8:	1000030e 	bge	r2,zero,400ddc8 <open+0x84>
    {
      status = index;
 400ddbc:	e0bff917 	ldw	r2,-28(fp)
 400ddc0:	e0bffa15 	stw	r2,-24(fp)
 400ddc4:	00002306 	br	400de54 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 400ddc8:	e0bff917 	ldw	r2,-28(fp)
 400ddcc:	10c00324 	muli	r3,r2,12
 400ddd0:	00810074 	movhi	r2,1025
 400ddd4:	10844104 	addi	r2,r2,4356
 400ddd8:	1885883a 	add	r2,r3,r2
 400dddc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400dde0:	e0fffe17 	ldw	r3,-8(fp)
 400dde4:	00900034 	movhi	r2,16384
 400dde8:	10bfffc4 	addi	r2,r2,-1
 400ddec:	1886703a 	and	r3,r3,r2
 400ddf0:	e0bffc17 	ldw	r2,-16(fp)
 400ddf4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400ddf8:	e0bffb17 	ldw	r2,-20(fp)
 400ddfc:	1000051e 	bne	r2,zero,400de14 <open+0xd0>
 400de00:	e13ffc17 	ldw	r4,-16(fp)
 400de04:	400dc800 	call	400dc80 <alt_file_locked>
 400de08:	e0bffa15 	stw	r2,-24(fp)
 400de0c:	e0bffa17 	ldw	r2,-24(fp)
 400de10:	10001016 	blt	r2,zero,400de54 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400de14:	e0bff817 	ldw	r2,-32(fp)
 400de18:	10800317 	ldw	r2,12(r2)
 400de1c:	10000826 	beq	r2,zero,400de40 <open+0xfc>
 400de20:	e0bff817 	ldw	r2,-32(fp)
 400de24:	10800317 	ldw	r2,12(r2)
 400de28:	e1ffff17 	ldw	r7,-4(fp)
 400de2c:	e1bffe17 	ldw	r6,-8(fp)
 400de30:	e17ffd17 	ldw	r5,-12(fp)
 400de34:	e13ffc17 	ldw	r4,-16(fp)
 400de38:	103ee83a 	callr	r2
 400de3c:	00000106 	br	400de44 <open+0x100>
 400de40:	0005883a 	mov	r2,zero
 400de44:	e0bffa15 	stw	r2,-24(fp)
 400de48:	00000206 	br	400de54 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400de4c:	00bffb44 	movi	r2,-19
 400de50:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400de54:	e0bffa17 	ldw	r2,-24(fp)
 400de58:	1000090e 	bge	r2,zero,400de80 <open+0x13c>
  {
    alt_release_fd (index);  
 400de5c:	e13ff917 	ldw	r4,-28(fp)
 400de60:	400dfd00 	call	400dfd0 <alt_release_fd>
    ALT_ERRNO = -status;
 400de64:	400dc440 	call	400dc44 <alt_get_errno>
 400de68:	1007883a 	mov	r3,r2
 400de6c:	e0bffa17 	ldw	r2,-24(fp)
 400de70:	0085c83a 	sub	r2,zero,r2
 400de74:	18800015 	stw	r2,0(r3)
    return -1;
 400de78:	00bfffc4 	movi	r2,-1
 400de7c:	00000106 	br	400de84 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 400de80:	e0bff917 	ldw	r2,-28(fp)
}
 400de84:	e037883a 	mov	sp,fp
 400de88:	dfc00117 	ldw	ra,4(sp)
 400de8c:	df000017 	ldw	fp,0(sp)
 400de90:	dec00204 	addi	sp,sp,8
 400de94:	f800283a 	ret

0400de98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400de98:	defffe04 	addi	sp,sp,-8
 400de9c:	dfc00115 	stw	ra,4(sp)
 400dea0:	df000015 	stw	fp,0(sp)
 400dea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400dea8:	d0a00c17 	ldw	r2,-32720(gp)
 400deac:	10000326 	beq	r2,zero,400debc <alt_get_errno+0x24>
 400deb0:	d0a00c17 	ldw	r2,-32720(gp)
 400deb4:	103ee83a 	callr	r2
 400deb8:	00000106 	br	400dec0 <alt_get_errno+0x28>
 400debc:	d0a6df04 	addi	r2,gp,-25732
}
 400dec0:	e037883a 	mov	sp,fp
 400dec4:	dfc00117 	ldw	ra,4(sp)
 400dec8:	df000017 	ldw	fp,0(sp)
 400decc:	dec00204 	addi	sp,sp,8
 400ded0:	f800283a 	ret

0400ded4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400ded4:	defff904 	addi	sp,sp,-28
 400ded8:	dfc00615 	stw	ra,24(sp)
 400dedc:	df000515 	stw	fp,20(sp)
 400dee0:	df000504 	addi	fp,sp,20
 400dee4:	e13ffd15 	stw	r4,-12(fp)
 400dee8:	e17ffe15 	stw	r5,-8(fp)
 400deec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400def0:	e0bffd17 	ldw	r2,-12(fp)
 400def4:	10000616 	blt	r2,zero,400df10 <read+0x3c>
 400def8:	e0bffd17 	ldw	r2,-12(fp)
 400defc:	10c00324 	muli	r3,r2,12
 400df00:	00810074 	movhi	r2,1025
 400df04:	10844104 	addi	r2,r2,4356
 400df08:	1885883a 	add	r2,r3,r2
 400df0c:	00000106 	br	400df14 <read+0x40>
 400df10:	0005883a 	mov	r2,zero
 400df14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400df18:	e0bffb17 	ldw	r2,-20(fp)
 400df1c:	10002226 	beq	r2,zero,400dfa8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400df20:	e0bffb17 	ldw	r2,-20(fp)
 400df24:	10800217 	ldw	r2,8(r2)
 400df28:	108000cc 	andi	r2,r2,3
 400df2c:	10800060 	cmpeqi	r2,r2,1
 400df30:	1000181e 	bne	r2,zero,400df94 <read+0xc0>
        (fd->dev->read))
 400df34:	e0bffb17 	ldw	r2,-20(fp)
 400df38:	10800017 	ldw	r2,0(r2)
 400df3c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400df40:	10001426 	beq	r2,zero,400df94 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400df44:	e0bffb17 	ldw	r2,-20(fp)
 400df48:	10800017 	ldw	r2,0(r2)
 400df4c:	10800517 	ldw	r2,20(r2)
 400df50:	e0ffff17 	ldw	r3,-4(fp)
 400df54:	180d883a 	mov	r6,r3
 400df58:	e17ffe17 	ldw	r5,-8(fp)
 400df5c:	e13ffb17 	ldw	r4,-20(fp)
 400df60:	103ee83a 	callr	r2
 400df64:	e0bffc15 	stw	r2,-16(fp)
 400df68:	e0bffc17 	ldw	r2,-16(fp)
 400df6c:	1000070e 	bge	r2,zero,400df8c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 400df70:	400de980 	call	400de98 <alt_get_errno>
 400df74:	1007883a 	mov	r3,r2
 400df78:	e0bffc17 	ldw	r2,-16(fp)
 400df7c:	0085c83a 	sub	r2,zero,r2
 400df80:	18800015 	stw	r2,0(r3)
          return -1;
 400df84:	00bfffc4 	movi	r2,-1
 400df88:	00000c06 	br	400dfbc <read+0xe8>
        }
        return rval;
 400df8c:	e0bffc17 	ldw	r2,-16(fp)
 400df90:	00000a06 	br	400dfbc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400df94:	400de980 	call	400de98 <alt_get_errno>
 400df98:	1007883a 	mov	r3,r2
 400df9c:	00800344 	movi	r2,13
 400dfa0:	18800015 	stw	r2,0(r3)
 400dfa4:	00000406 	br	400dfb8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400dfa8:	400de980 	call	400de98 <alt_get_errno>
 400dfac:	1007883a 	mov	r3,r2
 400dfb0:	00801444 	movi	r2,81
 400dfb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400dfb8:	00bfffc4 	movi	r2,-1
}
 400dfbc:	e037883a 	mov	sp,fp
 400dfc0:	dfc00117 	ldw	ra,4(sp)
 400dfc4:	df000017 	ldw	fp,0(sp)
 400dfc8:	dec00204 	addi	sp,sp,8
 400dfcc:	f800283a 	ret

0400dfd0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400dfd0:	defffe04 	addi	sp,sp,-8
 400dfd4:	df000115 	stw	fp,4(sp)
 400dfd8:	df000104 	addi	fp,sp,4
 400dfdc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400dfe0:	e0bfff17 	ldw	r2,-4(fp)
 400dfe4:	108000d0 	cmplti	r2,r2,3
 400dfe8:	10000d1e 	bne	r2,zero,400e020 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400dfec:	00810074 	movhi	r2,1025
 400dff0:	10844104 	addi	r2,r2,4356
 400dff4:	e0ffff17 	ldw	r3,-4(fp)
 400dff8:	18c00324 	muli	r3,r3,12
 400dffc:	10c5883a 	add	r2,r2,r3
 400e000:	10800204 	addi	r2,r2,8
 400e004:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400e008:	00810074 	movhi	r2,1025
 400e00c:	10844104 	addi	r2,r2,4356
 400e010:	e0ffff17 	ldw	r3,-4(fp)
 400e014:	18c00324 	muli	r3,r3,12
 400e018:	10c5883a 	add	r2,r2,r3
 400e01c:	10000015 	stw	zero,0(r2)
  }
}
 400e020:	0001883a 	nop
 400e024:	e037883a 	mov	sp,fp
 400e028:	df000017 	ldw	fp,0(sp)
 400e02c:	dec00104 	addi	sp,sp,4
 400e030:	f800283a 	ret

0400e034 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400e034:	defff704 	addi	sp,sp,-36
 400e038:	df000815 	stw	fp,32(sp)
 400e03c:	df000804 	addi	fp,sp,32
 400e040:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e044:	0005303a 	rdctl	r2,status
 400e048:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e04c:	e0fffc17 	ldw	r3,-16(fp)
 400e050:	00bfff84 	movi	r2,-2
 400e054:	1884703a 	and	r2,r3,r2
 400e058:	1001703a 	wrctl	status,r2
  
  return context;
 400e05c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400e060:	e0bff915 	stw	r2,-28(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400e064:	d0a00d17 	ldw	r2,-32716(gp)
 400e068:	10c000c4 	addi	r3,r2,3
 400e06c:	00bfff04 	movi	r2,-4
 400e070:	1884703a 	and	r2,r3,r2
 400e074:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400e078:	d0e00d17 	ldw	r3,-32716(gp)
 400e07c:	e0bfff17 	ldw	r2,-4(fp)
 400e080:	1887883a 	add	r3,r3,r2
 400e084:	00820034 	movhi	r2,2048
 400e088:	10800004 	addi	r2,r2,0
 400e08c:	10c0112e 	bgeu	r2,r3,400e0d4 <sbrk+0xa0>
 400e090:	e0bff917 	ldw	r2,-28(fp)
 400e094:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 400e098:	0005303a 	rdctl	r2,status
 400e09c:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 400e0a0:	e0fffd17 	ldw	r3,-12(fp)
 400e0a4:	00bfff84 	movi	r2,-2
 400e0a8:	1884703a 	and	r2,r3,r2
 400e0ac:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 400e0b0:	e0bff817 	ldw	r2,-32(fp)
 400e0b4:	1080004c 	andi	r2,r2,1
 400e0b8:	e0fffd17 	ldw	r3,-12(fp)
 400e0bc:	1884b03a 	or	r2,r3,r2
 400e0c0:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
 400e0c4:	e0bffd17 	ldw	r2,-12(fp)
 400e0c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400e0cc:	00bfffc4 	movi	r2,-1
 400e0d0:	00001606 	br	400e12c <sbrk+0xf8>
  }
#endif

  prev_heap_end = heap_end; 
 400e0d4:	d0a00d17 	ldw	r2,-32716(gp)
 400e0d8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 400e0dc:	d0e00d17 	ldw	r3,-32716(gp)
 400e0e0:	e0bfff17 	ldw	r2,-4(fp)
 400e0e4:	1885883a 	add	r2,r3,r2
 400e0e8:	d0a00d15 	stw	r2,-32716(gp)
 400e0ec:	e0bff917 	ldw	r2,-28(fp)
 400e0f0:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 400e0f4:	0005303a 	rdctl	r2,status
 400e0f8:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 400e0fc:	e0fffe17 	ldw	r3,-8(fp)
 400e100:	00bfff84 	movi	r2,-2
 400e104:	1884703a 	and	r2,r3,r2
 400e108:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 400e10c:	e0bffa17 	ldw	r2,-24(fp)
 400e110:	1080004c 	andi	r2,r2,1
 400e114:	e0fffe17 	ldw	r3,-8(fp)
 400e118:	1884b03a 	or	r2,r3,r2
 400e11c:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
 400e120:	e0bffe17 	ldw	r2,-8(fp)
 400e124:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400e128:	e0bffb17 	ldw	r2,-20(fp)
} 
 400e12c:	e037883a 	mov	sp,fp
 400e130:	df000017 	ldw	fp,0(sp)
 400e134:	dec00104 	addi	sp,sp,4
 400e138:	f800283a 	ret

0400e13c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e13c:	defffe04 	addi	sp,sp,-8
 400e140:	dfc00115 	stw	ra,4(sp)
 400e144:	df000015 	stw	fp,0(sp)
 400e148:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e14c:	d0a00c17 	ldw	r2,-32720(gp)
 400e150:	10000326 	beq	r2,zero,400e160 <alt_get_errno+0x24>
 400e154:	d0a00c17 	ldw	r2,-32720(gp)
 400e158:	103ee83a 	callr	r2
 400e15c:	00000106 	br	400e164 <alt_get_errno+0x28>
 400e160:	d0a6df04 	addi	r2,gp,-25732
}
 400e164:	e037883a 	mov	sp,fp
 400e168:	dfc00117 	ldw	ra,4(sp)
 400e16c:	df000017 	ldw	fp,0(sp)
 400e170:	dec00204 	addi	sp,sp,8
 400e174:	f800283a 	ret

0400e178 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400e178:	defff904 	addi	sp,sp,-28
 400e17c:	dfc00615 	stw	ra,24(sp)
 400e180:	df000515 	stw	fp,20(sp)
 400e184:	df000504 	addi	fp,sp,20
 400e188:	e13ffd15 	stw	r4,-12(fp)
 400e18c:	e17ffe15 	stw	r5,-8(fp)
 400e190:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e194:	e0bffd17 	ldw	r2,-12(fp)
 400e198:	10000616 	blt	r2,zero,400e1b4 <write+0x3c>
 400e19c:	e0bffd17 	ldw	r2,-12(fp)
 400e1a0:	10c00324 	muli	r3,r2,12
 400e1a4:	00810074 	movhi	r2,1025
 400e1a8:	10844104 	addi	r2,r2,4356
 400e1ac:	1885883a 	add	r2,r3,r2
 400e1b0:	00000106 	br	400e1b8 <write+0x40>
 400e1b4:	0005883a 	mov	r2,zero
 400e1b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400e1bc:	e0bffb17 	ldw	r2,-20(fp)
 400e1c0:	10002126 	beq	r2,zero,400e248 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400e1c4:	e0bffb17 	ldw	r2,-20(fp)
 400e1c8:	10800217 	ldw	r2,8(r2)
 400e1cc:	108000cc 	andi	r2,r2,3
 400e1d0:	10001826 	beq	r2,zero,400e234 <write+0xbc>
 400e1d4:	e0bffb17 	ldw	r2,-20(fp)
 400e1d8:	10800017 	ldw	r2,0(r2)
 400e1dc:	10800617 	ldw	r2,24(r2)
 400e1e0:	10001426 	beq	r2,zero,400e234 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400e1e4:	e0bffb17 	ldw	r2,-20(fp)
 400e1e8:	10800017 	ldw	r2,0(r2)
 400e1ec:	10800617 	ldw	r2,24(r2)
 400e1f0:	e0ffff17 	ldw	r3,-4(fp)
 400e1f4:	180d883a 	mov	r6,r3
 400e1f8:	e17ffe17 	ldw	r5,-8(fp)
 400e1fc:	e13ffb17 	ldw	r4,-20(fp)
 400e200:	103ee83a 	callr	r2
 400e204:	e0bffc15 	stw	r2,-16(fp)
 400e208:	e0bffc17 	ldw	r2,-16(fp)
 400e20c:	1000070e 	bge	r2,zero,400e22c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 400e210:	400e13c0 	call	400e13c <alt_get_errno>
 400e214:	1007883a 	mov	r3,r2
 400e218:	e0bffc17 	ldw	r2,-16(fp)
 400e21c:	0085c83a 	sub	r2,zero,r2
 400e220:	18800015 	stw	r2,0(r3)
        return -1;
 400e224:	00bfffc4 	movi	r2,-1
 400e228:	00000c06 	br	400e25c <write+0xe4>
      }
      return rval;
 400e22c:	e0bffc17 	ldw	r2,-16(fp)
 400e230:	00000a06 	br	400e25c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400e234:	400e13c0 	call	400e13c <alt_get_errno>
 400e238:	1007883a 	mov	r3,r2
 400e23c:	00800344 	movi	r2,13
 400e240:	18800015 	stw	r2,0(r3)
 400e244:	00000406 	br	400e258 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400e248:	400e13c0 	call	400e13c <alt_get_errno>
 400e24c:	1007883a 	mov	r3,r2
 400e250:	00801444 	movi	r2,81
 400e254:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400e258:	00bfffc4 	movi	r2,-1
}
 400e25c:	e037883a 	mov	sp,fp
 400e260:	dfc00117 	ldw	ra,4(sp)
 400e264:	df000017 	ldw	fp,0(sp)
 400e268:	dec00204 	addi	sp,sp,8
 400e26c:	f800283a 	ret

0400e270 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400e270:	defffd04 	addi	sp,sp,-12
 400e274:	dfc00215 	stw	ra,8(sp)
 400e278:	df000115 	stw	fp,4(sp)
 400e27c:	df000104 	addi	fp,sp,4
 400e280:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400e284:	d1600904 	addi	r5,gp,-32732
 400e288:	e13fff17 	ldw	r4,-4(fp)
 400e28c:	400f47c0 	call	400f47c <alt_dev_llist_insert>
}
 400e290:	e037883a 	mov	sp,fp
 400e294:	dfc00117 	ldw	ra,4(sp)
 400e298:	df000017 	ldw	fp,0(sp)
 400e29c:	dec00204 	addi	sp,sp,8
 400e2a0:	f800283a 	ret

0400e2a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400e2a4:	defffd04 	addi	sp,sp,-12
 400e2a8:	dfc00215 	stw	ra,8(sp)
 400e2ac:	df000115 	stw	fp,4(sp)
 400e2b0:	df000104 	addi	fp,sp,4
 400e2b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 400e2b8:	400fd640 	call	400fd64 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400e2bc:	00800044 	movi	r2,1
 400e2c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400e2c4:	0001883a 	nop
 400e2c8:	e037883a 	mov	sp,fp
 400e2cc:	dfc00117 	ldw	ra,4(sp)
 400e2d0:	df000017 	ldw	fp,0(sp)
 400e2d4:	dec00204 	addi	sp,sp,8
 400e2d8:	f800283a 	ret

0400e2dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400e2dc:	defffe04 	addi	sp,sp,-8
 400e2e0:	dfc00115 	stw	ra,4(sp)
 400e2e4:	df000015 	stw	fp,0(sp)
 400e2e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 400e2ec:	00820034 	movhi	r2,2048
 400e2f0:	10840004 	addi	r2,r2,4096
 400e2f4:	d0a6e615 	stw	r2,-25704(gp)
 400e2f8:	00817db4 	movhi	r2,1526
 400e2fc:	10b84004 	addi	r2,r2,-7936
 400e300:	d0a6e715 	stw	r2,-25700(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400e304:	000d883a 	mov	r6,zero
 400e308:	000b883a 	mov	r5,zero
 400e30c:	01010074 	movhi	r4,1025
 400e310:	2104ab04 	addi	r4,r4,4780
 400e314:	400e4ac0 	call	400e4ac <altera_avalon_jtag_uart_init>
 400e318:	01010074 	movhi	r4,1025
 400e31c:	2104a104 	addi	r4,r4,4740
 400e320:	400e2700 	call	400e270 <alt_dev_reg>
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
 400e324:	01010074 	movhi	r4,1025
 400e328:	2108b904 	addi	r4,r4,8932
 400e32c:	400e2700 	call	400e270 <alt_dev_reg>
}
 400e330:	0001883a 	nop
 400e334:	e037883a 	mov	sp,fp
 400e338:	dfc00117 	ldw	ra,4(sp)
 400e33c:	df000017 	ldw	fp,0(sp)
 400e340:	dec00204 	addi	sp,sp,8
 400e344:	f800283a 	ret

0400e348 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400e348:	defffa04 	addi	sp,sp,-24
 400e34c:	dfc00515 	stw	ra,20(sp)
 400e350:	df000415 	stw	fp,16(sp)
 400e354:	df000404 	addi	fp,sp,16
 400e358:	e13ffd15 	stw	r4,-12(fp)
 400e35c:	e17ffe15 	stw	r5,-8(fp)
 400e360:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400e364:	e0bffd17 	ldw	r2,-12(fp)
 400e368:	10800017 	ldw	r2,0(r2)
 400e36c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400e370:	e0bffc17 	ldw	r2,-16(fp)
 400e374:	10c00a04 	addi	r3,r2,40
 400e378:	e0bffd17 	ldw	r2,-12(fp)
 400e37c:	10800217 	ldw	r2,8(r2)
 400e380:	100f883a 	mov	r7,r2
 400e384:	e1bfff17 	ldw	r6,-4(fp)
 400e388:	e17ffe17 	ldw	r5,-8(fp)
 400e38c:	1809883a 	mov	r4,r3
 400e390:	400e9680 	call	400e968 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400e394:	e037883a 	mov	sp,fp
 400e398:	dfc00117 	ldw	ra,4(sp)
 400e39c:	df000017 	ldw	fp,0(sp)
 400e3a0:	dec00204 	addi	sp,sp,8
 400e3a4:	f800283a 	ret

0400e3a8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400e3a8:	defffa04 	addi	sp,sp,-24
 400e3ac:	dfc00515 	stw	ra,20(sp)
 400e3b0:	df000415 	stw	fp,16(sp)
 400e3b4:	df000404 	addi	fp,sp,16
 400e3b8:	e13ffd15 	stw	r4,-12(fp)
 400e3bc:	e17ffe15 	stw	r5,-8(fp)
 400e3c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400e3c4:	e0bffd17 	ldw	r2,-12(fp)
 400e3c8:	10800017 	ldw	r2,0(r2)
 400e3cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400e3d0:	e0bffc17 	ldw	r2,-16(fp)
 400e3d4:	10c00a04 	addi	r3,r2,40
 400e3d8:	e0bffd17 	ldw	r2,-12(fp)
 400e3dc:	10800217 	ldw	r2,8(r2)
 400e3e0:	100f883a 	mov	r7,r2
 400e3e4:	e1bfff17 	ldw	r6,-4(fp)
 400e3e8:	e17ffe17 	ldw	r5,-8(fp)
 400e3ec:	1809883a 	mov	r4,r3
 400e3f0:	400ebb00 	call	400ebb0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400e3f4:	e037883a 	mov	sp,fp
 400e3f8:	dfc00117 	ldw	ra,4(sp)
 400e3fc:	df000017 	ldw	fp,0(sp)
 400e400:	dec00204 	addi	sp,sp,8
 400e404:	f800283a 	ret

0400e408 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400e408:	defffc04 	addi	sp,sp,-16
 400e40c:	dfc00315 	stw	ra,12(sp)
 400e410:	df000215 	stw	fp,8(sp)
 400e414:	df000204 	addi	fp,sp,8
 400e418:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400e41c:	e0bfff17 	ldw	r2,-4(fp)
 400e420:	10800017 	ldw	r2,0(r2)
 400e424:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400e428:	e0bffe17 	ldw	r2,-8(fp)
 400e42c:	10c00a04 	addi	r3,r2,40
 400e430:	e0bfff17 	ldw	r2,-4(fp)
 400e434:	10800217 	ldw	r2,8(r2)
 400e438:	100b883a 	mov	r5,r2
 400e43c:	1809883a 	mov	r4,r3
 400e440:	400e8100 	call	400e810 <altera_avalon_jtag_uart_close>
}
 400e444:	e037883a 	mov	sp,fp
 400e448:	dfc00117 	ldw	ra,4(sp)
 400e44c:	df000017 	ldw	fp,0(sp)
 400e450:	dec00204 	addi	sp,sp,8
 400e454:	f800283a 	ret

0400e458 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400e458:	defffa04 	addi	sp,sp,-24
 400e45c:	dfc00515 	stw	ra,20(sp)
 400e460:	df000415 	stw	fp,16(sp)
 400e464:	df000404 	addi	fp,sp,16
 400e468:	e13ffd15 	stw	r4,-12(fp)
 400e46c:	e17ffe15 	stw	r5,-8(fp)
 400e470:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400e474:	e0bffd17 	ldw	r2,-12(fp)
 400e478:	10800017 	ldw	r2,0(r2)
 400e47c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400e480:	e0bffc17 	ldw	r2,-16(fp)
 400e484:	10800a04 	addi	r2,r2,40
 400e488:	e1bfff17 	ldw	r6,-4(fp)
 400e48c:	e17ffe17 	ldw	r5,-8(fp)
 400e490:	1009883a 	mov	r4,r2
 400e494:	400e8780 	call	400e878 <altera_avalon_jtag_uart_ioctl>
}
 400e498:	e037883a 	mov	sp,fp
 400e49c:	dfc00117 	ldw	ra,4(sp)
 400e4a0:	df000017 	ldw	fp,0(sp)
 400e4a4:	dec00204 	addi	sp,sp,8
 400e4a8:	f800283a 	ret

0400e4ac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400e4ac:	defffb04 	addi	sp,sp,-20
 400e4b0:	dfc00415 	stw	ra,16(sp)
 400e4b4:	df000315 	stw	fp,12(sp)
 400e4b8:	df000304 	addi	fp,sp,12
 400e4bc:	e13ffd15 	stw	r4,-12(fp)
 400e4c0:	e17ffe15 	stw	r5,-8(fp)
 400e4c4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400e4c8:	e0bffd17 	ldw	r2,-12(fp)
 400e4cc:	00c00044 	movi	r3,1
 400e4d0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400e4d4:	e0bffd17 	ldw	r2,-12(fp)
 400e4d8:	10800017 	ldw	r2,0(r2)
 400e4dc:	10800104 	addi	r2,r2,4
 400e4e0:	1007883a 	mov	r3,r2
 400e4e4:	e0bffd17 	ldw	r2,-12(fp)
 400e4e8:	10800817 	ldw	r2,32(r2)
 400e4ec:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 400e4f0:	e0bfff17 	ldw	r2,-4(fp)
 400e4f4:	01810074 	movhi	r6,1025
 400e4f8:	31b95804 	addi	r6,r6,-6816
 400e4fc:	e17ffd17 	ldw	r5,-12(fp)
 400e500:	1009883a 	mov	r4,r2
 400e504:	400f9900 	call	400f990 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400e508:	e0bffd17 	ldw	r2,-12(fp)
 400e50c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400e510:	e0bffd17 	ldw	r2,-12(fp)
 400e514:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400e518:	d0e6e917 	ldw	r3,-25692(gp)
 400e51c:	e1fffd17 	ldw	r7,-12(fp)
 400e520:	01810074 	movhi	r6,1025
 400e524:	31b9dc04 	addi	r6,r6,-6288
 400e528:	180b883a 	mov	r5,r3
 400e52c:	1009883a 	mov	r4,r2
 400e530:	400f2c80 	call	400f2c8 <alt_alarm_start>
 400e534:	1000040e 	bge	r2,zero,400e548 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400e538:	e0fffd17 	ldw	r3,-12(fp)
 400e53c:	00a00034 	movhi	r2,32768
 400e540:	10bfffc4 	addi	r2,r2,-1
 400e544:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400e548:	0001883a 	nop
 400e54c:	e037883a 	mov	sp,fp
 400e550:	dfc00117 	ldw	ra,4(sp)
 400e554:	df000017 	ldw	fp,0(sp)
 400e558:	dec00204 	addi	sp,sp,8
 400e55c:	f800283a 	ret

0400e560 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400e560:	defff704 	addi	sp,sp,-36
 400e564:	df000815 	stw	fp,32(sp)
 400e568:	df000804 	addi	fp,sp,32
 400e56c:	e13ffe15 	stw	r4,-8(fp)
 400e570:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400e574:	e0bffe17 	ldw	r2,-8(fp)
 400e578:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 400e57c:	e0bffa17 	ldw	r2,-24(fp)
 400e580:	10800017 	ldw	r2,0(r2)
 400e584:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400e588:	e0bffb17 	ldw	r2,-20(fp)
 400e58c:	10800104 	addi	r2,r2,4
 400e590:	10800037 	ldwio	r2,0(r2)
 400e594:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400e598:	e0bffc17 	ldw	r2,-16(fp)
 400e59c:	1080c00c 	andi	r2,r2,768
 400e5a0:	10006d26 	beq	r2,zero,400e758 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400e5a4:	e0bffc17 	ldw	r2,-16(fp)
 400e5a8:	1080400c 	andi	r2,r2,256
 400e5ac:	10003526 	beq	r2,zero,400e684 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400e5b0:	00800074 	movhi	r2,1
 400e5b4:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e5b8:	e0bffa17 	ldw	r2,-24(fp)
 400e5bc:	10800a17 	ldw	r2,40(r2)
 400e5c0:	10800044 	addi	r2,r2,1
 400e5c4:	1081ffcc 	andi	r2,r2,2047
 400e5c8:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 400e5cc:	e0bffa17 	ldw	r2,-24(fp)
 400e5d0:	10c00b17 	ldw	r3,44(r2)
 400e5d4:	e0bffd17 	ldw	r2,-12(fp)
 400e5d8:	18801526 	beq	r3,r2,400e630 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400e5dc:	e0bffb17 	ldw	r2,-20(fp)
 400e5e0:	10800037 	ldwio	r2,0(r2)
 400e5e4:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400e5e8:	e0bff817 	ldw	r2,-32(fp)
 400e5ec:	10a0000c 	andi	r2,r2,32768
 400e5f0:	10001126 	beq	r2,zero,400e638 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400e5f4:	e0bffa17 	ldw	r2,-24(fp)
 400e5f8:	10800a17 	ldw	r2,40(r2)
 400e5fc:	e0fff817 	ldw	r3,-32(fp)
 400e600:	1809883a 	mov	r4,r3
 400e604:	e0fffa17 	ldw	r3,-24(fp)
 400e608:	1885883a 	add	r2,r3,r2
 400e60c:	10800e04 	addi	r2,r2,56
 400e610:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e614:	e0bffa17 	ldw	r2,-24(fp)
 400e618:	10800a17 	ldw	r2,40(r2)
 400e61c:	10800044 	addi	r2,r2,1
 400e620:	10c1ffcc 	andi	r3,r2,2047
 400e624:	e0bffa17 	ldw	r2,-24(fp)
 400e628:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400e62c:	003fe206 	br	400e5b8 <__alt_data_end+0xfc00e5b8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400e630:	0001883a 	nop
 400e634:	00000106 	br	400e63c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400e638:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400e63c:	e0bff817 	ldw	r2,-32(fp)
 400e640:	10bfffec 	andhi	r2,r2,65535
 400e644:	10000f26 	beq	r2,zero,400e684 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400e648:	e0bffa17 	ldw	r2,-24(fp)
 400e64c:	10c00817 	ldw	r3,32(r2)
 400e650:	00bfff84 	movi	r2,-2
 400e654:	1886703a 	and	r3,r3,r2
 400e658:	e0bffa17 	ldw	r2,-24(fp)
 400e65c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400e660:	e0bffb17 	ldw	r2,-20(fp)
 400e664:	10800104 	addi	r2,r2,4
 400e668:	1007883a 	mov	r3,r2
 400e66c:	e0bffa17 	ldw	r2,-24(fp)
 400e670:	10800817 	ldw	r2,32(r2)
 400e674:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400e678:	e0bffb17 	ldw	r2,-20(fp)
 400e67c:	10800104 	addi	r2,r2,4
 400e680:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400e684:	e0bffc17 	ldw	r2,-16(fp)
 400e688:	1080800c 	andi	r2,r2,512
 400e68c:	103fbe26 	beq	r2,zero,400e588 <__alt_data_end+0xfc00e588>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400e690:	e0bffc17 	ldw	r2,-16(fp)
 400e694:	1004d43a 	srli	r2,r2,16
 400e698:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400e69c:	00001406 	br	400e6f0 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400e6a0:	e0bffb17 	ldw	r2,-20(fp)
 400e6a4:	e0fffa17 	ldw	r3,-24(fp)
 400e6a8:	18c00d17 	ldw	r3,52(r3)
 400e6ac:	e13ffa17 	ldw	r4,-24(fp)
 400e6b0:	20c7883a 	add	r3,r4,r3
 400e6b4:	18c20e04 	addi	r3,r3,2104
 400e6b8:	18c00003 	ldbu	r3,0(r3)
 400e6bc:	18c03fcc 	andi	r3,r3,255
 400e6c0:	18c0201c 	xori	r3,r3,128
 400e6c4:	18ffe004 	addi	r3,r3,-128
 400e6c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e6cc:	e0bffa17 	ldw	r2,-24(fp)
 400e6d0:	10800d17 	ldw	r2,52(r2)
 400e6d4:	10800044 	addi	r2,r2,1
 400e6d8:	10c1ffcc 	andi	r3,r2,2047
 400e6dc:	e0bffa17 	ldw	r2,-24(fp)
 400e6e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400e6e4:	e0bff917 	ldw	r2,-28(fp)
 400e6e8:	10bfffc4 	addi	r2,r2,-1
 400e6ec:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400e6f0:	e0bff917 	ldw	r2,-28(fp)
 400e6f4:	10000526 	beq	r2,zero,400e70c <altera_avalon_jtag_uart_irq+0x1ac>
 400e6f8:	e0bffa17 	ldw	r2,-24(fp)
 400e6fc:	10c00d17 	ldw	r3,52(r2)
 400e700:	e0bffa17 	ldw	r2,-24(fp)
 400e704:	10800c17 	ldw	r2,48(r2)
 400e708:	18bfe51e 	bne	r3,r2,400e6a0 <__alt_data_end+0xfc00e6a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400e70c:	e0bff917 	ldw	r2,-28(fp)
 400e710:	103f9d26 	beq	r2,zero,400e588 <__alt_data_end+0xfc00e588>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400e714:	e0bffa17 	ldw	r2,-24(fp)
 400e718:	10c00817 	ldw	r3,32(r2)
 400e71c:	00bfff44 	movi	r2,-3
 400e720:	1886703a 	and	r3,r3,r2
 400e724:	e0bffa17 	ldw	r2,-24(fp)
 400e728:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400e72c:	e0bffa17 	ldw	r2,-24(fp)
 400e730:	10800017 	ldw	r2,0(r2)
 400e734:	10800104 	addi	r2,r2,4
 400e738:	1007883a 	mov	r3,r2
 400e73c:	e0bffa17 	ldw	r2,-24(fp)
 400e740:	10800817 	ldw	r2,32(r2)
 400e744:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400e748:	e0bffb17 	ldw	r2,-20(fp)
 400e74c:	10800104 	addi	r2,r2,4
 400e750:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400e754:	003f8c06 	br	400e588 <__alt_data_end+0xfc00e588>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400e758:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400e75c:	0001883a 	nop
 400e760:	e037883a 	mov	sp,fp
 400e764:	df000017 	ldw	fp,0(sp)
 400e768:	dec00104 	addi	sp,sp,4
 400e76c:	f800283a 	ret

0400e770 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400e770:	defff804 	addi	sp,sp,-32
 400e774:	df000715 	stw	fp,28(sp)
 400e778:	df000704 	addi	fp,sp,28
 400e77c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400e780:	e0bffb17 	ldw	r2,-20(fp)
 400e784:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400e788:	e0bff917 	ldw	r2,-28(fp)
 400e78c:	10800017 	ldw	r2,0(r2)
 400e790:	10800104 	addi	r2,r2,4
 400e794:	10800037 	ldwio	r2,0(r2)
 400e798:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400e79c:	e0bffa17 	ldw	r2,-24(fp)
 400e7a0:	1081000c 	andi	r2,r2,1024
 400e7a4:	10000b26 	beq	r2,zero,400e7d4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400e7a8:	e0bff917 	ldw	r2,-28(fp)
 400e7ac:	10800017 	ldw	r2,0(r2)
 400e7b0:	10800104 	addi	r2,r2,4
 400e7b4:	1007883a 	mov	r3,r2
 400e7b8:	e0bff917 	ldw	r2,-28(fp)
 400e7bc:	10800817 	ldw	r2,32(r2)
 400e7c0:	10810014 	ori	r2,r2,1024
 400e7c4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400e7c8:	e0bff917 	ldw	r2,-28(fp)
 400e7cc:	10000915 	stw	zero,36(r2)
 400e7d0:	00000a06 	br	400e7fc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400e7d4:	e0bff917 	ldw	r2,-28(fp)
 400e7d8:	10c00917 	ldw	r3,36(r2)
 400e7dc:	00a00034 	movhi	r2,32768
 400e7e0:	10bfff04 	addi	r2,r2,-4
 400e7e4:	10c00536 	bltu	r2,r3,400e7fc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400e7e8:	e0bff917 	ldw	r2,-28(fp)
 400e7ec:	10800917 	ldw	r2,36(r2)
 400e7f0:	10c00044 	addi	r3,r2,1
 400e7f4:	e0bff917 	ldw	r2,-28(fp)
 400e7f8:	10c00915 	stw	r3,36(r2)
 400e7fc:	d0a6e917 	ldw	r2,-25692(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400e800:	e037883a 	mov	sp,fp
 400e804:	df000017 	ldw	fp,0(sp)
 400e808:	dec00104 	addi	sp,sp,4
 400e80c:	f800283a 	ret

0400e810 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400e810:	defffd04 	addi	sp,sp,-12
 400e814:	df000215 	stw	fp,8(sp)
 400e818:	df000204 	addi	fp,sp,8
 400e81c:	e13ffe15 	stw	r4,-8(fp)
 400e820:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400e824:	00000506 	br	400e83c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400e828:	e0bfff17 	ldw	r2,-4(fp)
 400e82c:	1090000c 	andi	r2,r2,16384
 400e830:	10000226 	beq	r2,zero,400e83c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400e834:	00bffd44 	movi	r2,-11
 400e838:	00000b06 	br	400e868 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400e83c:	e0bffe17 	ldw	r2,-8(fp)
 400e840:	10c00d17 	ldw	r3,52(r2)
 400e844:	e0bffe17 	ldw	r2,-8(fp)
 400e848:	10800c17 	ldw	r2,48(r2)
 400e84c:	18800526 	beq	r3,r2,400e864 <altera_avalon_jtag_uart_close+0x54>
 400e850:	e0bffe17 	ldw	r2,-8(fp)
 400e854:	10c00917 	ldw	r3,36(r2)
 400e858:	e0bffe17 	ldw	r2,-8(fp)
 400e85c:	10800117 	ldw	r2,4(r2)
 400e860:	18bff136 	bltu	r3,r2,400e828 <__alt_data_end+0xfc00e828>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400e864:	0005883a 	mov	r2,zero
}
 400e868:	e037883a 	mov	sp,fp
 400e86c:	df000017 	ldw	fp,0(sp)
 400e870:	dec00104 	addi	sp,sp,4
 400e874:	f800283a 	ret

0400e878 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400e878:	defffa04 	addi	sp,sp,-24
 400e87c:	df000515 	stw	fp,20(sp)
 400e880:	df000504 	addi	fp,sp,20
 400e884:	e13ffd15 	stw	r4,-12(fp)
 400e888:	e17ffe15 	stw	r5,-8(fp)
 400e88c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400e890:	00bff9c4 	movi	r2,-25
 400e894:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400e898:	e0bffe17 	ldw	r2,-8(fp)
 400e89c:	10da8060 	cmpeqi	r3,r2,27137
 400e8a0:	1800031e 	bne	r3,zero,400e8b0 <altera_avalon_jtag_uart_ioctl+0x38>
 400e8a4:	109a80a0 	cmpeqi	r2,r2,27138
 400e8a8:	1000181e 	bne	r2,zero,400e90c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400e8ac:	00002906 	br	400e954 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400e8b0:	e0bffd17 	ldw	r2,-12(fp)
 400e8b4:	10c00117 	ldw	r3,4(r2)
 400e8b8:	00a00034 	movhi	r2,32768
 400e8bc:	10bfffc4 	addi	r2,r2,-1
 400e8c0:	18802126 	beq	r3,r2,400e948 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400e8c4:	e0bfff17 	ldw	r2,-4(fp)
 400e8c8:	10800017 	ldw	r2,0(r2)
 400e8cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400e8d0:	e0bffc17 	ldw	r2,-16(fp)
 400e8d4:	10800090 	cmplti	r2,r2,2
 400e8d8:	1000061e 	bne	r2,zero,400e8f4 <altera_avalon_jtag_uart_ioctl+0x7c>
 400e8dc:	e0fffc17 	ldw	r3,-16(fp)
 400e8e0:	00a00034 	movhi	r2,32768
 400e8e4:	10bfffc4 	addi	r2,r2,-1
 400e8e8:	18800226 	beq	r3,r2,400e8f4 <altera_avalon_jtag_uart_ioctl+0x7c>
 400e8ec:	e0bffc17 	ldw	r2,-16(fp)
 400e8f0:	00000206 	br	400e8fc <altera_avalon_jtag_uart_ioctl+0x84>
 400e8f4:	00a00034 	movhi	r2,32768
 400e8f8:	10bfff84 	addi	r2,r2,-2
 400e8fc:	e0fffd17 	ldw	r3,-12(fp)
 400e900:	18800115 	stw	r2,4(r3)
      rc = 0;
 400e904:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400e908:	00000f06 	br	400e948 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400e90c:	e0bffd17 	ldw	r2,-12(fp)
 400e910:	10c00117 	ldw	r3,4(r2)
 400e914:	00a00034 	movhi	r2,32768
 400e918:	10bfffc4 	addi	r2,r2,-1
 400e91c:	18800c26 	beq	r3,r2,400e950 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400e920:	e0bffd17 	ldw	r2,-12(fp)
 400e924:	10c00917 	ldw	r3,36(r2)
 400e928:	e0bffd17 	ldw	r2,-12(fp)
 400e92c:	10800117 	ldw	r2,4(r2)
 400e930:	1885803a 	cmpltu	r2,r3,r2
 400e934:	10c03fcc 	andi	r3,r2,255
 400e938:	e0bfff17 	ldw	r2,-4(fp)
 400e93c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400e940:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400e944:	00000206 	br	400e950 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400e948:	0001883a 	nop
 400e94c:	00000106 	br	400e954 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400e950:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400e954:	e0bffb17 	ldw	r2,-20(fp)
}
 400e958:	e037883a 	mov	sp,fp
 400e95c:	df000017 	ldw	fp,0(sp)
 400e960:	dec00104 	addi	sp,sp,4
 400e964:	f800283a 	ret

0400e968 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400e968:	defff204 	addi	sp,sp,-56
 400e96c:	dfc00d15 	stw	ra,52(sp)
 400e970:	df000c15 	stw	fp,48(sp)
 400e974:	df000c04 	addi	fp,sp,48
 400e978:	e13ffc15 	stw	r4,-16(fp)
 400e97c:	e17ffd15 	stw	r5,-12(fp)
 400e980:	e1bffe15 	stw	r6,-8(fp)
 400e984:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400e988:	e0bffd17 	ldw	r2,-12(fp)
 400e98c:	e0bff415 	stw	r2,-48(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400e990:	00004706 	br	400eab0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400e994:	e0bffc17 	ldw	r2,-16(fp)
 400e998:	10800a17 	ldw	r2,40(r2)
 400e99c:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 400e9a0:	e0bffc17 	ldw	r2,-16(fp)
 400e9a4:	10800b17 	ldw	r2,44(r2)
 400e9a8:	e0bff715 	stw	r2,-36(fp)

      if (in >= out)
 400e9ac:	e0fff617 	ldw	r3,-40(fp)
 400e9b0:	e0bff717 	ldw	r2,-36(fp)
 400e9b4:	18800536 	bltu	r3,r2,400e9cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400e9b8:	e0fff617 	ldw	r3,-40(fp)
 400e9bc:	e0bff717 	ldw	r2,-36(fp)
 400e9c0:	1885c83a 	sub	r2,r3,r2
 400e9c4:	e0bff515 	stw	r2,-44(fp)
 400e9c8:	00000406 	br	400e9dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400e9cc:	00c20004 	movi	r3,2048
 400e9d0:	e0bff717 	ldw	r2,-36(fp)
 400e9d4:	1885c83a 	sub	r2,r3,r2
 400e9d8:	e0bff515 	stw	r2,-44(fp)

      if (n == 0)
 400e9dc:	e0bff517 	ldw	r2,-44(fp)
 400e9e0:	10001e26 	beq	r2,zero,400ea5c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400e9e4:	e0fffe17 	ldw	r3,-8(fp)
 400e9e8:	e0bff517 	ldw	r2,-44(fp)
 400e9ec:	1880022e 	bgeu	r3,r2,400e9f8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400e9f0:	e0bffe17 	ldw	r2,-8(fp)
 400e9f4:	e0bff515 	stw	r2,-44(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400e9f8:	e0bffc17 	ldw	r2,-16(fp)
 400e9fc:	10c00e04 	addi	r3,r2,56
 400ea00:	e0bff717 	ldw	r2,-36(fp)
 400ea04:	1885883a 	add	r2,r3,r2
 400ea08:	e1bff517 	ldw	r6,-44(fp)
 400ea0c:	100b883a 	mov	r5,r2
 400ea10:	e13ff417 	ldw	r4,-48(fp)
 400ea14:	400691c0 	call	400691c <memcpy>
      ptr   += n;
 400ea18:	e0fff417 	ldw	r3,-48(fp)
 400ea1c:	e0bff517 	ldw	r2,-44(fp)
 400ea20:	1885883a 	add	r2,r3,r2
 400ea24:	e0bff415 	stw	r2,-48(fp)
      space -= n;
 400ea28:	e0fffe17 	ldw	r3,-8(fp)
 400ea2c:	e0bff517 	ldw	r2,-44(fp)
 400ea30:	1885c83a 	sub	r2,r3,r2
 400ea34:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400ea38:	e0fff717 	ldw	r3,-36(fp)
 400ea3c:	e0bff517 	ldw	r2,-44(fp)
 400ea40:	1885883a 	add	r2,r3,r2
 400ea44:	10c1ffcc 	andi	r3,r2,2047
 400ea48:	e0bffc17 	ldw	r2,-16(fp)
 400ea4c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400ea50:	e0bffe17 	ldw	r2,-8(fp)
 400ea54:	00bfcf16 	blt	zero,r2,400e994 <__alt_data_end+0xfc00e994>
 400ea58:	00000106 	br	400ea60 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400ea5c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400ea60:	e0fff417 	ldw	r3,-48(fp)
 400ea64:	e0bffd17 	ldw	r2,-12(fp)
 400ea68:	1880141e 	bne	r3,r2,400eabc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400ea6c:	e0bfff17 	ldw	r2,-4(fp)
 400ea70:	1090000c 	andi	r2,r2,16384
 400ea74:	1000131e 	bne	r2,zero,400eac4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400ea78:	0001883a 	nop
 400ea7c:	e0bffc17 	ldw	r2,-16(fp)
 400ea80:	10c00a17 	ldw	r3,40(r2)
 400ea84:	e0bff617 	ldw	r2,-40(fp)
 400ea88:	1880051e 	bne	r3,r2,400eaa0 <altera_avalon_jtag_uart_read+0x138>
 400ea8c:	e0bffc17 	ldw	r2,-16(fp)
 400ea90:	10c00917 	ldw	r3,36(r2)
 400ea94:	e0bffc17 	ldw	r2,-16(fp)
 400ea98:	10800117 	ldw	r2,4(r2)
 400ea9c:	18bff736 	bltu	r3,r2,400ea7c <__alt_data_end+0xfc00ea7c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400eaa0:	e0bffc17 	ldw	r2,-16(fp)
 400eaa4:	10c00a17 	ldw	r3,40(r2)
 400eaa8:	e0bff617 	ldw	r2,-40(fp)
 400eaac:	18800726 	beq	r3,r2,400eacc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400eab0:	e0bffe17 	ldw	r2,-8(fp)
 400eab4:	00bfb716 	blt	zero,r2,400e994 <__alt_data_end+0xfc00e994>
 400eab8:	00000506 	br	400ead0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400eabc:	0001883a 	nop
 400eac0:	00000306 	br	400ead0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400eac4:	0001883a 	nop
 400eac8:	00000106 	br	400ead0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400eacc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400ead0:	e0fff417 	ldw	r3,-48(fp)
 400ead4:	e0bffd17 	ldw	r2,-12(fp)
 400ead8:	18802326 	beq	r3,r2,400eb68 <altera_avalon_jtag_uart_read+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eadc:	0005303a 	rdctl	r2,status
 400eae0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eae4:	e0fffa17 	ldw	r3,-24(fp)
 400eae8:	00bfff84 	movi	r2,-2
 400eaec:	1884703a 	and	r2,r3,r2
 400eaf0:	1001703a 	wrctl	status,r2
  
  return context;
 400eaf4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400eaf8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400eafc:	e0bffc17 	ldw	r2,-16(fp)
 400eb00:	10800817 	ldw	r2,32(r2)
 400eb04:	10c00054 	ori	r3,r2,1
 400eb08:	e0bffc17 	ldw	r2,-16(fp)
 400eb0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400eb10:	e0bffc17 	ldw	r2,-16(fp)
 400eb14:	10800017 	ldw	r2,0(r2)
 400eb18:	10800104 	addi	r2,r2,4
 400eb1c:	1007883a 	mov	r3,r2
 400eb20:	e0bffc17 	ldw	r2,-16(fp)
 400eb24:	10800817 	ldw	r2,32(r2)
 400eb28:	18800035 	stwio	r2,0(r3)
 400eb2c:	e0bff917 	ldw	r2,-28(fp)
 400eb30:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 400eb34:	0005303a 	rdctl	r2,status
 400eb38:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 400eb3c:	e0fffb17 	ldw	r3,-20(fp)
 400eb40:	00bfff84 	movi	r2,-2
 400eb44:	1884703a 	and	r2,r3,r2
 400eb48:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 400eb4c:	e0bff817 	ldw	r2,-32(fp)
 400eb50:	1080004c 	andi	r2,r2,1
 400eb54:	e0fffb17 	ldw	r3,-20(fp)
 400eb58:	1884b03a 	or	r2,r3,r2
 400eb5c:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
 400eb60:	e0bffb17 	ldw	r2,-20(fp)
 400eb64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400eb68:	e0fff417 	ldw	r3,-48(fp)
 400eb6c:	e0bffd17 	ldw	r2,-12(fp)
 400eb70:	18800426 	beq	r3,r2,400eb84 <altera_avalon_jtag_uart_read+0x21c>
    return ptr - buffer;
 400eb74:	e0fff417 	ldw	r3,-48(fp)
 400eb78:	e0bffd17 	ldw	r2,-12(fp)
 400eb7c:	1885c83a 	sub	r2,r3,r2
 400eb80:	00000606 	br	400eb9c <altera_avalon_jtag_uart_read+0x234>
  else if (flags & O_NONBLOCK)
 400eb84:	e0bfff17 	ldw	r2,-4(fp)
 400eb88:	1090000c 	andi	r2,r2,16384
 400eb8c:	10000226 	beq	r2,zero,400eb98 <altera_avalon_jtag_uart_read+0x230>
    return -EWOULDBLOCK;
 400eb90:	00bffd44 	movi	r2,-11
 400eb94:	00000106 	br	400eb9c <altera_avalon_jtag_uart_read+0x234>
  else
    return -EIO;
 400eb98:	00bffec4 	movi	r2,-5
}
 400eb9c:	e037883a 	mov	sp,fp
 400eba0:	dfc00117 	ldw	ra,4(sp)
 400eba4:	df000017 	ldw	fp,0(sp)
 400eba8:	dec00204 	addi	sp,sp,8
 400ebac:	f800283a 	ret

0400ebb0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400ebb0:	defff204 	addi	sp,sp,-56
 400ebb4:	dfc00d15 	stw	ra,52(sp)
 400ebb8:	df000c15 	stw	fp,48(sp)
 400ebbc:	df000c04 	addi	fp,sp,48
 400ebc0:	e13ffc15 	stw	r4,-16(fp)
 400ebc4:	e17ffd15 	stw	r5,-12(fp)
 400ebc8:	e1bffe15 	stw	r6,-8(fp)
 400ebcc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400ebd0:	e03ff415 	stw	zero,-48(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400ebd4:	e0bffd17 	ldw	r2,-12(fp)
 400ebd8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400ebdc:	00003706 	br	400ecbc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400ebe0:	e0bffc17 	ldw	r2,-16(fp)
 400ebe4:	10800c17 	ldw	r2,48(r2)
 400ebe8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 400ebec:	e0bffc17 	ldw	r2,-16(fp)
 400ebf0:	10800d17 	ldw	r2,52(r2)
 400ebf4:	e0bff415 	stw	r2,-48(fp)

      if (in < out)
 400ebf8:	e0fff817 	ldw	r3,-32(fp)
 400ebfc:	e0bff417 	ldw	r2,-48(fp)
 400ec00:	1880062e 	bgeu	r3,r2,400ec1c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400ec04:	e0fff417 	ldw	r3,-48(fp)
 400ec08:	e0bff817 	ldw	r2,-32(fp)
 400ec0c:	1885c83a 	sub	r2,r3,r2
 400ec10:	10bfffc4 	addi	r2,r2,-1
 400ec14:	e0bff515 	stw	r2,-44(fp)
 400ec18:	00000b06 	br	400ec48 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400ec1c:	e0bff417 	ldw	r2,-48(fp)
 400ec20:	10000526 	beq	r2,zero,400ec38 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400ec24:	00c20004 	movi	r3,2048
 400ec28:	e0bff817 	ldw	r2,-32(fp)
 400ec2c:	1885c83a 	sub	r2,r3,r2
 400ec30:	e0bff515 	stw	r2,-44(fp)
 400ec34:	00000406 	br	400ec48 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400ec38:	00c1ffc4 	movi	r3,2047
 400ec3c:	e0bff817 	ldw	r2,-32(fp)
 400ec40:	1885c83a 	sub	r2,r3,r2
 400ec44:	e0bff515 	stw	r2,-44(fp)

      if (n == 0)
 400ec48:	e0bff517 	ldw	r2,-44(fp)
 400ec4c:	10001e26 	beq	r2,zero,400ecc8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400ec50:	e0fffe17 	ldw	r3,-8(fp)
 400ec54:	e0bff517 	ldw	r2,-44(fp)
 400ec58:	1880022e 	bgeu	r3,r2,400ec64 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400ec5c:	e0bffe17 	ldw	r2,-8(fp)
 400ec60:	e0bff515 	stw	r2,-44(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400ec64:	e0bffc17 	ldw	r2,-16(fp)
 400ec68:	10c20e04 	addi	r3,r2,2104
 400ec6c:	e0bff817 	ldw	r2,-32(fp)
 400ec70:	1885883a 	add	r2,r3,r2
 400ec74:	e1bff517 	ldw	r6,-44(fp)
 400ec78:	e17ffd17 	ldw	r5,-12(fp)
 400ec7c:	1009883a 	mov	r4,r2
 400ec80:	400691c0 	call	400691c <memcpy>
      ptr   += n;
 400ec84:	e0fffd17 	ldw	r3,-12(fp)
 400ec88:	e0bff517 	ldw	r2,-44(fp)
 400ec8c:	1885883a 	add	r2,r3,r2
 400ec90:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400ec94:	e0fffe17 	ldw	r3,-8(fp)
 400ec98:	e0bff517 	ldw	r2,-44(fp)
 400ec9c:	1885c83a 	sub	r2,r3,r2
 400eca0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400eca4:	e0fff817 	ldw	r3,-32(fp)
 400eca8:	e0bff517 	ldw	r2,-44(fp)
 400ecac:	1885883a 	add	r2,r3,r2
 400ecb0:	10c1ffcc 	andi	r3,r2,2047
 400ecb4:	e0bffc17 	ldw	r2,-16(fp)
 400ecb8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400ecbc:	e0bffe17 	ldw	r2,-8(fp)
 400ecc0:	00bfc716 	blt	zero,r2,400ebe0 <__alt_data_end+0xfc00ebe0>
 400ecc4:	00000106 	br	400eccc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400ecc8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eccc:	0005303a 	rdctl	r2,status
 400ecd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ecd4:	e0fffa17 	ldw	r3,-24(fp)
 400ecd8:	00bfff84 	movi	r2,-2
 400ecdc:	1884703a 	and	r2,r3,r2
 400ece0:	1001703a 	wrctl	status,r2
  
  return context;
 400ece4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400ece8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400ecec:	e0bffc17 	ldw	r2,-16(fp)
 400ecf0:	10800817 	ldw	r2,32(r2)
 400ecf4:	10c00094 	ori	r3,r2,2
 400ecf8:	e0bffc17 	ldw	r2,-16(fp)
 400ecfc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400ed00:	e0bffc17 	ldw	r2,-16(fp)
 400ed04:	10800017 	ldw	r2,0(r2)
 400ed08:	10800104 	addi	r2,r2,4
 400ed0c:	1007883a 	mov	r3,r2
 400ed10:	e0bffc17 	ldw	r2,-16(fp)
 400ed14:	10800817 	ldw	r2,32(r2)
 400ed18:	18800035 	stwio	r2,0(r3)
 400ed1c:	e0bff917 	ldw	r2,-28(fp)
 400ed20:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 400ed24:	0005303a 	rdctl	r2,status
 400ed28:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 400ed2c:	e0fffb17 	ldw	r3,-20(fp)
 400ed30:	00bfff84 	movi	r2,-2
 400ed34:	1884703a 	and	r2,r3,r2
 400ed38:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 400ed3c:	e0bff717 	ldw	r2,-36(fp)
 400ed40:	1080004c 	andi	r2,r2,1
 400ed44:	e0fffb17 	ldw	r3,-20(fp)
 400ed48:	1884b03a 	or	r2,r3,r2
 400ed4c:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
 400ed50:	e0bffb17 	ldw	r2,-20(fp)
 400ed54:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400ed58:	e0bffe17 	ldw	r2,-8(fp)
 400ed5c:	0080100e 	bge	zero,r2,400eda0 <altera_avalon_jtag_uart_write+0x1f0>
    {
      if (flags & O_NONBLOCK)
 400ed60:	e0bfff17 	ldw	r2,-4(fp)
 400ed64:	1090000c 	andi	r2,r2,16384
 400ed68:	1000101e 	bne	r2,zero,400edac <altera_avalon_jtag_uart_write+0x1fc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400ed6c:	0001883a 	nop
 400ed70:	e0bffc17 	ldw	r2,-16(fp)
 400ed74:	10c00d17 	ldw	r3,52(r2)
 400ed78:	e0bff417 	ldw	r2,-48(fp)
 400ed7c:	1880051e 	bne	r3,r2,400ed94 <altera_avalon_jtag_uart_write+0x1e4>
 400ed80:	e0bffc17 	ldw	r2,-16(fp)
 400ed84:	10c00917 	ldw	r3,36(r2)
 400ed88:	e0bffc17 	ldw	r2,-16(fp)
 400ed8c:	10800117 	ldw	r2,4(r2)
 400ed90:	18bff736 	bltu	r3,r2,400ed70 <__alt_data_end+0xfc00ed70>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400ed94:	e0bffc17 	ldw	r2,-16(fp)
 400ed98:	10800917 	ldw	r2,36(r2)
 400ed9c:	1000051e 	bne	r2,zero,400edb4 <altera_avalon_jtag_uart_write+0x204>
         break;
    }
  }
  while (count > 0);
 400eda0:	e0bffe17 	ldw	r2,-8(fp)
 400eda4:	00bfc516 	blt	zero,r2,400ecbc <__alt_data_end+0xfc00ecbc>
 400eda8:	00000306 	br	400edb8 <altera_avalon_jtag_uart_write+0x208>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400edac:	0001883a 	nop
 400edb0:	00000106 	br	400edb8 <altera_avalon_jtag_uart_write+0x208>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400edb4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400edb8:	e0fffd17 	ldw	r3,-12(fp)
 400edbc:	e0bff617 	ldw	r2,-40(fp)
 400edc0:	18800426 	beq	r3,r2,400edd4 <altera_avalon_jtag_uart_write+0x224>
    return ptr - start;
 400edc4:	e0fffd17 	ldw	r3,-12(fp)
 400edc8:	e0bff617 	ldw	r2,-40(fp)
 400edcc:	1885c83a 	sub	r2,r3,r2
 400edd0:	00000606 	br	400edec <altera_avalon_jtag_uart_write+0x23c>
  else if (flags & O_NONBLOCK)
 400edd4:	e0bfff17 	ldw	r2,-4(fp)
 400edd8:	1090000c 	andi	r2,r2,16384
 400eddc:	10000226 	beq	r2,zero,400ede8 <altera_avalon_jtag_uart_write+0x238>
    return -EWOULDBLOCK;
 400ede0:	00bffd44 	movi	r2,-11
 400ede4:	00000106 	br	400edec <altera_avalon_jtag_uart_write+0x23c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400ede8:	00bffec4 	movi	r2,-5
}
 400edec:	e037883a 	mov	sp,fp
 400edf0:	dfc00117 	ldw	ra,4(sp)
 400edf4:	df000017 	ldw	fp,0(sp)
 400edf8:	dec00204 	addi	sp,sp,8
 400edfc:	f800283a 	ret

0400ee00 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 400ee00:	defffe04 	addi	sp,sp,-8
 400ee04:	df000115 	stw	fp,4(sp)
 400ee08:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
 400ee0c:	d0a6e617 	ldw	r2,-25704(gp)
 400ee10:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
 400ee14:	d0a6e717 	ldw	r2,-25700(gp)
 400ee18:	1000021e 	bne	r2,zero,400ee24 <alt_timestamp_start+0x24>
  {
    return -1;
 400ee1c:	00bfffc4 	movi	r2,-1
 400ee20:	00001106 	br	400ee68 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 400ee24:	e0bfff17 	ldw	r2,-4(fp)
 400ee28:	10800104 	addi	r2,r2,4
 400ee2c:	00c00204 	movi	r3,8
 400ee30:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 400ee34:	e0bfff17 	ldw	r2,-4(fp)
 400ee38:	10800204 	addi	r2,r2,8
 400ee3c:	00ffffd4 	movui	r3,65535
 400ee40:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 400ee44:	e0bfff17 	ldw	r2,-4(fp)
 400ee48:	10800304 	addi	r2,r2,12
 400ee4c:	00ffffd4 	movui	r3,65535
 400ee50:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 400ee54:	e0bfff17 	ldw	r2,-4(fp)
 400ee58:	10800104 	addi	r2,r2,4
 400ee5c:	00c00104 	movi	r3,4
 400ee60:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
 400ee64:	0005883a 	mov	r2,zero
}
 400ee68:	e037883a 	mov	sp,fp
 400ee6c:	df000017 	ldw	fp,0(sp)
 400ee70:	dec00104 	addi	sp,sp,4
 400ee74:	f800283a 	ret

0400ee78 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 400ee78:	defffc04 	addi	sp,sp,-16
 400ee7c:	df000315 	stw	fp,12(sp)
 400ee80:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
 400ee84:	d0a6e617 	ldw	r2,-25704(gp)
 400ee88:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
 400ee8c:	d0a6e717 	ldw	r2,-25700(gp)
 400ee90:	1000021e 	bne	r2,zero,400ee9c <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
 400ee94:	00bfffc4 	movi	r2,-1
 400ee98:	00001306 	br	400eee8 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 400ee9c:	e0bffd17 	ldw	r2,-12(fp)
 400eea0:	10800404 	addi	r2,r2,16
 400eea4:	0007883a 	mov	r3,zero
 400eea8:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 400eeac:	e0bffd17 	ldw	r2,-12(fp)
 400eeb0:	10800404 	addi	r2,r2,16
 400eeb4:	10800037 	ldwio	r2,0(r2)
 400eeb8:	10bfffcc 	andi	r2,r2,65535
 400eebc:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 400eec0:	e0bffd17 	ldw	r2,-12(fp)
 400eec4:	10800504 	addi	r2,r2,20
 400eec8:	10800037 	ldwio	r2,0(r2)
 400eecc:	10bfffcc 	andi	r2,r2,65535
 400eed0:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 400eed4:	e0bfff17 	ldw	r2,-4(fp)
 400eed8:	1006943a 	slli	r3,r2,16
 400eedc:	e0bffe17 	ldw	r2,-8(fp)
 400eee0:	1884b03a 	or	r2,r3,r2
 400eee4:	0084303a 	nor	r2,zero,r2
#endif
  }
}
 400eee8:	e037883a 	mov	sp,fp
 400eeec:	df000017 	ldw	fp,0(sp)
 400eef0:	dec00104 	addi	sp,sp,4
 400eef4:	f800283a 	ret

0400eef8 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 400eef8:	deffff04 	addi	sp,sp,-4
 400eefc:	df000015 	stw	fp,0(sp)
 400ef00:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 400ef04:	d0a6e717 	ldw	r2,-25700(gp)
}
 400ef08:	e037883a 	mov	sp,fp
 400ef0c:	df000017 	ldw	fp,0(sp)
 400ef10:	dec00104 	addi	sp,sp,4
 400ef14:	f800283a 	ret

0400ef18 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
 400ef18:	defffc04 	addi	sp,sp,-16
 400ef1c:	dfc00315 	stw	ra,12(sp)
 400ef20:	df000215 	stw	fp,8(sp)
 400ef24:	df000204 	addi	fp,sp,8
 400ef28:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
 400ef2c:	d1600904 	addi	r5,gp,-32732
 400ef30:	e13fff17 	ldw	r4,-4(fp)
 400ef34:	400f5e00 	call	400f5e0 <alt_find_dev>
 400ef38:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 400ef3c:	e0bffe17 	ldw	r2,-8(fp)
}
 400ef40:	e037883a 	mov	sp,fp
 400ef44:	dfc00117 	ldw	ra,4(sp)
 400ef48:	df000017 	ldw	fp,0(sp)
 400ef4c:	dec00204 	addi	sp,sp,8
 400ef50:	f800283a 	ret

0400ef54 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
 400ef54:	defffd04 	addi	sp,sp,-12
 400ef58:	df000215 	stw	fp,8(sp)
 400ef5c:	df000204 	addi	fp,sp,8
 400ef60:	e13ffe15 	stw	r4,-8(fp)
 400ef64:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 400ef68:	e0bffe17 	ldw	r2,-8(fp)
 400ef6c:	10800a17 	ldw	r2,40(r2)
 400ef70:	10800023 	ldbuio	r2,0(r2)
 400ef74:	10803fcc 	andi	r2,r2,255
 400ef78:	1007883a 	mov	r3,r2
 400ef7c:	e0bfff17 	ldw	r2,-4(fp)
 400ef80:	10c00005 	stb	r3,0(r2)

	return 0;
 400ef84:	0005883a 	mov	r2,zero
}
 400ef88:	e037883a 	mov	sp,fp
 400ef8c:	df000017 	ldw	fp,0(sp)
 400ef90:	dec00104 	addi	sp,sp,4
 400ef94:	f800283a 	ret

0400ef98 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
 400ef98:	defffc04 	addi	sp,sp,-16
 400ef9c:	df000315 	stw	fp,12(sp)
 400efa0:	df000304 	addi	fp,sp,12
 400efa4:	e13ffd15 	stw	r4,-12(fp)
 400efa8:	2805883a 	mov	r2,r5
 400efac:	e1bfff15 	stw	r6,-4(fp)
 400efb0:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400efb4:	e0bffd17 	ldw	r2,-12(fp)
 400efb8:	10800a17 	ldw	r2,40(r2)
 400efbc:	1007883a 	mov	r3,r2
 400efc0:	e0bffe03 	ldbu	r2,-8(fp)
 400efc4:	10800fcc 	andi	r2,r2,63
 400efc8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400efcc:	e0bffd17 	ldw	r2,-12(fp)
 400efd0:	10800a17 	ldw	r2,40(r2)
 400efd4:	10800044 	addi	r2,r2,1
 400efd8:	10800023 	ldbuio	r2,0(r2)
 400efdc:	10803fcc 	andi	r2,r2,255
 400efe0:	1007883a 	mov	r3,r2
 400efe4:	e0bfff17 	ldw	r2,-4(fp)
 400efe8:	10c00005 	stb	r3,0(r2)

	return 0;
 400efec:	0005883a 	mov	r2,zero
}
 400eff0:	e037883a 	mov	sp,fp
 400eff4:	df000017 	ldw	fp,0(sp)
 400eff8:	dec00104 	addi	sp,sp,4
 400effc:	f800283a 	ret

0400f000 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
 400f000:	defffc04 	addi	sp,sp,-16
 400f004:	df000315 	stw	fp,12(sp)
 400f008:	df000304 	addi	fp,sp,12
 400f00c:	e13ffd15 	stw	r4,-12(fp)
 400f010:	2807883a 	mov	r3,r5
 400f014:	3005883a 	mov	r2,r6
 400f018:	e0fffe05 	stb	r3,-8(fp)
 400f01c:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400f020:	e0bffd17 	ldw	r2,-12(fp)
 400f024:	10800a17 	ldw	r2,40(r2)
 400f028:	1007883a 	mov	r3,r2
 400f02c:	e0bffe03 	ldbu	r2,-8(fp)
 400f030:	10800fcc 	andi	r2,r2,63
 400f034:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
 400f038:	e0bffd17 	ldw	r2,-12(fp)
 400f03c:	10800a17 	ldw	r2,40(r2)
 400f040:	10800044 	addi	r2,r2,1
 400f044:	1007883a 	mov	r3,r2
 400f048:	e0bfff03 	ldbu	r2,-4(fp)
 400f04c:	18800025 	stbio	r2,0(r3)

	return 0;
 400f050:	0005883a 	mov	r2,zero
}
 400f054:	e037883a 	mov	sp,fp
 400f058:	df000017 	ldw	fp,0(sp)
 400f05c:	dec00104 	addi	sp,sp,4
 400f060:	f800283a 	ret

0400f064 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
 400f064:	defffd04 	addi	sp,sp,-12
 400f068:	df000215 	stw	fp,8(sp)
 400f06c:	df000204 	addi	fp,sp,8
 400f070:	e13ffe15 	stw	r4,-8(fp)
 400f074:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400f078:	e0bffe17 	ldw	r2,-8(fp)
 400f07c:	10800a17 	ldw	r2,40(r2)
 400f080:	1007883a 	mov	r3,r2
 400f084:	00800c84 	movi	r2,50
 400f088:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400f08c:	e0bffe17 	ldw	r2,-8(fp)
 400f090:	10800a17 	ldw	r2,40(r2)
 400f094:	10800044 	addi	r2,r2,1
 400f098:	10800023 	ldbuio	r2,0(r2)
 400f09c:	10803fcc 	andi	r2,r2,255
 400f0a0:	10ffffcc 	andi	r3,r2,65535
 400f0a4:	e0bfff17 	ldw	r2,-4(fp)
 400f0a8:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400f0ac:	e0bffe17 	ldw	r2,-8(fp)
 400f0b0:	10800a17 	ldw	r2,40(r2)
 400f0b4:	1007883a 	mov	r3,r2
 400f0b8:	00800cc4 	movi	r2,51
 400f0bc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 400f0c0:	e0bffe17 	ldw	r2,-8(fp)
 400f0c4:	10800a17 	ldw	r2,40(r2)
 400f0c8:	10800044 	addi	r2,r2,1
 400f0cc:	10800023 	ldbuio	r2,0(r2)
 400f0d0:	10803fcc 	andi	r2,r2,255
 400f0d4:	10bfffcc 	andi	r2,r2,65535
 400f0d8:	1004923a 	slli	r2,r2,8
 400f0dc:	e0ffff17 	ldw	r3,-4(fp)
 400f0e0:	18c00017 	ldw	r3,0(r3)
 400f0e4:	1885883a 	add	r2,r3,r2
 400f0e8:	1007883a 	mov	r3,r2
 400f0ec:	e0bfff17 	ldw	r2,-4(fp)
 400f0f0:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
 400f0f4:	e0bfff17 	ldw	r2,-4(fp)
 400f0f8:	10800017 	ldw	r2,0(r2)
 400f0fc:	10a0000c 	andi	r2,r2,32768
 400f100:	10000626 	beq	r2,zero,400f11c <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
 400f104:	e0bfff17 	ldw	r2,-4(fp)
 400f108:	10800017 	ldw	r2,0(r2)
 400f10c:	10bffff4 	orhi	r2,r2,65535
 400f110:	1007883a 	mov	r3,r2
 400f114:	e0bfff17 	ldw	r2,-4(fp)
 400f118:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 400f11c:	0005883a 	mov	r2,zero
}
 400f120:	e037883a 	mov	sp,fp
 400f124:	df000017 	ldw	fp,0(sp)
 400f128:	dec00104 	addi	sp,sp,4
 400f12c:	f800283a 	ret

0400f130 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
 400f130:	defffd04 	addi	sp,sp,-12
 400f134:	df000215 	stw	fp,8(sp)
 400f138:	df000204 	addi	fp,sp,8
 400f13c:	e13ffe15 	stw	r4,-8(fp)
 400f140:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400f144:	e0bffe17 	ldw	r2,-8(fp)
 400f148:	10800a17 	ldw	r2,40(r2)
 400f14c:	1007883a 	mov	r3,r2
 400f150:	00800d04 	movi	r2,52
 400f154:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400f158:	e0bffe17 	ldw	r2,-8(fp)
 400f15c:	10800a17 	ldw	r2,40(r2)
 400f160:	10800044 	addi	r2,r2,1
 400f164:	10800023 	ldbuio	r2,0(r2)
 400f168:	10803fcc 	andi	r2,r2,255
 400f16c:	10ffffcc 	andi	r3,r2,65535
 400f170:	e0bfff17 	ldw	r2,-4(fp)
 400f174:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400f178:	e0bffe17 	ldw	r2,-8(fp)
 400f17c:	10800a17 	ldw	r2,40(r2)
 400f180:	1007883a 	mov	r3,r2
 400f184:	00800d44 	movi	r2,53
 400f188:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 400f18c:	e0bffe17 	ldw	r2,-8(fp)
 400f190:	10800a17 	ldw	r2,40(r2)
 400f194:	10800044 	addi	r2,r2,1
 400f198:	10800023 	ldbuio	r2,0(r2)
 400f19c:	10803fcc 	andi	r2,r2,255
 400f1a0:	10bfffcc 	andi	r2,r2,65535
 400f1a4:	1004923a 	slli	r2,r2,8
 400f1a8:	e0ffff17 	ldw	r3,-4(fp)
 400f1ac:	18c00017 	ldw	r3,0(r3)
 400f1b0:	1885883a 	add	r2,r3,r2
 400f1b4:	1007883a 	mov	r3,r2
 400f1b8:	e0bfff17 	ldw	r2,-4(fp)
 400f1bc:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
 400f1c0:	e0bfff17 	ldw	r2,-4(fp)
 400f1c4:	10800017 	ldw	r2,0(r2)
 400f1c8:	10a0000c 	andi	r2,r2,32768
 400f1cc:	10000626 	beq	r2,zero,400f1e8 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
 400f1d0:	e0bfff17 	ldw	r2,-4(fp)
 400f1d4:	10800017 	ldw	r2,0(r2)
 400f1d8:	10bffff4 	orhi	r2,r2,65535
 400f1dc:	1007883a 	mov	r3,r2
 400f1e0:	e0bfff17 	ldw	r2,-4(fp)
 400f1e4:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 400f1e8:	0005883a 	mov	r2,zero
}
 400f1ec:	e037883a 	mov	sp,fp
 400f1f0:	df000017 	ldw	fp,0(sp)
 400f1f4:	dec00104 	addi	sp,sp,4
 400f1f8:	f800283a 	ret

0400f1fc <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
 400f1fc:	defffd04 	addi	sp,sp,-12
 400f200:	df000215 	stw	fp,8(sp)
 400f204:	df000204 	addi	fp,sp,8
 400f208:	e13ffe15 	stw	r4,-8(fp)
 400f20c:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400f210:	e0bffe17 	ldw	r2,-8(fp)
 400f214:	10800a17 	ldw	r2,40(r2)
 400f218:	1007883a 	mov	r3,r2
 400f21c:	00800d84 	movi	r2,54
 400f220:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400f224:	e0bffe17 	ldw	r2,-8(fp)
 400f228:	10800a17 	ldw	r2,40(r2)
 400f22c:	10800044 	addi	r2,r2,1
 400f230:	10800023 	ldbuio	r2,0(r2)
 400f234:	10803fcc 	andi	r2,r2,255
 400f238:	10ffffcc 	andi	r3,r2,65535
 400f23c:	e0bfff17 	ldw	r2,-4(fp)
 400f240:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400f244:	e0bffe17 	ldw	r2,-8(fp)
 400f248:	10800a17 	ldw	r2,40(r2)
 400f24c:	1007883a 	mov	r3,r2
 400f250:	00800dc4 	movi	r2,55
 400f254:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 400f258:	e0bffe17 	ldw	r2,-8(fp)
 400f25c:	10800a17 	ldw	r2,40(r2)
 400f260:	10800044 	addi	r2,r2,1
 400f264:	10800023 	ldbuio	r2,0(r2)
 400f268:	10803fcc 	andi	r2,r2,255
 400f26c:	10bfffcc 	andi	r2,r2,65535
 400f270:	1004923a 	slli	r2,r2,8
 400f274:	e0ffff17 	ldw	r3,-4(fp)
 400f278:	18c00017 	ldw	r3,0(r3)
 400f27c:	1885883a 	add	r2,r3,r2
 400f280:	1007883a 	mov	r3,r2
 400f284:	e0bfff17 	ldw	r2,-4(fp)
 400f288:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
 400f28c:	e0bfff17 	ldw	r2,-4(fp)
 400f290:	10800017 	ldw	r2,0(r2)
 400f294:	10a0000c 	andi	r2,r2,32768
 400f298:	10000626 	beq	r2,zero,400f2b4 <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
 400f29c:	e0bfff17 	ldw	r2,-4(fp)
 400f2a0:	10800017 	ldw	r2,0(r2)
 400f2a4:	10bffff4 	orhi	r2,r2,65535
 400f2a8:	1007883a 	mov	r3,r2
 400f2ac:	e0bfff17 	ldw	r2,-4(fp)
 400f2b0:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 400f2b4:	0005883a 	mov	r2,zero
}
 400f2b8:	e037883a 	mov	sp,fp
 400f2bc:	df000017 	ldw	fp,0(sp)
 400f2c0:	dec00104 	addi	sp,sp,4
 400f2c4:	f800283a 	ret

0400f2c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400f2c8:	defff404 	addi	sp,sp,-48
 400f2cc:	df000b15 	stw	fp,44(sp)
 400f2d0:	df000b04 	addi	fp,sp,44
 400f2d4:	e13ffc15 	stw	r4,-16(fp)
 400f2d8:	e17ffd15 	stw	r5,-12(fp)
 400f2dc:	e1bffe15 	stw	r6,-8(fp)
 400f2e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400f2e4:	e03ff515 	stw	zero,-44(fp)
 400f2e8:	d0a6e917 	ldw	r2,-25692(gp)
  
  if (alt_ticks_per_second ())
 400f2ec:	10004726 	beq	r2,zero,400f40c <alt_alarm_start+0x144>
  {
    if (alarm)
 400f2f0:	e0bffc17 	ldw	r2,-16(fp)
 400f2f4:	10004326 	beq	r2,zero,400f404 <alt_alarm_start+0x13c>
    {
      alarm->callback = callback;
 400f2f8:	e0bffc17 	ldw	r2,-16(fp)
 400f2fc:	e0fffe17 	ldw	r3,-8(fp)
 400f300:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400f304:	e0bffc17 	ldw	r2,-16(fp)
 400f308:	e0ffff17 	ldw	r3,-4(fp)
 400f30c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f310:	0005303a 	rdctl	r2,status
 400f314:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f318:	e0fff817 	ldw	r3,-32(fp)
 400f31c:	00bfff84 	movi	r2,-2
 400f320:	1884703a 	and	r2,r3,r2
 400f324:	1001703a 	wrctl	status,r2
  
  return context;
 400f328:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 400f32c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400f330:	d0a6ea17 	ldw	r2,-25688(gp)
      
      current_nticks = alt_nticks();
 400f334:	e0bff515 	stw	r2,-44(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400f338:	e0fffd17 	ldw	r3,-12(fp)
 400f33c:	e0bff517 	ldw	r2,-44(fp)
 400f340:	1885883a 	add	r2,r3,r2
 400f344:	10c00044 	addi	r3,r2,1
 400f348:	e0bffc17 	ldw	r2,-16(fp)
 400f34c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400f350:	e0bffc17 	ldw	r2,-16(fp)
 400f354:	10c00217 	ldw	r3,8(r2)
 400f358:	e0bff517 	ldw	r2,-44(fp)
 400f35c:	1880042e 	bgeu	r3,r2,400f370 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400f360:	e0bffc17 	ldw	r2,-16(fp)
 400f364:	00c00044 	movi	r3,1
 400f368:	10c00405 	stb	r3,16(r2)
 400f36c:	00000206 	br	400f378 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400f370:	e0bffc17 	ldw	r2,-16(fp)
 400f374:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400f378:	e0bffc17 	ldw	r2,-16(fp)
 400f37c:	d0e00f04 	addi	r3,gp,-32708
 400f380:	e0fff915 	stw	r3,-28(fp)
 400f384:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400f388:	e0bffb17 	ldw	r2,-20(fp)
 400f38c:	e0fff917 	ldw	r3,-28(fp)
 400f390:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400f394:	e0bff917 	ldw	r2,-28(fp)
 400f398:	10c00017 	ldw	r3,0(r2)
 400f39c:	e0bffb17 	ldw	r2,-20(fp)
 400f3a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400f3a4:	e0bff917 	ldw	r2,-28(fp)
 400f3a8:	10800017 	ldw	r2,0(r2)
 400f3ac:	e0fffb17 	ldw	r3,-20(fp)
 400f3b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400f3b4:	e0bff917 	ldw	r2,-28(fp)
 400f3b8:	e0fffb17 	ldw	r3,-20(fp)
 400f3bc:	10c00015 	stw	r3,0(r2)
 400f3c0:	e0bff717 	ldw	r2,-36(fp)
 400f3c4:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 400f3c8:	0005303a 	rdctl	r2,status
 400f3cc:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 400f3d0:	e0fffa17 	ldw	r3,-24(fp)
 400f3d4:	00bfff84 	movi	r2,-2
 400f3d8:	1884703a 	and	r2,r3,r2
 400f3dc:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 400f3e0:	e0bff617 	ldw	r2,-40(fp)
 400f3e4:	1080004c 	andi	r2,r2,1
 400f3e8:	e0fffa17 	ldw	r3,-24(fp)
 400f3ec:	1884b03a 	or	r2,r3,r2
 400f3f0:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
 400f3f4:	e0bffa17 	ldw	r2,-24(fp)
 400f3f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400f3fc:	0005883a 	mov	r2,zero
 400f400:	00000306 	br	400f410 <alt_alarm_start+0x148>
    }
    else
    {
      return -EINVAL;
 400f404:	00bffa84 	movi	r2,-22
 400f408:	00000106 	br	400f410 <alt_alarm_start+0x148>
    }
  }
  else
  {
    return -ENOTSUP;
 400f40c:	00bfde84 	movi	r2,-134
  }
}
 400f410:	e037883a 	mov	sp,fp
 400f414:	df000017 	ldw	fp,0(sp)
 400f418:	dec00104 	addi	sp,sp,4
 400f41c:	f800283a 	ret

0400f420 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400f420:	deffff04 	addi	sp,sp,-4
 400f424:	df000015 	stw	fp,0(sp)
 400f428:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400f42c:	0001883a 	nop
 400f430:	e037883a 	mov	sp,fp
 400f434:	df000017 	ldw	fp,0(sp)
 400f438:	dec00104 	addi	sp,sp,4
 400f43c:	f800283a 	ret

0400f440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f440:	defffe04 	addi	sp,sp,-8
 400f444:	dfc00115 	stw	ra,4(sp)
 400f448:	df000015 	stw	fp,0(sp)
 400f44c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f450:	d0a00c17 	ldw	r2,-32720(gp)
 400f454:	10000326 	beq	r2,zero,400f464 <alt_get_errno+0x24>
 400f458:	d0a00c17 	ldw	r2,-32720(gp)
 400f45c:	103ee83a 	callr	r2
 400f460:	00000106 	br	400f468 <alt_get_errno+0x28>
 400f464:	d0a6df04 	addi	r2,gp,-25732
}
 400f468:	e037883a 	mov	sp,fp
 400f46c:	dfc00117 	ldw	ra,4(sp)
 400f470:	df000017 	ldw	fp,0(sp)
 400f474:	dec00204 	addi	sp,sp,8
 400f478:	f800283a 	ret

0400f47c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400f47c:	defffa04 	addi	sp,sp,-24
 400f480:	dfc00515 	stw	ra,20(sp)
 400f484:	df000415 	stw	fp,16(sp)
 400f488:	df000404 	addi	fp,sp,16
 400f48c:	e13ffe15 	stw	r4,-8(fp)
 400f490:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400f494:	e0bffe17 	ldw	r2,-8(fp)
 400f498:	10000326 	beq	r2,zero,400f4a8 <alt_dev_llist_insert+0x2c>
 400f49c:	e0bffe17 	ldw	r2,-8(fp)
 400f4a0:	10800217 	ldw	r2,8(r2)
 400f4a4:	1000061e 	bne	r2,zero,400f4c0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400f4a8:	400f4400 	call	400f440 <alt_get_errno>
 400f4ac:	1007883a 	mov	r3,r2
 400f4b0:	00800584 	movi	r2,22
 400f4b4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400f4b8:	00bffa84 	movi	r2,-22
 400f4bc:	00001306 	br	400f50c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400f4c0:	e0bffe17 	ldw	r2,-8(fp)
 400f4c4:	e0ffff17 	ldw	r3,-4(fp)
 400f4c8:	e0fffc15 	stw	r3,-16(fp)
 400f4cc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400f4d0:	e0bffd17 	ldw	r2,-12(fp)
 400f4d4:	e0fffc17 	ldw	r3,-16(fp)
 400f4d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400f4dc:	e0bffc17 	ldw	r2,-16(fp)
 400f4e0:	10c00017 	ldw	r3,0(r2)
 400f4e4:	e0bffd17 	ldw	r2,-12(fp)
 400f4e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400f4ec:	e0bffc17 	ldw	r2,-16(fp)
 400f4f0:	10800017 	ldw	r2,0(r2)
 400f4f4:	e0fffd17 	ldw	r3,-12(fp)
 400f4f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400f4fc:	e0bffc17 	ldw	r2,-16(fp)
 400f500:	e0fffd17 	ldw	r3,-12(fp)
 400f504:	10c00015 	stw	r3,0(r2)

  return 0;  
 400f508:	0005883a 	mov	r2,zero
}
 400f50c:	e037883a 	mov	sp,fp
 400f510:	dfc00117 	ldw	ra,4(sp)
 400f514:	df000017 	ldw	fp,0(sp)
 400f518:	dec00204 	addi	sp,sp,8
 400f51c:	f800283a 	ret

0400f520 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400f520:	defffd04 	addi	sp,sp,-12
 400f524:	dfc00215 	stw	ra,8(sp)
 400f528:	df000115 	stw	fp,4(sp)
 400f52c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400f530:	00810074 	movhi	r2,1025
 400f534:	10809104 	addi	r2,r2,580
 400f538:	e0bfff15 	stw	r2,-4(fp)
 400f53c:	00000606 	br	400f558 <_do_ctors+0x38>
        (*ctor) (); 
 400f540:	e0bfff17 	ldw	r2,-4(fp)
 400f544:	10800017 	ldw	r2,0(r2)
 400f548:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400f54c:	e0bfff17 	ldw	r2,-4(fp)
 400f550:	10bfff04 	addi	r2,r2,-4
 400f554:	e0bfff15 	stw	r2,-4(fp)
 400f558:	e0ffff17 	ldw	r3,-4(fp)
 400f55c:	00810074 	movhi	r2,1025
 400f560:	10809204 	addi	r2,r2,584
 400f564:	18bff62e 	bgeu	r3,r2,400f540 <__alt_data_end+0xfc00f540>
        (*ctor) (); 
}
 400f568:	0001883a 	nop
 400f56c:	e037883a 	mov	sp,fp
 400f570:	dfc00117 	ldw	ra,4(sp)
 400f574:	df000017 	ldw	fp,0(sp)
 400f578:	dec00204 	addi	sp,sp,8
 400f57c:	f800283a 	ret

0400f580 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400f580:	defffd04 	addi	sp,sp,-12
 400f584:	dfc00215 	stw	ra,8(sp)
 400f588:	df000115 	stw	fp,4(sp)
 400f58c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400f590:	00810074 	movhi	r2,1025
 400f594:	10809104 	addi	r2,r2,580
 400f598:	e0bfff15 	stw	r2,-4(fp)
 400f59c:	00000606 	br	400f5b8 <_do_dtors+0x38>
        (*dtor) (); 
 400f5a0:	e0bfff17 	ldw	r2,-4(fp)
 400f5a4:	10800017 	ldw	r2,0(r2)
 400f5a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400f5ac:	e0bfff17 	ldw	r2,-4(fp)
 400f5b0:	10bfff04 	addi	r2,r2,-4
 400f5b4:	e0bfff15 	stw	r2,-4(fp)
 400f5b8:	e0ffff17 	ldw	r3,-4(fp)
 400f5bc:	00810074 	movhi	r2,1025
 400f5c0:	10809204 	addi	r2,r2,584
 400f5c4:	18bff62e 	bgeu	r3,r2,400f5a0 <__alt_data_end+0xfc00f5a0>
        (*dtor) (); 
}
 400f5c8:	0001883a 	nop
 400f5cc:	e037883a 	mov	sp,fp
 400f5d0:	dfc00117 	ldw	ra,4(sp)
 400f5d4:	df000017 	ldw	fp,0(sp)
 400f5d8:	dec00204 	addi	sp,sp,8
 400f5dc:	f800283a 	ret

0400f5e0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400f5e0:	defffa04 	addi	sp,sp,-24
 400f5e4:	dfc00515 	stw	ra,20(sp)
 400f5e8:	df000415 	stw	fp,16(sp)
 400f5ec:	df000404 	addi	fp,sp,16
 400f5f0:	e13ffe15 	stw	r4,-8(fp)
 400f5f4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400f5f8:	e0bfff17 	ldw	r2,-4(fp)
 400f5fc:	10800017 	ldw	r2,0(r2)
 400f600:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400f604:	e13ffe17 	ldw	r4,-8(fp)
 400f608:	40024f40 	call	40024f4 <strlen>
 400f60c:	10800044 	addi	r2,r2,1
 400f610:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400f614:	00000d06 	br	400f64c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400f618:	e0bffc17 	ldw	r2,-16(fp)
 400f61c:	10800217 	ldw	r2,8(r2)
 400f620:	e0fffd17 	ldw	r3,-12(fp)
 400f624:	180d883a 	mov	r6,r3
 400f628:	e17ffe17 	ldw	r5,-8(fp)
 400f62c:	1009883a 	mov	r4,r2
 400f630:	400ff000 	call	400ff00 <memcmp>
 400f634:	1000021e 	bne	r2,zero,400f640 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400f638:	e0bffc17 	ldw	r2,-16(fp)
 400f63c:	00000706 	br	400f65c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400f640:	e0bffc17 	ldw	r2,-16(fp)
 400f644:	10800017 	ldw	r2,0(r2)
 400f648:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400f64c:	e0fffc17 	ldw	r3,-16(fp)
 400f650:	e0bfff17 	ldw	r2,-4(fp)
 400f654:	18bff01e 	bne	r3,r2,400f618 <__alt_data_end+0xfc00f618>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400f658:	0005883a 	mov	r2,zero
}
 400f65c:	e037883a 	mov	sp,fp
 400f660:	dfc00117 	ldw	ra,4(sp)
 400f664:	df000017 	ldw	fp,0(sp)
 400f668:	dec00204 	addi	sp,sp,8
 400f66c:	f800283a 	ret

0400f670 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400f670:	defffb04 	addi	sp,sp,-20
 400f674:	dfc00415 	stw	ra,16(sp)
 400f678:	df000315 	stw	fp,12(sp)
 400f67c:	df000304 	addi	fp,sp,12
 400f680:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400f684:	d0a00717 	ldw	r2,-32740(gp)
 400f688:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400f68c:	00003106 	br	400f754 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 400f690:	e0bffd17 	ldw	r2,-12(fp)
 400f694:	10800217 	ldw	r2,8(r2)
 400f698:	1009883a 	mov	r4,r2
 400f69c:	40024f40 	call	40024f4 <strlen>
 400f6a0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400f6a4:	e0bffd17 	ldw	r2,-12(fp)
 400f6a8:	10c00217 	ldw	r3,8(r2)
 400f6ac:	e0bffe17 	ldw	r2,-8(fp)
 400f6b0:	10bfffc4 	addi	r2,r2,-1
 400f6b4:	1885883a 	add	r2,r3,r2
 400f6b8:	10800003 	ldbu	r2,0(r2)
 400f6bc:	10803fcc 	andi	r2,r2,255
 400f6c0:	1080201c 	xori	r2,r2,128
 400f6c4:	10bfe004 	addi	r2,r2,-128
 400f6c8:	10800bd8 	cmpnei	r2,r2,47
 400f6cc:	1000031e 	bne	r2,zero,400f6dc <alt_find_file+0x6c>
    {
      len -= 1;
 400f6d0:	e0bffe17 	ldw	r2,-8(fp)
 400f6d4:	10bfffc4 	addi	r2,r2,-1
 400f6d8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400f6dc:	e0bffe17 	ldw	r2,-8(fp)
 400f6e0:	e0ffff17 	ldw	r3,-4(fp)
 400f6e4:	1885883a 	add	r2,r3,r2
 400f6e8:	10800003 	ldbu	r2,0(r2)
 400f6ec:	10803fcc 	andi	r2,r2,255
 400f6f0:	1080201c 	xori	r2,r2,128
 400f6f4:	10bfe004 	addi	r2,r2,-128
 400f6f8:	10800be0 	cmpeqi	r2,r2,47
 400f6fc:	1000081e 	bne	r2,zero,400f720 <alt_find_file+0xb0>
 400f700:	e0bffe17 	ldw	r2,-8(fp)
 400f704:	e0ffff17 	ldw	r3,-4(fp)
 400f708:	1885883a 	add	r2,r3,r2
 400f70c:	10800003 	ldbu	r2,0(r2)
 400f710:	10803fcc 	andi	r2,r2,255
 400f714:	1080201c 	xori	r2,r2,128
 400f718:	10bfe004 	addi	r2,r2,-128
 400f71c:	10000a1e 	bne	r2,zero,400f748 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 400f720:	e0bffd17 	ldw	r2,-12(fp)
 400f724:	10800217 	ldw	r2,8(r2)
 400f728:	e0fffe17 	ldw	r3,-8(fp)
 400f72c:	180d883a 	mov	r6,r3
 400f730:	e17fff17 	ldw	r5,-4(fp)
 400f734:	1009883a 	mov	r4,r2
 400f738:	400ff000 	call	400ff00 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400f73c:	1000021e 	bne	r2,zero,400f748 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400f740:	e0bffd17 	ldw	r2,-12(fp)
 400f744:	00000706 	br	400f764 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 400f748:	e0bffd17 	ldw	r2,-12(fp)
 400f74c:	10800017 	ldw	r2,0(r2)
 400f750:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400f754:	e0fffd17 	ldw	r3,-12(fp)
 400f758:	d0a00704 	addi	r2,gp,-32740
 400f75c:	18bfcc1e 	bne	r3,r2,400f690 <__alt_data_end+0xfc00f690>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400f760:	0005883a 	mov	r2,zero
}
 400f764:	e037883a 	mov	sp,fp
 400f768:	dfc00117 	ldw	ra,4(sp)
 400f76c:	df000017 	ldw	fp,0(sp)
 400f770:	dec00204 	addi	sp,sp,8
 400f774:	f800283a 	ret

0400f778 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400f778:	defffc04 	addi	sp,sp,-16
 400f77c:	df000315 	stw	fp,12(sp)
 400f780:	df000304 	addi	fp,sp,12
 400f784:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400f788:	00bffa04 	movi	r2,-24
 400f78c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400f790:	e03ffd15 	stw	zero,-12(fp)
 400f794:	00001906 	br	400f7fc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 400f798:	00810074 	movhi	r2,1025
 400f79c:	10844104 	addi	r2,r2,4356
 400f7a0:	e0fffd17 	ldw	r3,-12(fp)
 400f7a4:	18c00324 	muli	r3,r3,12
 400f7a8:	10c5883a 	add	r2,r2,r3
 400f7ac:	10800017 	ldw	r2,0(r2)
 400f7b0:	10000f1e 	bne	r2,zero,400f7f0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 400f7b4:	00810074 	movhi	r2,1025
 400f7b8:	10844104 	addi	r2,r2,4356
 400f7bc:	e0fffd17 	ldw	r3,-12(fp)
 400f7c0:	18c00324 	muli	r3,r3,12
 400f7c4:	10c5883a 	add	r2,r2,r3
 400f7c8:	e0ffff17 	ldw	r3,-4(fp)
 400f7cc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400f7d0:	d0e00b17 	ldw	r3,-32724(gp)
 400f7d4:	e0bffd17 	ldw	r2,-12(fp)
 400f7d8:	1880020e 	bge	r3,r2,400f7e4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 400f7dc:	e0bffd17 	ldw	r2,-12(fp)
 400f7e0:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 400f7e4:	e0bffd17 	ldw	r2,-12(fp)
 400f7e8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 400f7ec:	00000606 	br	400f808 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400f7f0:	e0bffd17 	ldw	r2,-12(fp)
 400f7f4:	10800044 	addi	r2,r2,1
 400f7f8:	e0bffd15 	stw	r2,-12(fp)
 400f7fc:	e0bffd17 	ldw	r2,-12(fp)
 400f800:	10800810 	cmplti	r2,r2,32
 400f804:	103fe41e 	bne	r2,zero,400f798 <__alt_data_end+0xfc00f798>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400f808:	e0bffe17 	ldw	r2,-8(fp)
}
 400f80c:	e037883a 	mov	sp,fp
 400f810:	df000017 	ldw	fp,0(sp)
 400f814:	dec00104 	addi	sp,sp,4
 400f818:	f800283a 	ret

0400f81c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400f81c:	defffe04 	addi	sp,sp,-8
 400f820:	dfc00115 	stw	ra,4(sp)
 400f824:	df000015 	stw	fp,0(sp)
 400f828:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 400f82c:	01500004 	movi	r5,16384
 400f830:	0009883a 	mov	r4,zero
 400f834:	400fd880 	call	400fd88 <alt_icache_flush>
#endif
}
 400f838:	0001883a 	nop
 400f83c:	e037883a 	mov	sp,fp
 400f840:	dfc00117 	ldw	ra,4(sp)
 400f844:	df000017 	ldw	fp,0(sp)
 400f848:	dec00204 	addi	sp,sp,8
 400f84c:	f800283a 	ret

0400f850 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400f850:	defff904 	addi	sp,sp,-28
 400f854:	dfc00615 	stw	ra,24(sp)
 400f858:	df000515 	stw	fp,20(sp)
 400f85c:	df000504 	addi	fp,sp,20
 400f860:	e13ffc15 	stw	r4,-16(fp)
 400f864:	e17ffd15 	stw	r5,-12(fp)
 400f868:	e1bffe15 	stw	r6,-8(fp)
 400f86c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 400f870:	e1bfff17 	ldw	r6,-4(fp)
 400f874:	e17ffe17 	ldw	r5,-8(fp)
 400f878:	e13ffd17 	ldw	r4,-12(fp)
 400f87c:	400dd440 	call	400dd44 <open>
 400f880:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400f884:	e0bffb17 	ldw	r2,-20(fp)
 400f888:	10001c16 	blt	r2,zero,400f8fc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 400f88c:	00810074 	movhi	r2,1025
 400f890:	10844104 	addi	r2,r2,4356
 400f894:	e0fffb17 	ldw	r3,-20(fp)
 400f898:	18c00324 	muli	r3,r3,12
 400f89c:	10c5883a 	add	r2,r2,r3
 400f8a0:	10c00017 	ldw	r3,0(r2)
 400f8a4:	e0bffc17 	ldw	r2,-16(fp)
 400f8a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400f8ac:	00810074 	movhi	r2,1025
 400f8b0:	10844104 	addi	r2,r2,4356
 400f8b4:	e0fffb17 	ldw	r3,-20(fp)
 400f8b8:	18c00324 	muli	r3,r3,12
 400f8bc:	10c5883a 	add	r2,r2,r3
 400f8c0:	10800104 	addi	r2,r2,4
 400f8c4:	10c00017 	ldw	r3,0(r2)
 400f8c8:	e0bffc17 	ldw	r2,-16(fp)
 400f8cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400f8d0:	00810074 	movhi	r2,1025
 400f8d4:	10844104 	addi	r2,r2,4356
 400f8d8:	e0fffb17 	ldw	r3,-20(fp)
 400f8dc:	18c00324 	muli	r3,r3,12
 400f8e0:	10c5883a 	add	r2,r2,r3
 400f8e4:	10800204 	addi	r2,r2,8
 400f8e8:	10c00017 	ldw	r3,0(r2)
 400f8ec:	e0bffc17 	ldw	r2,-16(fp)
 400f8f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400f8f4:	e13ffb17 	ldw	r4,-20(fp)
 400f8f8:	400dfd00 	call	400dfd0 <alt_release_fd>
  }
} 
 400f8fc:	0001883a 	nop
 400f900:	e037883a 	mov	sp,fp
 400f904:	dfc00117 	ldw	ra,4(sp)
 400f908:	df000017 	ldw	fp,0(sp)
 400f90c:	dec00204 	addi	sp,sp,8
 400f910:	f800283a 	ret

0400f914 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400f914:	defffb04 	addi	sp,sp,-20
 400f918:	dfc00415 	stw	ra,16(sp)
 400f91c:	df000315 	stw	fp,12(sp)
 400f920:	df000304 	addi	fp,sp,12
 400f924:	e13ffd15 	stw	r4,-12(fp)
 400f928:	e17ffe15 	stw	r5,-8(fp)
 400f92c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400f930:	01c07fc4 	movi	r7,511
 400f934:	01800044 	movi	r6,1
 400f938:	e17ffd17 	ldw	r5,-12(fp)
 400f93c:	01010074 	movhi	r4,1025
 400f940:	21044404 	addi	r4,r4,4368
 400f944:	400f8500 	call	400f850 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400f948:	01c07fc4 	movi	r7,511
 400f94c:	000d883a 	mov	r6,zero
 400f950:	e17ffe17 	ldw	r5,-8(fp)
 400f954:	01010074 	movhi	r4,1025
 400f958:	21044104 	addi	r4,r4,4356
 400f95c:	400f8500 	call	400f850 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400f960:	01c07fc4 	movi	r7,511
 400f964:	01800044 	movi	r6,1
 400f968:	e17fff17 	ldw	r5,-4(fp)
 400f96c:	01010074 	movhi	r4,1025
 400f970:	21044704 	addi	r4,r4,4380
 400f974:	400f8500 	call	400f850 <alt_open_fd>
}  
 400f978:	0001883a 	nop
 400f97c:	e037883a 	mov	sp,fp
 400f980:	dfc00117 	ldw	ra,4(sp)
 400f984:	df000017 	ldw	fp,0(sp)
 400f988:	dec00204 	addi	sp,sp,8
 400f98c:	f800283a 	ret

0400f990 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 400f990:	deffed04 	addi	sp,sp,-76
 400f994:	df001215 	stw	fp,72(sp)
 400f998:	df001204 	addi	fp,sp,72
 400f99c:	e13ffd15 	stw	r4,-12(fp)
 400f9a0:	e17ffe15 	stw	r5,-8(fp)
 400f9a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 400f9a8:	00bffa84 	movi	r2,-22
 400f9ac:	e0bfee15 	stw	r2,-72(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400f9b0:	e0bffd17 	ldw	r2,-12(fp)
 400f9b4:	10800828 	cmpgeui	r2,r2,32
 400f9b8:	1000711e 	bne	r2,zero,400fb80 <alt_irq_register+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f9bc:	0005303a 	rdctl	r2,status
 400f9c0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f9c4:	e0fff317 	ldw	r3,-52(fp)
 400f9c8:	00bfff84 	movi	r2,-2
 400f9cc:	1884703a 	and	r2,r3,r2
 400f9d0:	1001703a 	wrctl	status,r2
  
  return context;
 400f9d4:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 400f9d8:	e0bff015 	stw	r2,-64(fp)

    alt_irq[id].handler = handler;
 400f9dc:	00810074 	movhi	r2,1025
 400f9e0:	108fba04 	addi	r2,r2,16104
 400f9e4:	e0fffd17 	ldw	r3,-12(fp)
 400f9e8:	180690fa 	slli	r3,r3,3
 400f9ec:	10c5883a 	add	r2,r2,r3
 400f9f0:	e0ffff17 	ldw	r3,-4(fp)
 400f9f4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 400f9f8:	00810074 	movhi	r2,1025
 400f9fc:	108fba04 	addi	r2,r2,16104
 400fa00:	e0fffd17 	ldw	r3,-12(fp)
 400fa04:	180690fa 	slli	r3,r3,3
 400fa08:	10c5883a 	add	r2,r2,r3
 400fa0c:	10800104 	addi	r2,r2,4
 400fa10:	e0fffe17 	ldw	r3,-8(fp)
 400fa14:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 400fa18:	e0bfff17 	ldw	r2,-4(fp)
 400fa1c:	10002426 	beq	r2,zero,400fab0 <alt_irq_register+0x120>
 400fa20:	e0bffd17 	ldw	r2,-12(fp)
 400fa24:	e0bfef15 	stw	r2,-68(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fa28:	0005303a 	rdctl	r2,status
 400fa2c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fa30:	e0fff417 	ldw	r3,-48(fp)
 400fa34:	00bfff84 	movi	r2,-2
 400fa38:	1884703a 	and	r2,r3,r2
 400fa3c:	1001703a 	wrctl	status,r2
  
  return context;
 400fa40:	e0bff417 	ldw	r2,-48(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400fa44:	e0bff515 	stw	r2,-44(fp)

  alt_irq_active |= (1 << id);
 400fa48:	00c00044 	movi	r3,1
 400fa4c:	e0bfef17 	ldw	r2,-68(fp)
 400fa50:	1884983a 	sll	r2,r3,r2
 400fa54:	1007883a 	mov	r3,r2
 400fa58:	d0a6e817 	ldw	r2,-25696(gp)
 400fa5c:	1884b03a 	or	r2,r3,r2
 400fa60:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400fa64:	d0a6e817 	ldw	r2,-25696(gp)
 400fa68:	100170fa 	wrctl	ienable,r2
 400fa6c:	e0bff517 	ldw	r2,-44(fp)
 400fa70:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 400fa74:	0005303a 	rdctl	r2,status
 400fa78:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 400fa7c:	e0fff717 	ldw	r3,-36(fp)
 400fa80:	00bfff84 	movi	r2,-2
 400fa84:	1884703a 	and	r2,r3,r2
 400fa88:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 400fa8c:	e0bff617 	ldw	r2,-40(fp)
 400fa90:	1080004c 	andi	r2,r2,1
 400fa94:	e0fff717 	ldw	r3,-36(fp)
 400fa98:	1884b03a 	or	r2,r3,r2
 400fa9c:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
 400faa0:	e0bff717 	ldw	r2,-36(fp)
 400faa4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400faa8:	0005883a 	mov	r2,zero
 400faac:	00002406 	br	400fb40 <alt_irq_register+0x1b0>
 400fab0:	e0bffd17 	ldw	r2,-12(fp)
 400fab4:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fab8:	0005303a 	rdctl	r2,status
 400fabc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fac0:	e0fff817 	ldw	r3,-32(fp)
 400fac4:	00bfff84 	movi	r2,-2
 400fac8:	1884703a 	and	r2,r3,r2
 400facc:	1001703a 	wrctl	status,r2
  
  return context;
 400fad0:	e0bff817 	ldw	r2,-32(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400fad4:	e0bff915 	stw	r2,-28(fp)

  alt_irq_active &= ~(1 << id);
 400fad8:	00c00044 	movi	r3,1
 400fadc:	e0bff117 	ldw	r2,-60(fp)
 400fae0:	1884983a 	sll	r2,r3,r2
 400fae4:	0084303a 	nor	r2,zero,r2
 400fae8:	1007883a 	mov	r3,r2
 400faec:	d0a6e817 	ldw	r2,-25696(gp)
 400faf0:	1884703a 	and	r2,r3,r2
 400faf4:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400faf8:	d0a6e817 	ldw	r2,-25696(gp)
 400fafc:	100170fa 	wrctl	ienable,r2
 400fb00:	e0bff917 	ldw	r2,-28(fp)
 400fb04:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 400fb08:	0005303a 	rdctl	r2,status
 400fb0c:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 400fb10:	e0fffb17 	ldw	r3,-20(fp)
 400fb14:	00bfff84 	movi	r2,-2
 400fb18:	1884703a 	and	r2,r3,r2
 400fb1c:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 400fb20:	e0bffa17 	ldw	r2,-24(fp)
 400fb24:	1080004c 	andi	r2,r2,1
 400fb28:	e0fffb17 	ldw	r3,-20(fp)
 400fb2c:	1884b03a 	or	r2,r3,r2
 400fb30:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
 400fb34:	e0bffb17 	ldw	r2,-20(fp)
 400fb38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400fb3c:	0005883a 	mov	r2,zero
 400fb40:	e0bfee15 	stw	r2,-72(fp)
 400fb44:	e0bff017 	ldw	r2,-64(fp)
 400fb48:	e0bff215 	stw	r2,-56(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 400fb4c:	0005303a 	rdctl	r2,status
 400fb50:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 400fb54:	e0fffc17 	ldw	r3,-16(fp)
 400fb58:	00bfff84 	movi	r2,-2
 400fb5c:	1884703a 	and	r2,r3,r2
 400fb60:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 400fb64:	e0bff217 	ldw	r2,-56(fp)
 400fb68:	1080004c 	andi	r2,r2,1
 400fb6c:	e0fffc17 	ldw	r3,-16(fp)
 400fb70:	1884b03a 	or	r2,r3,r2
 400fb74:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
 400fb78:	e0bffc17 	ldw	r2,-16(fp)
 400fb7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 400fb80:	e0bfee17 	ldw	r2,-72(fp)
}
 400fb84:	e037883a 	mov	sp,fp
 400fb88:	df000017 	ldw	fp,0(sp)
 400fb8c:	dec00104 	addi	sp,sp,4
 400fb90:	f800283a 	ret

0400fb94 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400fb94:	defff904 	addi	sp,sp,-28
 400fb98:	df000615 	stw	fp,24(sp)
 400fb9c:	df000604 	addi	fp,sp,24
 400fba0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fba4:	0005303a 	rdctl	r2,status
 400fba8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fbac:	e0fffb17 	ldw	r3,-20(fp)
 400fbb0:	00bfff84 	movi	r2,-2
 400fbb4:	1884703a 	and	r2,r3,r2
 400fbb8:	1001703a 	wrctl	status,r2
  
  return context;
 400fbbc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400fbc0:	e0bffa15 	stw	r2,-24(fp)
  alt_llist_remove (&alarm->llist);
 400fbc4:	e0bfff17 	ldw	r2,-4(fp)
 400fbc8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400fbcc:	e0bffc17 	ldw	r2,-16(fp)
 400fbd0:	10800017 	ldw	r2,0(r2)
 400fbd4:	e0fffc17 	ldw	r3,-16(fp)
 400fbd8:	18c00117 	ldw	r3,4(r3)
 400fbdc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400fbe0:	e0bffc17 	ldw	r2,-16(fp)
 400fbe4:	10800117 	ldw	r2,4(r2)
 400fbe8:	e0fffc17 	ldw	r3,-16(fp)
 400fbec:	18c00017 	ldw	r3,0(r3)
 400fbf0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400fbf4:	e0bffc17 	ldw	r2,-16(fp)
 400fbf8:	e0fffc17 	ldw	r3,-16(fp)
 400fbfc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400fc00:	e0bffc17 	ldw	r2,-16(fp)
 400fc04:	e0fffc17 	ldw	r3,-16(fp)
 400fc08:	10c00015 	stw	r3,0(r2)
 400fc0c:	e0bffa17 	ldw	r2,-24(fp)
 400fc10:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 400fc14:	0005303a 	rdctl	r2,status
 400fc18:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 400fc1c:	e0fffe17 	ldw	r3,-8(fp)
 400fc20:	00bfff84 	movi	r2,-2
 400fc24:	1884703a 	and	r2,r3,r2
 400fc28:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 400fc2c:	e0bffd17 	ldw	r2,-12(fp)
 400fc30:	1080004c 	andi	r2,r2,1
 400fc34:	e0fffe17 	ldw	r3,-8(fp)
 400fc38:	1884b03a 	or	r2,r3,r2
 400fc3c:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
 400fc40:	e0bffe17 	ldw	r2,-8(fp)
 400fc44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400fc48:	0001883a 	nop
 400fc4c:	e037883a 	mov	sp,fp
 400fc50:	df000017 	ldw	fp,0(sp)
 400fc54:	dec00104 	addi	sp,sp,4
 400fc58:	f800283a 	ret

0400fc5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400fc5c:	defffb04 	addi	sp,sp,-20
 400fc60:	dfc00415 	stw	ra,16(sp)
 400fc64:	df000315 	stw	fp,12(sp)
 400fc68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400fc6c:	d0a00f17 	ldw	r2,-32708(gp)
 400fc70:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400fc74:	d0a6ea17 	ldw	r2,-25688(gp)
 400fc78:	10800044 	addi	r2,r2,1
 400fc7c:	d0a6ea15 	stw	r2,-25688(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400fc80:	00002e06 	br	400fd3c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400fc84:	e0bffd17 	ldw	r2,-12(fp)
 400fc88:	10800017 	ldw	r2,0(r2)
 400fc8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400fc90:	e0bffd17 	ldw	r2,-12(fp)
 400fc94:	10800403 	ldbu	r2,16(r2)
 400fc98:	10803fcc 	andi	r2,r2,255
 400fc9c:	10000426 	beq	r2,zero,400fcb0 <alt_tick+0x54>
 400fca0:	d0a6ea17 	ldw	r2,-25688(gp)
 400fca4:	1000021e 	bne	r2,zero,400fcb0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400fca8:	e0bffd17 	ldw	r2,-12(fp)
 400fcac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400fcb0:	e0bffd17 	ldw	r2,-12(fp)
 400fcb4:	10800217 	ldw	r2,8(r2)
 400fcb8:	d0e6ea17 	ldw	r3,-25688(gp)
 400fcbc:	18801d36 	bltu	r3,r2,400fd34 <alt_tick+0xd8>
 400fcc0:	e0bffd17 	ldw	r2,-12(fp)
 400fcc4:	10800403 	ldbu	r2,16(r2)
 400fcc8:	10803fcc 	andi	r2,r2,255
 400fccc:	1000191e 	bne	r2,zero,400fd34 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400fcd0:	e0bffd17 	ldw	r2,-12(fp)
 400fcd4:	10800317 	ldw	r2,12(r2)
 400fcd8:	e0fffd17 	ldw	r3,-12(fp)
 400fcdc:	18c00517 	ldw	r3,20(r3)
 400fce0:	1809883a 	mov	r4,r3
 400fce4:	103ee83a 	callr	r2
 400fce8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400fcec:	e0bfff17 	ldw	r2,-4(fp)
 400fcf0:	1000031e 	bne	r2,zero,400fd00 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400fcf4:	e13ffd17 	ldw	r4,-12(fp)
 400fcf8:	400fb940 	call	400fb94 <alt_alarm_stop>
 400fcfc:	00000d06 	br	400fd34 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400fd00:	e0bffd17 	ldw	r2,-12(fp)
 400fd04:	10c00217 	ldw	r3,8(r2)
 400fd08:	e0bfff17 	ldw	r2,-4(fp)
 400fd0c:	1887883a 	add	r3,r3,r2
 400fd10:	e0bffd17 	ldw	r2,-12(fp)
 400fd14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400fd18:	e0bffd17 	ldw	r2,-12(fp)
 400fd1c:	10c00217 	ldw	r3,8(r2)
 400fd20:	d0a6ea17 	ldw	r2,-25688(gp)
 400fd24:	1880032e 	bgeu	r3,r2,400fd34 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400fd28:	e0bffd17 	ldw	r2,-12(fp)
 400fd2c:	00c00044 	movi	r3,1
 400fd30:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400fd34:	e0bffe17 	ldw	r2,-8(fp)
 400fd38:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400fd3c:	e0fffd17 	ldw	r3,-12(fp)
 400fd40:	d0a00f04 	addi	r2,gp,-32708
 400fd44:	18bfcf1e 	bne	r3,r2,400fc84 <__alt_data_end+0xfc00fc84>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400fd48:	0001883a 	nop
}
 400fd4c:	0001883a 	nop
 400fd50:	e037883a 	mov	sp,fp
 400fd54:	dfc00117 	ldw	ra,4(sp)
 400fd58:	df000017 	ldw	fp,0(sp)
 400fd5c:	dec00204 	addi	sp,sp,8
 400fd60:	f800283a 	ret

0400fd64 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 400fd64:	deffff04 	addi	sp,sp,-4
 400fd68:	df000015 	stw	fp,0(sp)
 400fd6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400fd70:	000170fa 	wrctl	ienable,zero
}
 400fd74:	0001883a 	nop
 400fd78:	e037883a 	mov	sp,fp
 400fd7c:	df000017 	ldw	fp,0(sp)
 400fd80:	dec00104 	addi	sp,sp,4
 400fd84:	f800283a 	ret

0400fd88 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 400fd88:	defffb04 	addi	sp,sp,-20
 400fd8c:	df000415 	stw	fp,16(sp)
 400fd90:	df000404 	addi	fp,sp,16
 400fd94:	e13ffe15 	stw	r4,-8(fp)
 400fd98:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400fd9c:	e0bfff17 	ldw	r2,-4(fp)
 400fda0:	10900070 	cmpltui	r2,r2,16385
 400fda4:	1000021e 	bne	r2,zero,400fdb0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 400fda8:	00900004 	movi	r2,16384
 400fdac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 400fdb0:	e0fffe17 	ldw	r3,-8(fp)
 400fdb4:	e0bfff17 	ldw	r2,-4(fp)
 400fdb8:	1885883a 	add	r2,r3,r2
 400fdbc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400fdc0:	e0bffe17 	ldw	r2,-8(fp)
 400fdc4:	e0bffc15 	stw	r2,-16(fp)
 400fdc8:	00000506 	br	400fde0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400fdcc:	e0bffc17 	ldw	r2,-16(fp)
 400fdd0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400fdd4:	e0bffc17 	ldw	r2,-16(fp)
 400fdd8:	10800804 	addi	r2,r2,32
 400fddc:	e0bffc15 	stw	r2,-16(fp)
 400fde0:	e0fffc17 	ldw	r3,-16(fp)
 400fde4:	e0bffd17 	ldw	r2,-12(fp)
 400fde8:	18bff836 	bltu	r3,r2,400fdcc <__alt_data_end+0xfc00fdcc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 400fdec:	e0bffe17 	ldw	r2,-8(fp)
 400fdf0:	108007cc 	andi	r2,r2,31
 400fdf4:	10000226 	beq	r2,zero,400fe00 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400fdf8:	e0bffc17 	ldw	r2,-16(fp)
 400fdfc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400fe00:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 400fe04:	0001883a 	nop
 400fe08:	e037883a 	mov	sp,fp
 400fe0c:	df000017 	ldw	fp,0(sp)
 400fe10:	dec00104 	addi	sp,sp,4
 400fe14:	f800283a 	ret

0400fe18 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400fe18:	defffe04 	addi	sp,sp,-8
 400fe1c:	df000115 	stw	fp,4(sp)
 400fe20:	df000104 	addi	fp,sp,4
 400fe24:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400fe28:	e0bfff17 	ldw	r2,-4(fp)
 400fe2c:	10bffe84 	addi	r2,r2,-6
 400fe30:	10c00428 	cmpgeui	r3,r2,16
 400fe34:	18001a1e 	bne	r3,zero,400fea0 <alt_exception_cause_generated_bad_addr+0x88>
 400fe38:	100690ba 	slli	r3,r2,2
 400fe3c:	00810074 	movhi	r2,1025
 400fe40:	10bf9404 	addi	r2,r2,-432
 400fe44:	1885883a 	add	r2,r3,r2
 400fe48:	10800017 	ldw	r2,0(r2)
 400fe4c:	1000683a 	jmp	r2
 400fe50:	0400fe90 	cmplti	r16,zero,1018
 400fe54:	0400fe90 	cmplti	r16,zero,1018
 400fe58:	0400fea0 	cmpeqi	r16,zero,1018
 400fe5c:	0400fea0 	cmpeqi	r16,zero,1018
 400fe60:	0400fea0 	cmpeqi	r16,zero,1018
 400fe64:	0400fe90 	cmplti	r16,zero,1018
 400fe68:	0400fe98 	cmpnei	r16,zero,1018
 400fe6c:	0400fea0 	cmpeqi	r16,zero,1018
 400fe70:	0400fe90 	cmplti	r16,zero,1018
 400fe74:	0400fe90 	cmplti	r16,zero,1018
 400fe78:	0400fea0 	cmpeqi	r16,zero,1018
 400fe7c:	0400fe90 	cmplti	r16,zero,1018
 400fe80:	0400fe98 	cmpnei	r16,zero,1018
 400fe84:	0400fea0 	cmpeqi	r16,zero,1018
 400fe88:	0400fea0 	cmpeqi	r16,zero,1018
 400fe8c:	0400fe90 	cmplti	r16,zero,1018
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 400fe90:	00800044 	movi	r2,1
 400fe94:	00000306 	br	400fea4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400fe98:	0005883a 	mov	r2,zero
 400fe9c:	00000106 	br	400fea4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 400fea0:	0005883a 	mov	r2,zero
  }
}
 400fea4:	e037883a 	mov	sp,fp
 400fea8:	df000017 	ldw	fp,0(sp)
 400feac:	dec00104 	addi	sp,sp,4
 400feb0:	f800283a 	ret

0400feb4 <atexit>:
 400feb4:	200b883a 	mov	r5,r4
 400feb8:	000f883a 	mov	r7,zero
 400febc:	000d883a 	mov	r6,zero
 400fec0:	0009883a 	mov	r4,zero
 400fec4:	400ff7c1 	jmpi	400ff7c <__register_exitproc>

0400fec8 <exit>:
 400fec8:	defffe04 	addi	sp,sp,-8
 400fecc:	000b883a 	mov	r5,zero
 400fed0:	dc000015 	stw	r16,0(sp)
 400fed4:	dfc00115 	stw	ra,4(sp)
 400fed8:	2021883a 	mov	r16,r4
 400fedc:	40100940 	call	4010094 <__call_exitprocs>
 400fee0:	00810074 	movhi	r2,1025
 400fee4:	1088c404 	addi	r2,r2,8976
 400fee8:	11000017 	ldw	r4,0(r2)
 400feec:	20800f17 	ldw	r2,60(r4)
 400fef0:	10000126 	beq	r2,zero,400fef8 <exit+0x30>
 400fef4:	103ee83a 	callr	r2
 400fef8:	8009883a 	mov	r4,r16
 400fefc:	40102140 	call	4010214 <_exit>

0400ff00 <memcmp>:
 400ff00:	01c000c4 	movi	r7,3
 400ff04:	3980192e 	bgeu	r7,r6,400ff6c <memcmp+0x6c>
 400ff08:	2144b03a 	or	r2,r4,r5
 400ff0c:	11c4703a 	and	r2,r2,r7
 400ff10:	10000f26 	beq	r2,zero,400ff50 <memcmp+0x50>
 400ff14:	20800003 	ldbu	r2,0(r4)
 400ff18:	28c00003 	ldbu	r3,0(r5)
 400ff1c:	10c0151e 	bne	r2,r3,400ff74 <memcmp+0x74>
 400ff20:	31bfff84 	addi	r6,r6,-2
 400ff24:	01ffffc4 	movi	r7,-1
 400ff28:	00000406 	br	400ff3c <memcmp+0x3c>
 400ff2c:	20800003 	ldbu	r2,0(r4)
 400ff30:	28c00003 	ldbu	r3,0(r5)
 400ff34:	31bfffc4 	addi	r6,r6,-1
 400ff38:	10c00e1e 	bne	r2,r3,400ff74 <memcmp+0x74>
 400ff3c:	21000044 	addi	r4,r4,1
 400ff40:	29400044 	addi	r5,r5,1
 400ff44:	31fff91e 	bne	r6,r7,400ff2c <__alt_data_end+0xfc00ff2c>
 400ff48:	0005883a 	mov	r2,zero
 400ff4c:	f800283a 	ret
 400ff50:	20c00017 	ldw	r3,0(r4)
 400ff54:	28800017 	ldw	r2,0(r5)
 400ff58:	18bfee1e 	bne	r3,r2,400ff14 <__alt_data_end+0xfc00ff14>
 400ff5c:	31bfff04 	addi	r6,r6,-4
 400ff60:	21000104 	addi	r4,r4,4
 400ff64:	29400104 	addi	r5,r5,4
 400ff68:	39bff936 	bltu	r7,r6,400ff50 <__alt_data_end+0xfc00ff50>
 400ff6c:	303fe91e 	bne	r6,zero,400ff14 <__alt_data_end+0xfc00ff14>
 400ff70:	003ff506 	br	400ff48 <__alt_data_end+0xfc00ff48>
 400ff74:	10c5c83a 	sub	r2,r2,r3
 400ff78:	f800283a 	ret

0400ff7c <__register_exitproc>:
 400ff7c:	defffa04 	addi	sp,sp,-24
 400ff80:	dc000315 	stw	r16,12(sp)
 400ff84:	04010074 	movhi	r16,1025
 400ff88:	8408c404 	addi	r16,r16,8976
 400ff8c:	80c00017 	ldw	r3,0(r16)
 400ff90:	dc400415 	stw	r17,16(sp)
 400ff94:	dfc00515 	stw	ra,20(sp)
 400ff98:	18805217 	ldw	r2,328(r3)
 400ff9c:	2023883a 	mov	r17,r4
 400ffa0:	10003726 	beq	r2,zero,4010080 <__register_exitproc+0x104>
 400ffa4:	10c00117 	ldw	r3,4(r2)
 400ffa8:	010007c4 	movi	r4,31
 400ffac:	20c00e16 	blt	r4,r3,400ffe8 <__register_exitproc+0x6c>
 400ffb0:	1a000044 	addi	r8,r3,1
 400ffb4:	8800221e 	bne	r17,zero,4010040 <__register_exitproc+0xc4>
 400ffb8:	18c00084 	addi	r3,r3,2
 400ffbc:	18c7883a 	add	r3,r3,r3
 400ffc0:	18c7883a 	add	r3,r3,r3
 400ffc4:	12000115 	stw	r8,4(r2)
 400ffc8:	10c7883a 	add	r3,r2,r3
 400ffcc:	19400015 	stw	r5,0(r3)
 400ffd0:	0005883a 	mov	r2,zero
 400ffd4:	dfc00517 	ldw	ra,20(sp)
 400ffd8:	dc400417 	ldw	r17,16(sp)
 400ffdc:	dc000317 	ldw	r16,12(sp)
 400ffe0:	dec00604 	addi	sp,sp,24
 400ffe4:	f800283a 	ret
 400ffe8:	00800034 	movhi	r2,0
 400ffec:	10800004 	addi	r2,r2,0
 400fff0:	10002626 	beq	r2,zero,401008c <__register_exitproc+0x110>
 400fff4:	01006404 	movi	r4,400
 400fff8:	d9400015 	stw	r5,0(sp)
 400fffc:	d9800115 	stw	r6,4(sp)
 4010000:	d9c00215 	stw	r7,8(sp)
 4010004:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4010008:	d9400017 	ldw	r5,0(sp)
 401000c:	d9800117 	ldw	r6,4(sp)
 4010010:	d9c00217 	ldw	r7,8(sp)
 4010014:	10001d26 	beq	r2,zero,401008c <__register_exitproc+0x110>
 4010018:	81000017 	ldw	r4,0(r16)
 401001c:	10000115 	stw	zero,4(r2)
 4010020:	02000044 	movi	r8,1
 4010024:	22405217 	ldw	r9,328(r4)
 4010028:	0007883a 	mov	r3,zero
 401002c:	12400015 	stw	r9,0(r2)
 4010030:	20805215 	stw	r2,328(r4)
 4010034:	10006215 	stw	zero,392(r2)
 4010038:	10006315 	stw	zero,396(r2)
 401003c:	883fde26 	beq	r17,zero,400ffb8 <__alt_data_end+0xfc00ffb8>
 4010040:	18c9883a 	add	r4,r3,r3
 4010044:	2109883a 	add	r4,r4,r4
 4010048:	1109883a 	add	r4,r2,r4
 401004c:	21802215 	stw	r6,136(r4)
 4010050:	01800044 	movi	r6,1
 4010054:	12406217 	ldw	r9,392(r2)
 4010058:	30cc983a 	sll	r6,r6,r3
 401005c:	4992b03a 	or	r9,r9,r6
 4010060:	12406215 	stw	r9,392(r2)
 4010064:	21c04215 	stw	r7,264(r4)
 4010068:	01000084 	movi	r4,2
 401006c:	893fd21e 	bne	r17,r4,400ffb8 <__alt_data_end+0xfc00ffb8>
 4010070:	11006317 	ldw	r4,396(r2)
 4010074:	218cb03a 	or	r6,r4,r6
 4010078:	11806315 	stw	r6,396(r2)
 401007c:	003fce06 	br	400ffb8 <__alt_data_end+0xfc00ffb8>
 4010080:	18805304 	addi	r2,r3,332
 4010084:	18805215 	stw	r2,328(r3)
 4010088:	003fc606 	br	400ffa4 <__alt_data_end+0xfc00ffa4>
 401008c:	00bfffc4 	movi	r2,-1
 4010090:	003fd006 	br	400ffd4 <__alt_data_end+0xfc00ffd4>

04010094 <__call_exitprocs>:
 4010094:	defff504 	addi	sp,sp,-44
 4010098:	df000915 	stw	fp,36(sp)
 401009c:	dd400615 	stw	r21,24(sp)
 40100a0:	dc800315 	stw	r18,12(sp)
 40100a4:	dfc00a15 	stw	ra,40(sp)
 40100a8:	ddc00815 	stw	r23,32(sp)
 40100ac:	dd800715 	stw	r22,28(sp)
 40100b0:	dd000515 	stw	r20,20(sp)
 40100b4:	dcc00415 	stw	r19,16(sp)
 40100b8:	dc400215 	stw	r17,8(sp)
 40100bc:	dc000115 	stw	r16,4(sp)
 40100c0:	d9000015 	stw	r4,0(sp)
 40100c4:	2839883a 	mov	fp,r5
 40100c8:	04800044 	movi	r18,1
 40100cc:	057fffc4 	movi	r21,-1
 40100d0:	00810074 	movhi	r2,1025
 40100d4:	1088c404 	addi	r2,r2,8976
 40100d8:	12000017 	ldw	r8,0(r2)
 40100dc:	45005217 	ldw	r20,328(r8)
 40100e0:	44c05204 	addi	r19,r8,328
 40100e4:	a0001c26 	beq	r20,zero,4010158 <__call_exitprocs+0xc4>
 40100e8:	a0800117 	ldw	r2,4(r20)
 40100ec:	15ffffc4 	addi	r23,r2,-1
 40100f0:	b8000d16 	blt	r23,zero,4010128 <__call_exitprocs+0x94>
 40100f4:	14000044 	addi	r16,r2,1
 40100f8:	8421883a 	add	r16,r16,r16
 40100fc:	8421883a 	add	r16,r16,r16
 4010100:	84402004 	addi	r17,r16,128
 4010104:	a463883a 	add	r17,r20,r17
 4010108:	a421883a 	add	r16,r20,r16
 401010c:	e0001e26 	beq	fp,zero,4010188 <__call_exitprocs+0xf4>
 4010110:	80804017 	ldw	r2,256(r16)
 4010114:	e0801c26 	beq	fp,r2,4010188 <__call_exitprocs+0xf4>
 4010118:	bdffffc4 	addi	r23,r23,-1
 401011c:	843fff04 	addi	r16,r16,-4
 4010120:	8c7fff04 	addi	r17,r17,-4
 4010124:	bd7ff91e 	bne	r23,r21,401010c <__alt_data_end+0xfc01010c>
 4010128:	00800034 	movhi	r2,0
 401012c:	10800004 	addi	r2,r2,0
 4010130:	10000926 	beq	r2,zero,4010158 <__call_exitprocs+0xc4>
 4010134:	a0800117 	ldw	r2,4(r20)
 4010138:	1000301e 	bne	r2,zero,40101fc <__call_exitprocs+0x168>
 401013c:	a0800017 	ldw	r2,0(r20)
 4010140:	10003226 	beq	r2,zero,401020c <__call_exitprocs+0x178>
 4010144:	a009883a 	mov	r4,r20
 4010148:	98800015 	stw	r2,0(r19)
 401014c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4010150:	9d000017 	ldw	r20,0(r19)
 4010154:	a03fe41e 	bne	r20,zero,40100e8 <__alt_data_end+0xfc0100e8>
 4010158:	dfc00a17 	ldw	ra,40(sp)
 401015c:	df000917 	ldw	fp,36(sp)
 4010160:	ddc00817 	ldw	r23,32(sp)
 4010164:	dd800717 	ldw	r22,28(sp)
 4010168:	dd400617 	ldw	r21,24(sp)
 401016c:	dd000517 	ldw	r20,20(sp)
 4010170:	dcc00417 	ldw	r19,16(sp)
 4010174:	dc800317 	ldw	r18,12(sp)
 4010178:	dc400217 	ldw	r17,8(sp)
 401017c:	dc000117 	ldw	r16,4(sp)
 4010180:	dec00b04 	addi	sp,sp,44
 4010184:	f800283a 	ret
 4010188:	a0800117 	ldw	r2,4(r20)
 401018c:	80c00017 	ldw	r3,0(r16)
 4010190:	10bfffc4 	addi	r2,r2,-1
 4010194:	15c01426 	beq	r2,r23,40101e8 <__call_exitprocs+0x154>
 4010198:	80000015 	stw	zero,0(r16)
 401019c:	183fde26 	beq	r3,zero,4010118 <__alt_data_end+0xfc010118>
 40101a0:	95c8983a 	sll	r4,r18,r23
 40101a4:	a0806217 	ldw	r2,392(r20)
 40101a8:	a5800117 	ldw	r22,4(r20)
 40101ac:	2084703a 	and	r2,r4,r2
 40101b0:	10000b26 	beq	r2,zero,40101e0 <__call_exitprocs+0x14c>
 40101b4:	a0806317 	ldw	r2,396(r20)
 40101b8:	2088703a 	and	r4,r4,r2
 40101bc:	20000c1e 	bne	r4,zero,40101f0 <__call_exitprocs+0x15c>
 40101c0:	89400017 	ldw	r5,0(r17)
 40101c4:	d9000017 	ldw	r4,0(sp)
 40101c8:	183ee83a 	callr	r3
 40101cc:	a0800117 	ldw	r2,4(r20)
 40101d0:	15bfbf1e 	bne	r2,r22,40100d0 <__alt_data_end+0xfc0100d0>
 40101d4:	98800017 	ldw	r2,0(r19)
 40101d8:	153fcf26 	beq	r2,r20,4010118 <__alt_data_end+0xfc010118>
 40101dc:	003fbc06 	br	40100d0 <__alt_data_end+0xfc0100d0>
 40101e0:	183ee83a 	callr	r3
 40101e4:	003ff906 	br	40101cc <__alt_data_end+0xfc0101cc>
 40101e8:	a5c00115 	stw	r23,4(r20)
 40101ec:	003feb06 	br	401019c <__alt_data_end+0xfc01019c>
 40101f0:	89000017 	ldw	r4,0(r17)
 40101f4:	183ee83a 	callr	r3
 40101f8:	003ff406 	br	40101cc <__alt_data_end+0xfc0101cc>
 40101fc:	a0800017 	ldw	r2,0(r20)
 4010200:	a027883a 	mov	r19,r20
 4010204:	1029883a 	mov	r20,r2
 4010208:	003fb606 	br	40100e4 <__alt_data_end+0xfc0100e4>
 401020c:	0005883a 	mov	r2,zero
 4010210:	003ffb06 	br	4010200 <__alt_data_end+0xfc010200>

04010214 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4010214:	defffd04 	addi	sp,sp,-12
 4010218:	df000215 	stw	fp,8(sp)
 401021c:	df000204 	addi	fp,sp,8
 4010220:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4010224:	0001883a 	nop
 4010228:	e0bfff17 	ldw	r2,-4(fp)
 401022c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4010230:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4010234:	10000226 	beq	r2,zero,4010240 <_exit+0x2c>
    ALT_SIM_FAIL();
 4010238:	002af070 	cmpltui	zero,zero,43969
 401023c:	00000106 	br	4010244 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4010240:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4010244:	003fff06 	br	4010244 <__alt_data_end+0xfc010244>
